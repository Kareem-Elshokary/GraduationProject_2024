
GP_SELF-PARKING_APPLICATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003444  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08003574  08003574  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08003574  08003574  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08003574  08003574  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003574  08003574  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003574  08003574  00013574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003578  08003578  00013578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  0800357c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000008  08003584  00020008  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08003584  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000870d  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017e4  00000000  00000000  0002873e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000510  00000000  00000000  00029f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000458  00000000  00000000  0002a438  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000235a  00000000  00000000  0002a890  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005641  00000000  00000000  0002cbea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000121ff  00000000  00000000  0003222b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0004442a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001488  00000000  00000000  000444a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	0800355c 	.word	0x0800355c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	0800355c 	.word	0x0800355c

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ae:	f1a4 0401 	sub.w	r4, r4, #1
 80002b2:	d1e9      	bne.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__gedf2>:
 800090c:	f04f 3cff 	mov.w	ip, #4294967295
 8000910:	e006      	b.n	8000920 <__cmpdf2+0x4>
 8000912:	bf00      	nop

08000914 <__ledf2>:
 8000914:	f04f 0c01 	mov.w	ip, #1
 8000918:	e002      	b.n	8000920 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__cmpdf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800092c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000930:	bf18      	it	ne
 8000932:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000936:	d01b      	beq.n	8000970 <__cmpdf2+0x54>
 8000938:	b001      	add	sp, #4
 800093a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093e:	bf0c      	ite	eq
 8000940:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000944:	ea91 0f03 	teqne	r1, r3
 8000948:	bf02      	ittt	eq
 800094a:	ea90 0f02 	teqeq	r0, r2
 800094e:	2000      	moveq	r0, #0
 8000950:	4770      	bxeq	lr
 8000952:	f110 0f00 	cmn.w	r0, #0
 8000956:	ea91 0f03 	teq	r1, r3
 800095a:	bf58      	it	pl
 800095c:	4299      	cmppl	r1, r3
 800095e:	bf08      	it	eq
 8000960:	4290      	cmpeq	r0, r2
 8000962:	bf2c      	ite	cs
 8000964:	17d8      	asrcs	r0, r3, #31
 8000966:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096a:	f040 0001 	orr.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d102      	bne.n	8000980 <__cmpdf2+0x64>
 800097a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097e:	d107      	bne.n	8000990 <__cmpdf2+0x74>
 8000980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d1d6      	bne.n	8000938 <__cmpdf2+0x1c>
 800098a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098e:	d0d3      	beq.n	8000938 <__cmpdf2+0x1c>
 8000990:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_cdrcmple>:
 8000998:	4684      	mov	ip, r0
 800099a:	4610      	mov	r0, r2
 800099c:	4662      	mov	r2, ip
 800099e:	468c      	mov	ip, r1
 80009a0:	4619      	mov	r1, r3
 80009a2:	4663      	mov	r3, ip
 80009a4:	e000      	b.n	80009a8 <__aeabi_cdcmpeq>
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdcmpeq>:
 80009a8:	b501      	push	{r0, lr}
 80009aa:	f7ff ffb7 	bl	800091c <__cmpdf2>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	bf48      	it	mi
 80009b2:	f110 0f00 	cmnmi.w	r0, #0
 80009b6:	bd01      	pop	{r0, pc}

080009b8 <__aeabi_dcmpeq>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff fff4 	bl	80009a8 <__aeabi_cdcmpeq>
 80009c0:	bf0c      	ite	eq
 80009c2:	2001      	moveq	r0, #1
 80009c4:	2000      	movne	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmplt>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffea 	bl	80009a8 <__aeabi_cdcmpeq>
 80009d4:	bf34      	ite	cc
 80009d6:	2001      	movcc	r0, #1
 80009d8:	2000      	movcs	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmple>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffe0 	bl	80009a8 <__aeabi_cdcmpeq>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpge>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffce 	bl	8000998 <__aeabi_cdrcmple>
 80009fc:	bf94      	ite	ls
 80009fe:	2001      	movls	r0, #1
 8000a00:	2000      	movhi	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpgt>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffc4 	bl	8000998 <__aeabi_cdrcmple>
 8000a10:	bf34      	ite	cc
 8000a12:	2001      	movcc	r0, #1
 8000a14:	2000      	movcs	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_frsub>:
 8000afc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b00:	e002      	b.n	8000b08 <__addsf3>
 8000b02:	bf00      	nop

08000b04 <__aeabi_fsub>:
 8000b04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b08 <__addsf3>:
 8000b08:	0042      	lsls	r2, r0, #1
 8000b0a:	bf1f      	itttt	ne
 8000b0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b10:	ea92 0f03 	teqne	r2, r3
 8000b14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1c:	d06a      	beq.n	8000bf4 <__addsf3+0xec>
 8000b1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b26:	bfc1      	itttt	gt
 8000b28:	18d2      	addgt	r2, r2, r3
 8000b2a:	4041      	eorgt	r1, r0
 8000b2c:	4048      	eorgt	r0, r1
 8000b2e:	4041      	eorgt	r1, r0
 8000b30:	bfb8      	it	lt
 8000b32:	425b      	neglt	r3, r3
 8000b34:	2b19      	cmp	r3, #25
 8000b36:	bf88      	it	hi
 8000b38:	4770      	bxhi	lr
 8000b3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b56:	bf18      	it	ne
 8000b58:	4249      	negne	r1, r1
 8000b5a:	ea92 0f03 	teq	r2, r3
 8000b5e:	d03f      	beq.n	8000be0 <__addsf3+0xd8>
 8000b60:	f1a2 0201 	sub.w	r2, r2, #1
 8000b64:	fa41 fc03 	asr.w	ip, r1, r3
 8000b68:	eb10 000c 	adds.w	r0, r0, ip
 8000b6c:	f1c3 0320 	rsb	r3, r3, #32
 8000b70:	fa01 f103 	lsl.w	r1, r1, r3
 8000b74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__addsf3+0x78>
 8000b7a:	4249      	negs	r1, r1
 8000b7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b84:	d313      	bcc.n	8000bae <__addsf3+0xa6>
 8000b86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b8a:	d306      	bcc.n	8000b9a <__addsf3+0x92>
 8000b8c:	0840      	lsrs	r0, r0, #1
 8000b8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b92:	f102 0201 	add.w	r2, r2, #1
 8000b96:	2afe      	cmp	r2, #254	; 0xfe
 8000b98:	d251      	bcs.n	8000c3e <__addsf3+0x136>
 8000b9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba2:	bf08      	it	eq
 8000ba4:	f020 0001 	biceq.w	r0, r0, #1
 8000ba8:	ea40 0003 	orr.w	r0, r0, r3
 8000bac:	4770      	bx	lr
 8000bae:	0049      	lsls	r1, r1, #1
 8000bb0:	eb40 0000 	adc.w	r0, r0, r0
 8000bb4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bb8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bbc:	d1ed      	bne.n	8000b9a <__addsf3+0x92>
 8000bbe:	fab0 fc80 	clz	ip, r0
 8000bc2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bc6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bca:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bce:	bfaa      	itet	ge
 8000bd0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bd4:	4252      	neglt	r2, r2
 8000bd6:	4318      	orrge	r0, r3
 8000bd8:	bfbc      	itt	lt
 8000bda:	40d0      	lsrlt	r0, r2
 8000bdc:	4318      	orrlt	r0, r3
 8000bde:	4770      	bx	lr
 8000be0:	f092 0f00 	teq	r2, #0
 8000be4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000be8:	bf06      	itte	eq
 8000bea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bee:	3201      	addeq	r2, #1
 8000bf0:	3b01      	subne	r3, #1
 8000bf2:	e7b5      	b.n	8000b60 <__addsf3+0x58>
 8000bf4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bfc:	bf18      	it	ne
 8000bfe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c02:	d021      	beq.n	8000c48 <__addsf3+0x140>
 8000c04:	ea92 0f03 	teq	r2, r3
 8000c08:	d004      	beq.n	8000c14 <__addsf3+0x10c>
 8000c0a:	f092 0f00 	teq	r2, #0
 8000c0e:	bf08      	it	eq
 8000c10:	4608      	moveq	r0, r1
 8000c12:	4770      	bx	lr
 8000c14:	ea90 0f01 	teq	r0, r1
 8000c18:	bf1c      	itt	ne
 8000c1a:	2000      	movne	r0, #0
 8000c1c:	4770      	bxne	lr
 8000c1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c22:	d104      	bne.n	8000c2e <__addsf3+0x126>
 8000c24:	0040      	lsls	r0, r0, #1
 8000c26:	bf28      	it	cs
 8000c28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c2c:	4770      	bx	lr
 8000c2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c32:	bf3c      	itt	cc
 8000c34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c38:	4770      	bxcc	lr
 8000c3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	4770      	bx	lr
 8000c48:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c4c:	bf16      	itet	ne
 8000c4e:	4608      	movne	r0, r1
 8000c50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c54:	4601      	movne	r1, r0
 8000c56:	0242      	lsls	r2, r0, #9
 8000c58:	bf06      	itte	eq
 8000c5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c5e:	ea90 0f01 	teqeq	r0, r1
 8000c62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_ui2f>:
 8000c68:	f04f 0300 	mov.w	r3, #0
 8000c6c:	e004      	b.n	8000c78 <__aeabi_i2f+0x8>
 8000c6e:	bf00      	nop

08000c70 <__aeabi_i2f>:
 8000c70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c74:	bf48      	it	mi
 8000c76:	4240      	negmi	r0, r0
 8000c78:	ea5f 0c00 	movs.w	ip, r0
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c84:	4601      	mov	r1, r0
 8000c86:	f04f 0000 	mov.w	r0, #0
 8000c8a:	e01c      	b.n	8000cc6 <__aeabi_l2f+0x2a>

08000c8c <__aeabi_ul2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e00a      	b.n	8000cb0 <__aeabi_l2f+0x14>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_l2f>:
 8000c9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca0:	bf08      	it	eq
 8000ca2:	4770      	bxeq	lr
 8000ca4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ca8:	d502      	bpl.n	8000cb0 <__aeabi_l2f+0x14>
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	ea5f 0c01 	movs.w	ip, r1
 8000cb4:	bf02      	ittt	eq
 8000cb6:	4684      	moveq	ip, r0
 8000cb8:	4601      	moveq	r1, r0
 8000cba:	2000      	moveq	r0, #0
 8000cbc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cc0:	bf08      	it	eq
 8000cc2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cca:	fabc f28c 	clz	r2, ip
 8000cce:	3a08      	subs	r2, #8
 8000cd0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cd4:	db10      	blt.n	8000cf8 <__aeabi_l2f+0x5c>
 8000cd6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cda:	4463      	add	r3, ip
 8000cdc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce0:	f1c2 0220 	rsb	r2, r2, #32
 8000ce4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ce8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cec:	eb43 0002 	adc.w	r0, r3, r2
 8000cf0:	bf08      	it	eq
 8000cf2:	f020 0001 	biceq.w	r0, r0, #1
 8000cf6:	4770      	bx	lr
 8000cf8:	f102 0220 	add.w	r2, r2, #32
 8000cfc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d00:	f1c2 0220 	rsb	r2, r2, #32
 8000d04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d08:	fa21 f202 	lsr.w	r2, r1, r2
 8000d0c:	eb43 0002 	adc.w	r0, r3, r2
 8000d10:	bf08      	it	eq
 8000d12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_fmul>:
 8000d18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d20:	bf1e      	ittt	ne
 8000d22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d26:	ea92 0f0c 	teqne	r2, ip
 8000d2a:	ea93 0f0c 	teqne	r3, ip
 8000d2e:	d06f      	beq.n	8000e10 <__aeabi_fmul+0xf8>
 8000d30:	441a      	add	r2, r3
 8000d32:	ea80 0c01 	eor.w	ip, r0, r1
 8000d36:	0240      	lsls	r0, r0, #9
 8000d38:	bf18      	it	ne
 8000d3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d3e:	d01e      	beq.n	8000d7e <__aeabi_fmul+0x66>
 8000d40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d58:	bf3e      	ittt	cc
 8000d5a:	0049      	lslcc	r1, r1, #1
 8000d5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d60:	005b      	lslcc	r3, r3, #1
 8000d62:	ea40 0001 	orr.w	r0, r0, r1
 8000d66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d6a:	2afd      	cmp	r2, #253	; 0xfd
 8000d6c:	d81d      	bhi.n	8000daa <__aeabi_fmul+0x92>
 8000d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	4770      	bx	lr
 8000d7e:	f090 0f00 	teq	r0, #0
 8000d82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d86:	bf08      	it	eq
 8000d88:	0249      	lsleq	r1, r1, #9
 8000d8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d92:	3a7f      	subs	r2, #127	; 0x7f
 8000d94:	bfc2      	ittt	gt
 8000d96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d9e:	4770      	bxgt	lr
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	3a01      	subs	r2, #1
 8000daa:	dc5d      	bgt.n	8000e68 <__aeabi_fmul+0x150>
 8000dac:	f112 0f19 	cmn.w	r2, #25
 8000db0:	bfdc      	itt	le
 8000db2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000db6:	4770      	bxle	lr
 8000db8:	f1c2 0200 	rsb	r2, r2, #0
 8000dbc:	0041      	lsls	r1, r0, #1
 8000dbe:	fa21 f102 	lsr.w	r1, r1, r2
 8000dc2:	f1c2 0220 	rsb	r2, r2, #32
 8000dc6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dce:	f140 0000 	adc.w	r0, r0, #0
 8000dd2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dd6:	bf08      	it	eq
 8000dd8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ddc:	4770      	bx	lr
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0040      	lsleq	r0, r0, #1
 8000dea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dee:	3a01      	subeq	r2, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fmul+0xce>
 8000df2:	ea40 000c 	orr.w	r0, r0, ip
 8000df6:	f093 0f00 	teq	r3, #0
 8000dfa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfe:	bf02      	ittt	eq
 8000e00:	0049      	lsleq	r1, r1, #1
 8000e02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e06:	3b01      	subeq	r3, #1
 8000e08:	d0f9      	beq.n	8000dfe <__aeabi_fmul+0xe6>
 8000e0a:	ea41 010c 	orr.w	r1, r1, ip
 8000e0e:	e78f      	b.n	8000d30 <__aeabi_fmul+0x18>
 8000e10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e14:	ea92 0f0c 	teq	r2, ip
 8000e18:	bf18      	it	ne
 8000e1a:	ea93 0f0c 	teqne	r3, ip
 8000e1e:	d00a      	beq.n	8000e36 <__aeabi_fmul+0x11e>
 8000e20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e24:	bf18      	it	ne
 8000e26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	d1d8      	bne.n	8000dde <__aeabi_fmul+0xc6>
 8000e2c:	ea80 0001 	eor.w	r0, r0, r1
 8000e30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e34:	4770      	bx	lr
 8000e36:	f090 0f00 	teq	r0, #0
 8000e3a:	bf17      	itett	ne
 8000e3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e40:	4608      	moveq	r0, r1
 8000e42:	f091 0f00 	teqne	r1, #0
 8000e46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e4a:	d014      	beq.n	8000e76 <__aeabi_fmul+0x15e>
 8000e4c:	ea92 0f0c 	teq	r2, ip
 8000e50:	d101      	bne.n	8000e56 <__aeabi_fmul+0x13e>
 8000e52:	0242      	lsls	r2, r0, #9
 8000e54:	d10f      	bne.n	8000e76 <__aeabi_fmul+0x15e>
 8000e56:	ea93 0f0c 	teq	r3, ip
 8000e5a:	d103      	bne.n	8000e64 <__aeabi_fmul+0x14c>
 8000e5c:	024b      	lsls	r3, r1, #9
 8000e5e:	bf18      	it	ne
 8000e60:	4608      	movne	r0, r1
 8000e62:	d108      	bne.n	8000e76 <__aeabi_fmul+0x15e>
 8000e64:	ea80 0001 	eor.w	r0, r0, r1
 8000e68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e74:	4770      	bx	lr
 8000e76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e7e:	4770      	bx	lr

08000e80 <__aeabi_fdiv>:
 8000e80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e88:	bf1e      	ittt	ne
 8000e8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e8e:	ea92 0f0c 	teqne	r2, ip
 8000e92:	ea93 0f0c 	teqne	r3, ip
 8000e96:	d069      	beq.n	8000f6c <__aeabi_fdiv+0xec>
 8000e98:	eba2 0203 	sub.w	r2, r2, r3
 8000e9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000ea0:	0249      	lsls	r1, r1, #9
 8000ea2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ea6:	d037      	beq.n	8000f18 <__aeabi_fdiv+0x98>
 8000ea8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000eb0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000eb4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	bf38      	it	cc
 8000ebc:	005b      	lslcc	r3, r3, #1
 8000ebe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ec2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	bf24      	itt	cs
 8000eca:	1a5b      	subcs	r3, r3, r1
 8000ecc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ed0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ed4:	bf24      	itt	cs
 8000ed6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ede:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ee2:	bf24      	itt	cs
 8000ee4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ee8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ef6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	bf18      	it	ne
 8000efe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f02:	d1e0      	bne.n	8000ec6 <__aeabi_fdiv+0x46>
 8000f04:	2afd      	cmp	r2, #253	; 0xfd
 8000f06:	f63f af50 	bhi.w	8000daa <__aeabi_fmul+0x92>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f10:	bf08      	it	eq
 8000f12:	f020 0001 	biceq.w	r0, r0, #1
 8000f16:	4770      	bx	lr
 8000f18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f20:	327f      	adds	r2, #127	; 0x7f
 8000f22:	bfc2      	ittt	gt
 8000f24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f2c:	4770      	bxgt	lr
 8000f2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	3a01      	subs	r2, #1
 8000f38:	e737      	b.n	8000daa <__aeabi_fmul+0x92>
 8000f3a:	f092 0f00 	teq	r2, #0
 8000f3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0040      	lsleq	r0, r0, #1
 8000f46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f4a:	3a01      	subeq	r2, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fdiv+0xc2>
 8000f4e:	ea40 000c 	orr.w	r0, r0, ip
 8000f52:	f093 0f00 	teq	r3, #0
 8000f56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f5a:	bf02      	ittt	eq
 8000f5c:	0049      	lsleq	r1, r1, #1
 8000f5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f62:	3b01      	subeq	r3, #1
 8000f64:	d0f9      	beq.n	8000f5a <__aeabi_fdiv+0xda>
 8000f66:	ea41 010c 	orr.w	r1, r1, ip
 8000f6a:	e795      	b.n	8000e98 <__aeabi_fdiv+0x18>
 8000f6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f70:	ea92 0f0c 	teq	r2, ip
 8000f74:	d108      	bne.n	8000f88 <__aeabi_fdiv+0x108>
 8000f76:	0242      	lsls	r2, r0, #9
 8000f78:	f47f af7d 	bne.w	8000e76 <__aeabi_fmul+0x15e>
 8000f7c:	ea93 0f0c 	teq	r3, ip
 8000f80:	f47f af70 	bne.w	8000e64 <__aeabi_fmul+0x14c>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e776      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	d104      	bne.n	8000f98 <__aeabi_fdiv+0x118>
 8000f8e:	024b      	lsls	r3, r1, #9
 8000f90:	f43f af4c 	beq.w	8000e2c <__aeabi_fmul+0x114>
 8000f94:	4608      	mov	r0, r1
 8000f96:	e76e      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000f98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f9c:	bf18      	it	ne
 8000f9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fa2:	d1ca      	bne.n	8000f3a <__aeabi_fdiv+0xba>
 8000fa4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fa8:	f47f af5c 	bne.w	8000e64 <__aeabi_fmul+0x14c>
 8000fac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fb0:	f47f af3c 	bne.w	8000e2c <__aeabi_fmul+0x114>
 8000fb4:	e75f      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_f2uiz>:
 8000fb8:	0042      	lsls	r2, r0, #1
 8000fba:	d20e      	bcs.n	8000fda <__aeabi_f2uiz+0x22>
 8000fbc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fc0:	d30b      	bcc.n	8000fda <__aeabi_f2uiz+0x22>
 8000fc2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fc6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fca:	d409      	bmi.n	8000fe0 <__aeabi_f2uiz+0x28>
 8000fcc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fd4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fd8:	4770      	bx	lr
 8000fda:	f04f 0000 	mov.w	r0, #0
 8000fde:	4770      	bx	lr
 8000fe0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fe4:	d101      	bne.n	8000fea <__aeabi_f2uiz+0x32>
 8000fe6:	0242      	lsls	r2, r0, #9
 8000fe8:	d102      	bne.n	8000ff0 <__aeabi_f2uiz+0x38>
 8000fea:	f04f 30ff 	mov.w	r0, #4294967295
 8000fee:	4770      	bx	lr
 8000ff0:	f04f 0000 	mov.w	r0, #0
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001002:	4b75      	ldr	r3, [pc, #468]	; (80011d8 <xTaskIncrementTick+0x1e0>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	f040 80dc 	bne.w	80011c4 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800100c:	4b73      	ldr	r3, [pc, #460]	; (80011dc <xTaskIncrementTick+0x1e4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	3301      	adds	r3, #1
 8001012:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001014:	4a71      	ldr	r2, [pc, #452]	; (80011dc <xTaskIncrementTick+0x1e4>)
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d110      	bne.n	8001042 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001020:	4b6f      	ldr	r3, [pc, #444]	; (80011e0 <xTaskIncrementTick+0x1e8>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	4b6f      	ldr	r3, [pc, #444]	; (80011e4 <xTaskIncrementTick+0x1ec>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a6d      	ldr	r2, [pc, #436]	; (80011e0 <xTaskIncrementTick+0x1e8>)
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	4a6d      	ldr	r2, [pc, #436]	; (80011e4 <xTaskIncrementTick+0x1ec>)
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	4b6c      	ldr	r3, [pc, #432]	; (80011e8 <xTaskIncrementTick+0x1f0>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	3301      	adds	r3, #1
 800103a:	4a6b      	ldr	r2, [pc, #428]	; (80011e8 <xTaskIncrementTick+0x1f0>)
 800103c:	6013      	str	r3, [r2, #0]
 800103e:	f000 f927 	bl	8001290 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001042:	4b6a      	ldr	r3, [pc, #424]	; (80011ec <xTaskIncrementTick+0x1f4>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	429a      	cmp	r2, r3
 800104a:	f0c0 80a6 	bcc.w	800119a <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800104e:	4b64      	ldr	r3, [pc, #400]	; (80011e0 <xTaskIncrementTick+0x1e8>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d104      	bne.n	8001062 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001058:	4b64      	ldr	r3, [pc, #400]	; (80011ec <xTaskIncrementTick+0x1f4>)
 800105a:	f04f 32ff 	mov.w	r2, #4294967295
 800105e:	601a      	str	r2, [r3, #0]
                    break;
 8001060:	e09b      	b.n	800119a <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001062:	4b5f      	ldr	r3, [pc, #380]	; (80011e0 <xTaskIncrementTick+0x1e8>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	429a      	cmp	r2, r3
 8001078:	d203      	bcs.n	8001082 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800107a:	4a5c      	ldr	r2, [pc, #368]	; (80011ec <xTaskIncrementTick+0x1f4>)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001080:	e08b      	b.n	800119a <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	68d2      	ldr	r2, [r2, #12]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	6892      	ldr	r2, [r2, #8]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	685a      	ldr	r2, [r3, #4]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	3304      	adds	r3, #4
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d103      	bne.n	80010b0 <xTaskIncrementTick+0xb8>
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	68da      	ldr	r2, [r3, #12]
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	2200      	movs	r2, #0
 80010b4:	615a      	str	r2, [r3, #20]
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	1e5a      	subs	r2, r3, #1
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d01e      	beq.n	8001106 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	6a12      	ldr	r2, [r2, #32]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	6a1b      	ldr	r3, [r3, #32]
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	69d2      	ldr	r2, [r2, #28]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	3318      	adds	r3, #24
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d103      	bne.n	80010f6 <xTaskIncrementTick+0xfe>
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	6a1a      	ldr	r2, [r3, #32]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	2200      	movs	r2, #0
 80010fa:	629a      	str	r2, [r3, #40]	; 0x28
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	1e5a      	subs	r2, r3, #1
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110a:	2201      	movs	r2, #1
 800110c:	409a      	lsls	r2, r3
 800110e:	4b38      	ldr	r3, [pc, #224]	; (80011f0 <xTaskIncrementTick+0x1f8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4313      	orrs	r3, r2
 8001114:	4a36      	ldr	r2, [pc, #216]	; (80011f0 <xTaskIncrementTick+0x1f8>)
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800111c:	4935      	ldr	r1, [pc, #212]	; (80011f4 <xTaskIncrementTick+0x1fc>)
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	440b      	add	r3, r1
 8001128:	3304      	adds	r3, #4
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	3204      	adds	r2, #4
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1d1a      	adds	r2, r3, #4
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001152:	4613      	mov	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4413      	add	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4a26      	ldr	r2, [pc, #152]	; (80011f4 <xTaskIncrementTick+0x1fc>)
 800115c:	441a      	add	r2, r3
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	615a      	str	r2, [r3, #20]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001166:	4923      	ldr	r1, [pc, #140]	; (80011f4 <xTaskIncrementTick+0x1fc>)
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	440b      	add	r3, r1
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	1c59      	adds	r1, r3, #1
 8001176:	481f      	ldr	r0, [pc, #124]	; (80011f4 <xTaskIncrementTick+0x1fc>)
 8001178:	4613      	mov	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4403      	add	r3, r0
 8001182:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <xTaskIncrementTick+0x200>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118e:	429a      	cmp	r2, r3
 8001190:	f4ff af5d 	bcc.w	800104e <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 8001194:	2301      	movs	r3, #1
 8001196:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001198:	e759      	b.n	800104e <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <xTaskIncrementTick+0x200>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011a0:	4914      	ldr	r1, [pc, #80]	; (80011f4 <xTaskIncrementTick+0x1fc>)
 80011a2:	4613      	mov	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	440b      	add	r3, r1
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d901      	bls.n	80011b6 <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 80011b2:	2301      	movs	r3, #1
 80011b4:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <xTaskIncrementTick+0x204>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d007      	beq.n	80011ce <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 80011be:	2301      	movs	r3, #1
 80011c0:	61fb      	str	r3, [r7, #28]
 80011c2:	e004      	b.n	80011ce <xTaskIncrementTick+0x1d6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <xTaskIncrementTick+0x208>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	3301      	adds	r3, #1
 80011ca:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <xTaskIncrementTick+0x208>)
 80011cc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80011ce:	69fb      	ldr	r3, [r7, #28]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3720      	adds	r7, #32
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200000ac 	.word	0x200000ac
 80011dc:	20000094 	.word	0x20000094
 80011e0:	2000008c 	.word	0x2000008c
 80011e4:	20000090 	.word	0x20000090
 80011e8:	200000a4 	.word	0x200000a4
 80011ec:	200000a8 	.word	0x200000a8
 80011f0:	20000098 	.word	0x20000098
 80011f4:	20000028 	.word	0x20000028
 80011f8:	20000024 	.word	0x20000024
 80011fc:	200000a0 	.word	0x200000a0
 8001200:	2000009c 	.word	0x2000009c

08001204 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800120a:	4b1c      	ldr	r3, [pc, #112]	; (800127c <vTaskSwitchContext+0x78>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001212:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <vTaskSwitchContext+0x7c>)
 8001214:	2201      	movs	r2, #1
 8001216:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001218:	e02a      	b.n	8001270 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <vTaskSwitchContext+0x7c>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001220:	4b18      	ldr	r3, [pc, #96]	; (8001284 <vTaskSwitchContext+0x80>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	607b      	str	r3, [r7, #4]
/* Generic helper function. */
        __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
        {
            uint8_t ucReturn;

            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	fab3 f383 	clz	r3, r3
 800122c:	70fb      	strb	r3, [r7, #3]

            return ucReturn;
 800122e:	78fb      	ldrb	r3, [r7, #3]
 8001230:	f1c3 031f 	rsb	r3, r3, #31
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	4613      	mov	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4a11      	ldr	r2, [pc, #68]	; (8001288 <vTaskSwitchContext+0x84>)
 8001242:	4413      	add	r3, r2
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	3308      	adds	r3, #8
 8001258:	429a      	cmp	r2, r3
 800125a:	d104      	bne.n	8001266 <vTaskSwitchContext+0x62>
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	4a07      	ldr	r2, [pc, #28]	; (800128c <vTaskSwitchContext+0x88>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	200000ac 	.word	0x200000ac
 8001280:	200000a0 	.word	0x200000a0
 8001284:	20000098 	.word	0x20000098
 8001288:	20000028 	.word	0x20000028
 800128c:	20000024 	.word	0x20000024

08001290 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <prvResetNextTaskUnblockTime+0x2c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d104      	bne.n	80012a8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <prvResetNextTaskUnblockTime+0x30>)
 80012a0:	f04f 32ff 	mov.w	r2, #4294967295
 80012a4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80012a6:	e005      	b.n	80012b4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <prvResetNextTaskUnblockTime+0x2c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a03      	ldr	r2, [pc, #12]	; (80012c0 <prvResetNextTaskUnblockTime+0x30>)
 80012b2:	6013      	str	r3, [r2, #0]
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	2000008c 	.word	0x2000008c
 80012c0:	200000a8 	.word	0x200000a8
	...

080012d0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <pxCurrentTCBConst2>)
 80012d2:	6819      	ldr	r1, [r3, #0]
 80012d4:	6808      	ldr	r0, [r1, #0]
 80012d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80012da:	f380 8809 	msr	PSP, r0
 80012de:	f3bf 8f6f 	isb	sy
 80012e2:	f04f 0000 	mov.w	r0, #0
 80012e6:	f380 8811 	msr	BASEPRI, r0
 80012ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80012ee:	4770      	bx	lr

080012f0 <pxCurrentTCBConst2>:
 80012f0:	20000024 	.word	0x20000024
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
	...

08001300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001300:	f3ef 8009 	mrs	r0, PSP
 8001304:	f3bf 8f6f 	isb	sy
 8001308:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <pxCurrentTCBConst>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001310:	6010      	str	r0, [r2, #0]
 8001312:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001316:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800131a:	f380 8811 	msr	BASEPRI, r0
 800131e:	f7ff ff71 	bl	8001204 <vTaskSwitchContext>
 8001322:	f04f 0000 	mov.w	r0, #0
 8001326:	f380 8811 	msr	BASEPRI, r0
 800132a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800132e:	6819      	ldr	r1, [r3, #0]
 8001330:	6808      	ldr	r0, [r1, #0]
 8001332:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001336:	f380 8809 	msr	PSP, r0
 800133a:	f3bf 8f6f 	isb	sy
 800133e:	4770      	bx	lr

08001340 <pxCurrentTCBConst>:
 8001340:	20000024 	.word	0x20000024
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop

08001348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800134e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001352:	f383 8811 	msr	BASEPRI, r3
 8001356:	f3bf 8f6f 	isb	sy
 800135a:	f3bf 8f4f 	dsb	sy
 800135e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001360:	f7ff fe4a 	bl	8000ff8 <xTaskIncrementTick>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <SysTick_Handler+0x3c>)
 800136c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	2300      	movs	r3, #0
 8001374:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	e000ed04 	.word	0xe000ed04

08001388 <HAL_MOTOR_Init>:

//==========================================================================


void HAL_MOTOR_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	MCAL_GPIO_INIT(GPIOB,driver_pin1 ,Output_PP_Mode_Speed10MHZ);
 800138c:	2201      	movs	r2, #1
 800138e:	2105      	movs	r1, #5
 8001390:	4804      	ldr	r0, [pc, #16]	; (80013a4 <HAL_MOTOR_Init+0x1c>)
 8001392:	f000 fafb 	bl	800198c <MCAL_GPIO_INIT>
	MCAL_GPIO_INIT(GPIOB,driver_pin2 ,Output_PP_Mode_Speed10MHZ);
 8001396:	2201      	movs	r2, #1
 8001398:	2106      	movs	r1, #6
 800139a:	4802      	ldr	r0, [pc, #8]	; (80013a4 <HAL_MOTOR_Init+0x1c>)
 800139c:	f000 faf6 	bl	800198c <MCAL_GPIO_INIT>
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40010c00 	.word	0x40010c00

080013a8 <HAL_MOTOR_Motion>:


void HAL_MOTOR_Motion(uint8_t x)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
	switch(x)
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d00f      	beq.n	80013d8 <HAL_MOTOR_Motion+0x30>
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d018      	beq.n	80013ee <HAL_MOTOR_Motion+0x46>
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d000      	beq.n	80013c2 <HAL_MOTOR_Motion+0x1a>
		MCAL_GPIO_WRITEPIN(GPIOB, driver_pin1, RESET);
	}
	break;
	}

}
 80013c0:	e020      	b.n	8001404 <HAL_MOTOR_Motion+0x5c>
		MCAL_GPIO_WRITEPIN(GPIOB, driver_pin1, SET);
 80013c2:	2201      	movs	r2, #1
 80013c4:	2105      	movs	r1, #5
 80013c6:	4811      	ldr	r0, [pc, #68]	; (800140c <HAL_MOTOR_Motion+0x64>)
 80013c8:	f000 fbbc 	bl	8001b44 <MCAL_GPIO_WRITEPIN>
		MCAL_GPIO_WRITEPIN(GPIOB, driver_pin2, RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2106      	movs	r1, #6
 80013d0:	480e      	ldr	r0, [pc, #56]	; (800140c <HAL_MOTOR_Motion+0x64>)
 80013d2:	f000 fbb7 	bl	8001b44 <MCAL_GPIO_WRITEPIN>
	break;
 80013d6:	e015      	b.n	8001404 <HAL_MOTOR_Motion+0x5c>
		MCAL_GPIO_WRITEPIN(GPIOB, driver_pin1, RESET);
 80013d8:	2200      	movs	r2, #0
 80013da:	2105      	movs	r1, #5
 80013dc:	480b      	ldr	r0, [pc, #44]	; (800140c <HAL_MOTOR_Motion+0x64>)
 80013de:	f000 fbb1 	bl	8001b44 <MCAL_GPIO_WRITEPIN>
		MCAL_GPIO_WRITEPIN(GPIOB, driver_pin2, SET);
 80013e2:	2201      	movs	r2, #1
 80013e4:	2106      	movs	r1, #6
 80013e6:	4809      	ldr	r0, [pc, #36]	; (800140c <HAL_MOTOR_Motion+0x64>)
 80013e8:	f000 fbac 	bl	8001b44 <MCAL_GPIO_WRITEPIN>
	break ;
 80013ec:	e00a      	b.n	8001404 <HAL_MOTOR_Motion+0x5c>
		MCAL_GPIO_WRITEPIN(GPIOB, driver_pin2, RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2106      	movs	r1, #6
 80013f2:	4806      	ldr	r0, [pc, #24]	; (800140c <HAL_MOTOR_Motion+0x64>)
 80013f4:	f000 fba6 	bl	8001b44 <MCAL_GPIO_WRITEPIN>
		MCAL_GPIO_WRITEPIN(GPIOB, driver_pin1, RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2105      	movs	r1, #5
 80013fc:	4803      	ldr	r0, [pc, #12]	; (800140c <HAL_MOTOR_Motion+0x64>)
 80013fe:	f000 fba1 	bl	8001b44 <MCAL_GPIO_WRITEPIN>
	break;
 8001402:	bf00      	nop
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40010c00 	.word	0x40010c00

08001410 <HAL_Servo_Set_Angle>:

//==========================================================================


void HAL_Servo_Set_Angle(double angle,uint32_t clock)
{
 8001410:	b590      	push	{r4, r7, lr}
 8001412:	b089      	sub	sp, #36	; 0x24
 8001414:	af02      	add	r7, sp, #8
 8001416:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]

	double duty_cycle = ( (0.01483333) *angle);
 800141c:	a320      	add	r3, pc, #128	; (adr r3, 80014a0 <HAL_Servo_Set_Angle+0x90>)
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001426:	f7ff f85f 	bl	80004e8 <__aeabi_dmul>
 800142a:	4603      	mov	r3, r0
 800142c:	460c      	mov	r4, r1
 800142e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	duty_cycle=duty_cycle+0.8;
 8001432:	a31d      	add	r3, pc, #116	; (adr r3, 80014a8 <HAL_Servo_Set_Angle+0x98>)
 8001434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001438:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800143c:	f7fe fe9e 	bl	800017c <__adddf3>
 8001440:	4603      	mov	r3, r0
 8001442:	460c      	mov	r4, r1
 8001444:	e9c7 3404 	strd	r3, r4, [r7, #16]
	if(clock == 36000000)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a19      	ldr	r2, [pc, #100]	; (80014b0 <HAL_Servo_Set_Angle+0xa0>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d10a      	bne.n	8001466 <HAL_Servo_Set_Angle+0x56>
	{
		MCAL_PWM_Init(PWM_MODE1, CH1, duty_cycle, 50,126);
 8001450:	237e      	movs	r3, #126	; 0x7e
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	2332      	movs	r3, #50	; 0x32
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800145c:	2100      	movs	r1, #0
 800145e:	2000      	movs	r0, #0
 8001460:	f001 fa18 	bl	8002894 <MCAL_PWM_Init>
	{
		MCAL_PWM_Init(PWM_MODE1, CH1, duty_cycle, 50,28);
	}


}
 8001464:	e018      	b.n	8001498 <HAL_Servo_Set_Angle+0x88>
	else if((clock == 32000000))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <HAL_Servo_Set_Angle+0xa4>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d10a      	bne.n	8001484 <HAL_Servo_Set_Angle+0x74>
		MCAL_PWM_Init(PWM_MODE1, CH1, duty_cycle, 50,112);
 800146e:	2370      	movs	r3, #112	; 0x70
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	2332      	movs	r3, #50	; 0x32
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800147a:	2100      	movs	r1, #0
 800147c:	2000      	movs	r0, #0
 800147e:	f001 fa09 	bl	8002894 <MCAL_PWM_Init>
}
 8001482:	e009      	b.n	8001498 <HAL_Servo_Set_Angle+0x88>
		MCAL_PWM_Init(PWM_MODE1, CH1, duty_cycle, 50,28);
 8001484:	231c      	movs	r3, #28
 8001486:	9301      	str	r3, [sp, #4]
 8001488:	2332      	movs	r3, #50	; 0x32
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001490:	2100      	movs	r1, #0
 8001492:	2000      	movs	r0, #0
 8001494:	f001 f9fe 	bl	8002894 <MCAL_PWM_Init>
}
 8001498:	bf00      	nop
 800149a:	371c      	adds	r7, #28
 800149c:	46bd      	mov	sp, r7
 800149e:	bd90      	pop	{r4, r7, pc}
 80014a0:	d9ed1bcd 	.word	0xd9ed1bcd
 80014a4:	3f8e60ef 	.word	0x3f8e60ef
 80014a8:	9999999a 	.word	0x9999999a
 80014ac:	3fe99999 	.word	0x3fe99999
 80014b0:	02255100 	.word	0x02255100
 80014b4:	01e84800 	.word	0x01e84800

080014b8 <echo1>:

double distance1, distance2, distance3, distance4;

uint8_t flag_ehco1 = 0 ,flag_ehco2 = 0 ,flag_ehco3 = 0 ,flag_ehco4 = 0;

void echo1(){
 80014b8:	b598      	push	{r3, r4, r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	if(flag_ehco1==0){
 80014bc:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <echo1+0x80>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d107      	bne.n	80014d4 <echo1+0x1c>
		TIME_CALCULATION(clk, TIMER_START);
 80014c4:	2101      	movs	r1, #1
 80014c6:	481d      	ldr	r0, [pc, #116]	; (800153c <echo1+0x84>)
 80014c8:	f001 fc38 	bl	8002d3c <TIME_CALCULATION>
		flag_ehco1=1;
 80014cc:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <echo1+0x80>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]
		time1=TIME_CALCULATION(clk, TIMER_STOP);
		distance1 = ((time1*171.5)/10000);
		flag_ehco1=0;
	}

}
 80014d2:	e025      	b.n	8001520 <echo1+0x68>
		time1=TIME_CALCULATION(clk, TIMER_STOP);
 80014d4:	2100      	movs	r1, #0
 80014d6:	4819      	ldr	r0, [pc, #100]	; (800153c <echo1+0x84>)
 80014d8:	f001 fc30 	bl	8002d3c <TIME_CALCULATION>
 80014dc:	4603      	mov	r3, r0
 80014de:	4618      	mov	r0, r3
 80014e0:	f7fe ff88 	bl	80003f4 <__aeabi_ui2d>
 80014e4:	4603      	mov	r3, r0
 80014e6:	460c      	mov	r4, r1
 80014e8:	4a15      	ldr	r2, [pc, #84]	; (8001540 <echo1+0x88>)
 80014ea:	e9c2 3400 	strd	r3, r4, [r2]
		distance1 = ((time1*171.5)/10000);
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <echo1+0x88>)
 80014f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014f4:	a30c      	add	r3, pc, #48	; (adr r3, 8001528 <echo1+0x70>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	f7fe fff5 	bl	80004e8 <__aeabi_dmul>
 80014fe:	4603      	mov	r3, r0
 8001500:	460c      	mov	r4, r1
 8001502:	4618      	mov	r0, r3
 8001504:	4621      	mov	r1, r4
 8001506:	a30a      	add	r3, pc, #40	; (adr r3, 8001530 <echo1+0x78>)
 8001508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150c:	f7ff f916 	bl	800073c <__aeabi_ddiv>
 8001510:	4603      	mov	r3, r0
 8001512:	460c      	mov	r4, r1
 8001514:	4a0b      	ldr	r2, [pc, #44]	; (8001544 <echo1+0x8c>)
 8001516:	e9c2 3400 	strd	r3, r4, [r2]
		flag_ehco1=0;
 800151a:	4b07      	ldr	r3, [pc, #28]	; (8001538 <echo1+0x80>)
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
}
 8001520:	bf00      	nop
 8001522:	bd98      	pop	{r3, r4, r7, pc}
 8001524:	f3af 8000 	nop.w
 8001528:	00000000 	.word	0x00000000
 800152c:	40657000 	.word	0x40657000
 8001530:	00000000 	.word	0x00000000
 8001534:	40c38800 	.word	0x40c38800
 8001538:	200000b0 	.word	0x200000b0
 800153c:	02255100 	.word	0x02255100
 8001540:	200000e8 	.word	0x200000e8
 8001544:	200000e0 	.word	0x200000e0

08001548 <echo2>:

void echo2(){
 8001548:	b598      	push	{r3, r4, r7, lr}
 800154a:	af00      	add	r7, sp, #0
	if(flag_ehco2==0){
 800154c:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <echo2+0x80>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d107      	bne.n	8001564 <echo2+0x1c>
		TIME_CALCULATION(clk, TIMER_START);
 8001554:	2101      	movs	r1, #1
 8001556:	481d      	ldr	r0, [pc, #116]	; (80015cc <echo2+0x84>)
 8001558:	f001 fbf0 	bl	8002d3c <TIME_CALCULATION>
		flag_ehco2=1;
 800155c:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <echo2+0x80>)
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
		time2=TIME_CALCULATION(clk, TIMER_STOP);
		distance2 = ((time2*171.5)/10000);
		flag_ehco2=0;
	}

}
 8001562:	e025      	b.n	80015b0 <echo2+0x68>
		time2=TIME_CALCULATION(clk, TIMER_STOP);
 8001564:	2100      	movs	r1, #0
 8001566:	4819      	ldr	r0, [pc, #100]	; (80015cc <echo2+0x84>)
 8001568:	f001 fbe8 	bl	8002d3c <TIME_CALCULATION>
 800156c:	4603      	mov	r3, r0
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ff40 	bl	80003f4 <__aeabi_ui2d>
 8001574:	4603      	mov	r3, r0
 8001576:	460c      	mov	r4, r1
 8001578:	4a15      	ldr	r2, [pc, #84]	; (80015d0 <echo2+0x88>)
 800157a:	e9c2 3400 	strd	r3, r4, [r2]
		distance2 = ((time2*171.5)/10000);
 800157e:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <echo2+0x88>)
 8001580:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001584:	a30c      	add	r3, pc, #48	; (adr r3, 80015b8 <echo2+0x70>)
 8001586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158a:	f7fe ffad 	bl	80004e8 <__aeabi_dmul>
 800158e:	4603      	mov	r3, r0
 8001590:	460c      	mov	r4, r1
 8001592:	4618      	mov	r0, r3
 8001594:	4621      	mov	r1, r4
 8001596:	a30a      	add	r3, pc, #40	; (adr r3, 80015c0 <echo2+0x78>)
 8001598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159c:	f7ff f8ce 	bl	800073c <__aeabi_ddiv>
 80015a0:	4603      	mov	r3, r0
 80015a2:	460c      	mov	r4, r1
 80015a4:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <echo2+0x8c>)
 80015a6:	e9c2 3400 	strd	r3, r4, [r2]
		flag_ehco2=0;
 80015aa:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <echo2+0x80>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
}
 80015b0:	bf00      	nop
 80015b2:	bd98      	pop	{r3, r4, r7, pc}
 80015b4:	f3af 8000 	nop.w
 80015b8:	00000000 	.word	0x00000000
 80015bc:	40657000 	.word	0x40657000
 80015c0:	00000000 	.word	0x00000000
 80015c4:	40c38800 	.word	0x40c38800
 80015c8:	200000b1 	.word	0x200000b1
 80015cc:	02255100 	.word	0x02255100
 80015d0:	20000108 	.word	0x20000108
 80015d4:	200000f0 	.word	0x200000f0

080015d8 <echo3>:

void echo3(){
 80015d8:	b598      	push	{r3, r4, r7, lr}
 80015da:	af00      	add	r7, sp, #0
	if(flag_ehco3==0){
 80015dc:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <echo3+0x80>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d107      	bne.n	80015f4 <echo3+0x1c>
		TIME_CALCULATION(clk, TIMER_START);
 80015e4:	2101      	movs	r1, #1
 80015e6:	481d      	ldr	r0, [pc, #116]	; (800165c <echo3+0x84>)
 80015e8:	f001 fba8 	bl	8002d3c <TIME_CALCULATION>
		flag_ehco3=1;
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <echo3+0x80>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	701a      	strb	r2, [r3, #0]
		time3=TIME_CALCULATION(clk, TIMER_STOP);
		distance3 = ((time3*171.5)/10000);
		flag_ehco3=0;
	}

}
 80015f2:	e025      	b.n	8001640 <echo3+0x68>
		time3=TIME_CALCULATION(clk, TIMER_STOP);
 80015f4:	2100      	movs	r1, #0
 80015f6:	4819      	ldr	r0, [pc, #100]	; (800165c <echo3+0x84>)
 80015f8:	f001 fba0 	bl	8002d3c <TIME_CALCULATION>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe fef8 	bl	80003f4 <__aeabi_ui2d>
 8001604:	4603      	mov	r3, r0
 8001606:	460c      	mov	r4, r1
 8001608:	4a15      	ldr	r2, [pc, #84]	; (8001660 <echo3+0x88>)
 800160a:	e9c2 3400 	strd	r3, r4, [r2]
		distance3 = ((time3*171.5)/10000);
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <echo3+0x88>)
 8001610:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001614:	a30c      	add	r3, pc, #48	; (adr r3, 8001648 <echo3+0x70>)
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	f7fe ff65 	bl	80004e8 <__aeabi_dmul>
 800161e:	4603      	mov	r3, r0
 8001620:	460c      	mov	r4, r1
 8001622:	4618      	mov	r0, r3
 8001624:	4621      	mov	r1, r4
 8001626:	a30a      	add	r3, pc, #40	; (adr r3, 8001650 <echo3+0x78>)
 8001628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162c:	f7ff f886 	bl	800073c <__aeabi_ddiv>
 8001630:	4603      	mov	r3, r0
 8001632:	460c      	mov	r4, r1
 8001634:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <echo3+0x8c>)
 8001636:	e9c2 3400 	strd	r3, r4, [r2]
		flag_ehco3=0;
 800163a:	4b07      	ldr	r3, [pc, #28]	; (8001658 <echo3+0x80>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
}
 8001640:	bf00      	nop
 8001642:	bd98      	pop	{r3, r4, r7, pc}
 8001644:	f3af 8000 	nop.w
 8001648:	00000000 	.word	0x00000000
 800164c:	40657000 	.word	0x40657000
 8001650:	00000000 	.word	0x00000000
 8001654:	40c38800 	.word	0x40c38800
 8001658:	200000b2 	.word	0x200000b2
 800165c:	02255100 	.word	0x02255100
 8001660:	20000100 	.word	0x20000100
 8001664:	200000d0 	.word	0x200000d0

08001668 <echo4>:

void echo4(){
 8001668:	b598      	push	{r3, r4, r7, lr}
 800166a:	af00      	add	r7, sp, #0
	if(flag_ehco4==0){
 800166c:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <echo4+0x80>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d107      	bne.n	8001684 <echo4+0x1c>
		TIME_CALCULATION(clk, TIMER_START);
 8001674:	2101      	movs	r1, #1
 8001676:	481d      	ldr	r0, [pc, #116]	; (80016ec <echo4+0x84>)
 8001678:	f001 fb60 	bl	8002d3c <TIME_CALCULATION>
		flag_ehco4=1;
 800167c:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <echo4+0x80>)
 800167e:	2201      	movs	r2, #1
 8001680:	701a      	strb	r2, [r3, #0]
		time4=TIME_CALCULATION(clk, TIMER_STOP);
		distance4 = ((time4*171.5)/10000);
		flag_ehco4=0;
	}

}
 8001682:	e025      	b.n	80016d0 <echo4+0x68>
		time4=TIME_CALCULATION(clk, TIMER_STOP);
 8001684:	2100      	movs	r1, #0
 8001686:	4819      	ldr	r0, [pc, #100]	; (80016ec <echo4+0x84>)
 8001688:	f001 fb58 	bl	8002d3c <TIME_CALCULATION>
 800168c:	4603      	mov	r3, r0
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe feb0 	bl	80003f4 <__aeabi_ui2d>
 8001694:	4603      	mov	r3, r0
 8001696:	460c      	mov	r4, r1
 8001698:	4a15      	ldr	r2, [pc, #84]	; (80016f0 <echo4+0x88>)
 800169a:	e9c2 3400 	strd	r3, r4, [r2]
		distance4 = ((time4*171.5)/10000);
 800169e:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <echo4+0x88>)
 80016a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016a4:	a30c      	add	r3, pc, #48	; (adr r3, 80016d8 <echo4+0x70>)
 80016a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016aa:	f7fe ff1d 	bl	80004e8 <__aeabi_dmul>
 80016ae:	4603      	mov	r3, r0
 80016b0:	460c      	mov	r4, r1
 80016b2:	4618      	mov	r0, r3
 80016b4:	4621      	mov	r1, r4
 80016b6:	a30a      	add	r3, pc, #40	; (adr r3, 80016e0 <echo4+0x78>)
 80016b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016bc:	f7ff f83e 	bl	800073c <__aeabi_ddiv>
 80016c0:	4603      	mov	r3, r0
 80016c2:	460c      	mov	r4, r1
 80016c4:	4a0b      	ldr	r2, [pc, #44]	; (80016f4 <echo4+0x8c>)
 80016c6:	e9c2 3400 	strd	r3, r4, [r2]
		flag_ehco4=0;
 80016ca:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <echo4+0x80>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
}
 80016d0:	bf00      	nop
 80016d2:	bd98      	pop	{r3, r4, r7, pc}
 80016d4:	f3af 8000 	nop.w
 80016d8:	00000000 	.word	0x00000000
 80016dc:	40657000 	.word	0x40657000
 80016e0:	00000000 	.word	0x00000000
 80016e4:	40c38800 	.word	0x40c38800
 80016e8:	200000b3 	.word	0x200000b3
 80016ec:	02255100 	.word	0x02255100
 80016f0:	200000f8 	.word	0x200000f8
 80016f4:	200000d8 	.word	0x200000d8

080016f8 <HAL_ULTRASONIC_INIT>:


void HAL_ULTRASONIC_INIT(ULT_SLEC_T num)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
	switch(num)
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	2b03      	cmp	r3, #3
 8001706:	d83b      	bhi.n	8001780 <HAL_ULTRASONIC_INIT+0x88>
 8001708:	a201      	add	r2, pc, #4	; (adr r2, 8001710 <HAL_ULTRASONIC_INIT+0x18>)
 800170a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800170e:	bf00      	nop
 8001710:	08001721 	.word	0x08001721
 8001714:	08001739 	.word	0x08001739
 8001718:	08001751 	.word	0x08001751
 800171c:	08001769 	.word	0x08001769
	{
	case ULT1 :
	{
		MCAL_GPIO_INIT(GPIOB, ULT1_TRIG_PIN_B9, Output_PP_Mode_Speed2MHZ);
 8001720:	2202      	movs	r2, #2
 8001722:	2109      	movs	r1, #9
 8001724:	4818      	ldr	r0, [pc, #96]	; (8001788 <HAL_ULTRASONIC_INIT+0x90>)
 8001726:	f000 f931 	bl	800198c <MCAL_GPIO_INIT>
		EXTI_Init(GPIOA,ULT1_ECHO_PIN_A0,EXTI_Trigger_RisingAndFalling,echo1);
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <HAL_ULTRASONIC_INIT+0x94>)
 800172c:	2202      	movs	r2, #2
 800172e:	2100      	movs	r1, #0
 8001730:	4817      	ldr	r0, [pc, #92]	; (8001790 <HAL_ULTRASONIC_INIT+0x98>)
 8001732:	f000 fa91 	bl	8001c58 <EXTI_Init>
	}
	break;
 8001736:	e023      	b.n	8001780 <HAL_ULTRASONIC_INIT+0x88>
	case ULT2 :
	{
		MCAL_GPIO_INIT(GPIOB, ULT2_TRIG_PIN_B10, Output_PP_Mode_Speed2MHZ);
 8001738:	2202      	movs	r2, #2
 800173a:	210a      	movs	r1, #10
 800173c:	4812      	ldr	r0, [pc, #72]	; (8001788 <HAL_ULTRASONIC_INIT+0x90>)
 800173e:	f000 f925 	bl	800198c <MCAL_GPIO_INIT>
		EXTI_Init(GPIOA,ULT2_ECHO_PIN_A2,EXTI_Trigger_RisingAndFalling,echo2);
 8001742:	4b14      	ldr	r3, [pc, #80]	; (8001794 <HAL_ULTRASONIC_INIT+0x9c>)
 8001744:	2202      	movs	r2, #2
 8001746:	2102      	movs	r1, #2
 8001748:	4811      	ldr	r0, [pc, #68]	; (8001790 <HAL_ULTRASONIC_INIT+0x98>)
 800174a:	f000 fa85 	bl	8001c58 <EXTI_Init>
	}
	break;
 800174e:	e017      	b.n	8001780 <HAL_ULTRASONIC_INIT+0x88>
	case ULT3 :
	{
		MCAL_GPIO_INIT(GPIOB, ULT3_TRIG_PIN_B11, Output_PP_Mode_Speed2MHZ);
 8001750:	2202      	movs	r2, #2
 8001752:	210b      	movs	r1, #11
 8001754:	480c      	ldr	r0, [pc, #48]	; (8001788 <HAL_ULTRASONIC_INIT+0x90>)
 8001756:	f000 f919 	bl	800198c <MCAL_GPIO_INIT>
		EXTI_Init(GPIOA,ULT3_ECHO_PIN_A3,EXTI_Trigger_RisingAndFalling,echo3);
 800175a:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <HAL_ULTRASONIC_INIT+0xa0>)
 800175c:	2202      	movs	r2, #2
 800175e:	2103      	movs	r1, #3
 8001760:	480b      	ldr	r0, [pc, #44]	; (8001790 <HAL_ULTRASONIC_INIT+0x98>)
 8001762:	f000 fa79 	bl	8001c58 <EXTI_Init>
	}
	break;
 8001766:	e00b      	b.n	8001780 <HAL_ULTRASONIC_INIT+0x88>
	case ULT4 :
	{
		MCAL_GPIO_INIT(GPIOB, ULT4_TRIG_PIN_B12, Output_PP_Mode_Speed2MHZ);
 8001768:	2202      	movs	r2, #2
 800176a:	210c      	movs	r1, #12
 800176c:	4806      	ldr	r0, [pc, #24]	; (8001788 <HAL_ULTRASONIC_INIT+0x90>)
 800176e:	f000 f90d 	bl	800198c <MCAL_GPIO_INIT>
		EXTI_Init(GPIOA,ULT4_ECHO_PIN_A4,EXTI_Trigger_RisingAndFalling,echo4);
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_ULTRASONIC_INIT+0xa4>)
 8001774:	2202      	movs	r2, #2
 8001776:	2104      	movs	r1, #4
 8001778:	4805      	ldr	r0, [pc, #20]	; (8001790 <HAL_ULTRASONIC_INIT+0x98>)
 800177a:	f000 fa6d 	bl	8001c58 <EXTI_Init>


	}
	break;
 800177e:	bf00      	nop
	}
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40010c00 	.word	0x40010c00
 800178c:	080014b9 	.word	0x080014b9
 8001790:	40010800 	.word	0x40010800
 8001794:	08001549 	.word	0x08001549
 8001798:	080015d9 	.word	0x080015d9
 800179c:	08001669 	.word	0x08001669

080017a0 <HAL_ULTRASONIC_GET_DISTANCE>:



uint32_t HAL_ULTRASONIC_GET_DISTANCE(ULT_SLEC_T num)
{
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
	uint32_t x ;
	switch(num)
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	d87f      	bhi.n	80018b0 <HAL_ULTRASONIC_GET_DISTANCE+0x110>
 80017b0:	a201      	add	r2, pc, #4	; (adr r2, 80017b8 <HAL_ULTRASONIC_GET_DISTANCE+0x18>)
 80017b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b6:	bf00      	nop
 80017b8:	080017c9 	.word	0x080017c9
 80017bc:	08001803 	.word	0x08001803
 80017c0:	0800183d 	.word	0x0800183d
 80017c4:	08001877 	.word	0x08001877
	{
	case ULT1 :
	{
		MCAL_GPIO_WRITEPIN(GPIOB, ULT1_TRIG_PIN_B9,SET);
 80017c8:	2201      	movs	r2, #1
 80017ca:	2109      	movs	r1, #9
 80017cc:	483b      	ldr	r0, [pc, #236]	; (80018bc <HAL_ULTRASONIC_GET_DISTANCE+0x11c>)
 80017ce:	f000 f9b9 	bl	8001b44 <MCAL_GPIO_WRITEPIN>
		delay(10, U_us, clk);
 80017d2:	4a3b      	ldr	r2, [pc, #236]	; (80018c0 <HAL_ULTRASONIC_GET_DISTANCE+0x120>)
 80017d4:	2101      	movs	r1, #1
 80017d6:	200a      	movs	r0, #10
 80017d8:	f001 fa02 	bl	8002be0 <delay>
		MCAL_GPIO_WRITEPIN(GPIOB, ULT1_TRIG_PIN_B9,RESET);
 80017dc:	2200      	movs	r2, #0
 80017de:	2109      	movs	r1, #9
 80017e0:	4836      	ldr	r0, [pc, #216]	; (80018bc <HAL_ULTRASONIC_GET_DISTANCE+0x11c>)
 80017e2:	f000 f9af 	bl	8001b44 <MCAL_GPIO_WRITEPIN>
		delay(40,U_ms,clk);
 80017e6:	4a36      	ldr	r2, [pc, #216]	; (80018c0 <HAL_ULTRASONIC_GET_DISTANCE+0x120>)
 80017e8:	2100      	movs	r1, #0
 80017ea:	2028      	movs	r0, #40	; 0x28
 80017ec:	f001 f9f8 	bl	8002be0 <delay>
		x = distance1 ;
 80017f0:	4b34      	ldr	r3, [pc, #208]	; (80018c4 <HAL_ULTRASONIC_GET_DISTANCE+0x124>)
 80017f2:	cb18      	ldmia	r3, {r3, r4}
 80017f4:	4618      	mov	r0, r3
 80017f6:	4621      	mov	r1, r4
 80017f8:	f7ff f910 	bl	8000a1c <__aeabi_d2uiz>
 80017fc:	4603      	mov	r3, r0
 80017fe:	60fb      	str	r3, [r7, #12]
	}
	break;
 8001800:	e056      	b.n	80018b0 <HAL_ULTRASONIC_GET_DISTANCE+0x110>
	case ULT2 :
	{
		MCAL_GPIO_WRITEPIN(GPIOB, ULT2_TRIG_PIN_B10,SET);
 8001802:	2201      	movs	r2, #1
 8001804:	210a      	movs	r1, #10
 8001806:	482d      	ldr	r0, [pc, #180]	; (80018bc <HAL_ULTRASONIC_GET_DISTANCE+0x11c>)
 8001808:	f000 f99c 	bl	8001b44 <MCAL_GPIO_WRITEPIN>
		delay(10, U_us, clk);
 800180c:	4a2c      	ldr	r2, [pc, #176]	; (80018c0 <HAL_ULTRASONIC_GET_DISTANCE+0x120>)
 800180e:	2101      	movs	r1, #1
 8001810:	200a      	movs	r0, #10
 8001812:	f001 f9e5 	bl	8002be0 <delay>
		MCAL_GPIO_WRITEPIN(GPIOB, ULT2_TRIG_PIN_B10,RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	210a      	movs	r1, #10
 800181a:	4828      	ldr	r0, [pc, #160]	; (80018bc <HAL_ULTRASONIC_GET_DISTANCE+0x11c>)
 800181c:	f000 f992 	bl	8001b44 <MCAL_GPIO_WRITEPIN>
		delay(40,U_ms,clk);
 8001820:	4a27      	ldr	r2, [pc, #156]	; (80018c0 <HAL_ULTRASONIC_GET_DISTANCE+0x120>)
 8001822:	2100      	movs	r1, #0
 8001824:	2028      	movs	r0, #40	; 0x28
 8001826:	f001 f9db 	bl	8002be0 <delay>
		x = distance2 ;
 800182a:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <HAL_ULTRASONIC_GET_DISTANCE+0x128>)
 800182c:	cb18      	ldmia	r3, {r3, r4}
 800182e:	4618      	mov	r0, r3
 8001830:	4621      	mov	r1, r4
 8001832:	f7ff f8f3 	bl	8000a1c <__aeabi_d2uiz>
 8001836:	4603      	mov	r3, r0
 8001838:	60fb      	str	r3, [r7, #12]

	}
	break;
 800183a:	e039      	b.n	80018b0 <HAL_ULTRASONIC_GET_DISTANCE+0x110>
	case ULT3 :
	{
		MCAL_GPIO_WRITEPIN(GPIOB, ULT3_TRIG_PIN_B11,SET);
 800183c:	2201      	movs	r2, #1
 800183e:	210b      	movs	r1, #11
 8001840:	481e      	ldr	r0, [pc, #120]	; (80018bc <HAL_ULTRASONIC_GET_DISTANCE+0x11c>)
 8001842:	f000 f97f 	bl	8001b44 <MCAL_GPIO_WRITEPIN>
		delay(10, U_us, clk);
 8001846:	4a1e      	ldr	r2, [pc, #120]	; (80018c0 <HAL_ULTRASONIC_GET_DISTANCE+0x120>)
 8001848:	2101      	movs	r1, #1
 800184a:	200a      	movs	r0, #10
 800184c:	f001 f9c8 	bl	8002be0 <delay>
		MCAL_GPIO_WRITEPIN(GPIOB, ULT3_TRIG_PIN_B11,RESET);
 8001850:	2200      	movs	r2, #0
 8001852:	210b      	movs	r1, #11
 8001854:	4819      	ldr	r0, [pc, #100]	; (80018bc <HAL_ULTRASONIC_GET_DISTANCE+0x11c>)
 8001856:	f000 f975 	bl	8001b44 <MCAL_GPIO_WRITEPIN>
		delay(40,U_ms,clk);
 800185a:	4a19      	ldr	r2, [pc, #100]	; (80018c0 <HAL_ULTRASONIC_GET_DISTANCE+0x120>)
 800185c:	2100      	movs	r1, #0
 800185e:	2028      	movs	r0, #40	; 0x28
 8001860:	f001 f9be 	bl	8002be0 <delay>
		x = distance3 ;
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_ULTRASONIC_GET_DISTANCE+0x12c>)
 8001866:	cb18      	ldmia	r3, {r3, r4}
 8001868:	4618      	mov	r0, r3
 800186a:	4621      	mov	r1, r4
 800186c:	f7ff f8d6 	bl	8000a1c <__aeabi_d2uiz>
 8001870:	4603      	mov	r3, r0
 8001872:	60fb      	str	r3, [r7, #12]
	}
	break;
 8001874:	e01c      	b.n	80018b0 <HAL_ULTRASONIC_GET_DISTANCE+0x110>
	case ULT4 :
	{
		MCAL_GPIO_WRITEPIN(GPIOB, ULT4_TRIG_PIN_B12,SET);
 8001876:	2201      	movs	r2, #1
 8001878:	210c      	movs	r1, #12
 800187a:	4810      	ldr	r0, [pc, #64]	; (80018bc <HAL_ULTRASONIC_GET_DISTANCE+0x11c>)
 800187c:	f000 f962 	bl	8001b44 <MCAL_GPIO_WRITEPIN>
		delay(10, U_us, clk);
 8001880:	4a0f      	ldr	r2, [pc, #60]	; (80018c0 <HAL_ULTRASONIC_GET_DISTANCE+0x120>)
 8001882:	2101      	movs	r1, #1
 8001884:	200a      	movs	r0, #10
 8001886:	f001 f9ab 	bl	8002be0 <delay>
		MCAL_GPIO_WRITEPIN(GPIOB, ULT4_TRIG_PIN_B12,RESET);
 800188a:	2200      	movs	r2, #0
 800188c:	210c      	movs	r1, #12
 800188e:	480b      	ldr	r0, [pc, #44]	; (80018bc <HAL_ULTRASONIC_GET_DISTANCE+0x11c>)
 8001890:	f000 f958 	bl	8001b44 <MCAL_GPIO_WRITEPIN>
		delay(40,U_ms,clk);
 8001894:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <HAL_ULTRASONIC_GET_DISTANCE+0x120>)
 8001896:	2100      	movs	r1, #0
 8001898:	2028      	movs	r0, #40	; 0x28
 800189a:	f001 f9a1 	bl	8002be0 <delay>
		x = distance4 ;
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <HAL_ULTRASONIC_GET_DISTANCE+0x130>)
 80018a0:	cb18      	ldmia	r3, {r3, r4}
 80018a2:	4618      	mov	r0, r3
 80018a4:	4621      	mov	r1, r4
 80018a6:	f7ff f8b9 	bl	8000a1c <__aeabi_d2uiz>
 80018aa:	4603      	mov	r3, r0
 80018ac:	60fb      	str	r3, [r7, #12]
	}
	break;
 80018ae:	bf00      	nop
	}

	return x ;
 80018b0:	68fb      	ldr	r3, [r7, #12]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd90      	pop	{r4, r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40010c00 	.word	0x40010c00
 80018c0:	02255100 	.word	0x02255100
 80018c4:	200000e0 	.word	0x200000e0
 80018c8:	200000f0 	.word	0x200000f0
 80018cc:	200000d0 	.word	0x200000d0
 80018d0:	200000d8 	.word	0x200000d8

080018d4 <getposition>:


/******************************************************************************
*                           APIS IMPLEMENTATION			                      *
*******************************************************************************/
uint8_t getposition(uint16_t pin_num){
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	80fb      	strh	r3, [r7, #6]
	uint8_t rval;
	if(pin_num == PIN_0){
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <getposition+0x14>
		rval =0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == PIN_1){
 80018e8:	88fb      	ldrh	r3, [r7, #6]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d101      	bne.n	80018f2 <getposition+0x1e>
		rval =4;
 80018ee:	2304      	movs	r3, #4
 80018f0:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == PIN_2){
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d101      	bne.n	80018fc <getposition+0x28>
		rval =8;
 80018f8:	2308      	movs	r3, #8
 80018fa:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == PIN_3){
 80018fc:	88fb      	ldrh	r3, [r7, #6]
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d101      	bne.n	8001906 <getposition+0x32>
		rval =12;
 8001902:	230c      	movs	r3, #12
 8001904:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == PIN_4){
 8001906:	88fb      	ldrh	r3, [r7, #6]
 8001908:	2b04      	cmp	r3, #4
 800190a:	d101      	bne.n	8001910 <getposition+0x3c>
		rval =16;
 800190c:	2310      	movs	r3, #16
 800190e:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == PIN_5){
 8001910:	88fb      	ldrh	r3, [r7, #6]
 8001912:	2b05      	cmp	r3, #5
 8001914:	d101      	bne.n	800191a <getposition+0x46>
		rval =20;
 8001916:	2314      	movs	r3, #20
 8001918:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == PIN_6){
 800191a:	88fb      	ldrh	r3, [r7, #6]
 800191c:	2b06      	cmp	r3, #6
 800191e:	d101      	bne.n	8001924 <getposition+0x50>
		rval =24;
 8001920:	2318      	movs	r3, #24
 8001922:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == PIN_7){
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	2b07      	cmp	r3, #7
 8001928:	d101      	bne.n	800192e <getposition+0x5a>
		rval =28;
 800192a:	231c      	movs	r3, #28
 800192c:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == PIN_8){
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	2b08      	cmp	r3, #8
 8001932:	d101      	bne.n	8001938 <getposition+0x64>
		rval =0;
 8001934:	2300      	movs	r3, #0
 8001936:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == PIN_9){
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	2b09      	cmp	r3, #9
 800193c:	d101      	bne.n	8001942 <getposition+0x6e>
		rval =4;
 800193e:	2304      	movs	r3, #4
 8001940:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == PIN_10){
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	2b0a      	cmp	r3, #10
 8001946:	d101      	bne.n	800194c <getposition+0x78>
		rval =8;
 8001948:	2308      	movs	r3, #8
 800194a:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == PIN_11){
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	2b0b      	cmp	r3, #11
 8001950:	d101      	bne.n	8001956 <getposition+0x82>
		rval =12;
 8001952:	230c      	movs	r3, #12
 8001954:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == PIN_12){
 8001956:	88fb      	ldrh	r3, [r7, #6]
 8001958:	2b0c      	cmp	r3, #12
 800195a:	d101      	bne.n	8001960 <getposition+0x8c>
		rval =16;
 800195c:	2310      	movs	r3, #16
 800195e:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == PIN_13){
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	2b0d      	cmp	r3, #13
 8001964:	d101      	bne.n	800196a <getposition+0x96>
		rval =20;
 8001966:	2314      	movs	r3, #20
 8001968:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == PIN_14){
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	2b0e      	cmp	r3, #14
 800196e:	d101      	bne.n	8001974 <getposition+0xa0>
		rval =24;
 8001970:	2318      	movs	r3, #24
 8001972:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == PIN_15){
 8001974:	88fb      	ldrh	r3, [r7, #6]
 8001976:	2b0f      	cmp	r3, #15
 8001978:	d101      	bne.n	800197e <getposition+0xaa>
		rval =28;
 800197a:	231c      	movs	r3, #28
 800197c:	73fb      	strb	r3, [r7, #15]
	}
	return rval;
 800197e:	7bfb      	ldrb	r3, [r7, #15]


}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
	...

0800198c <MCAL_GPIO_INIT>:
// * @param [in] - GPIOx: where x can be (A...E Depending on device used) to select the GPIO Peripheral
// * @param [in] - pin: pin name
// * @param [in] - pinmode:mode of the pin
// * @retval -none
// * Note-
void MCAL_GPIO_INIT(GPIO_TypeDef* GPIOx,uint16_t pin,uint32_t pinmode){
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	460b      	mov	r3, r1
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	817b      	strh	r3, [r7, #10]
	if(GPIOx==GPIOA){
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4a67      	ldr	r2, [pc, #412]	; (8001b3c <MCAL_GPIO_INIT+0x1b0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d105      	bne.n	80019ae <MCAL_GPIO_INIT+0x22>
		MCAL_RCC_Peripherals_enable(APB2, RCC_GPIOA, Enable);
 80019a2:	2201      	movs	r2, #1
 80019a4:	2102      	movs	r1, #2
 80019a6:	2002      	movs	r0, #2
 80019a8:	f000 fe6c 	bl	8002684 <MCAL_RCC_Peripherals_enable>
 80019ac:	e00e      	b.n	80019cc <MCAL_GPIO_INIT+0x40>

	}
	else if(GPIOx==GPIOB){
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4a63      	ldr	r2, [pc, #396]	; (8001b40 <MCAL_GPIO_INIT+0x1b4>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d105      	bne.n	80019c2 <MCAL_GPIO_INIT+0x36>
		MCAL_RCC_Peripherals_enable(APB2, RCC_GPIOB, Enable);
 80019b6:	2201      	movs	r2, #1
 80019b8:	2103      	movs	r1, #3
 80019ba:	2002      	movs	r0, #2
 80019bc:	f000 fe62 	bl	8002684 <MCAL_RCC_Peripherals_enable>
 80019c0:	e004      	b.n	80019cc <MCAL_GPIO_INIT+0x40>

	}
	else{
		MCAL_RCC_Peripherals_enable(APB2, RCC_GPIOC, Enable);
 80019c2:	2201      	movs	r2, #1
 80019c4:	2104      	movs	r1, #4
 80019c6:	2002      	movs	r0, #2
 80019c8:	f000 fe5c 	bl	8002684 <MCAL_RCC_Peripherals_enable>
	}

	if(pin<8){
 80019cc:	897b      	ldrh	r3, [r7, #10]
 80019ce:	2b07      	cmp	r3, #7
 80019d0:	d856      	bhi.n	8001a80 <MCAL_GPIO_INIT+0xf4>
		GPIOx->CRL &=~(0xf<<(getposition(pin)));
 80019d2:	897b      	ldrh	r3, [r7, #10]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff7d 	bl	80018d4 <getposition>
 80019da:	4603      	mov	r3, r0
 80019dc:	461a      	mov	r2, r3
 80019de:	230f      	movs	r3, #15
 80019e0:	4093      	lsls	r3, r2
 80019e2:	43da      	mvns	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	401a      	ands	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	601a      	str	r2, [r3, #0]

		if((pinmode==Input_PD_Mode)||(pinmode==Input_PU_Mode)){
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d002      	beq.n	80019fa <MCAL_GPIO_INIT+0x6e>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b18      	cmp	r3, #24
 80019f8:	d133      	bne.n	8001a62 <MCAL_GPIO_INIT+0xd6>
			if(pinmode == Input_PU_Mode){
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b18      	cmp	r3, #24
 80019fe:	d117      	bne.n	8001a30 <MCAL_GPIO_INIT+0xa4>
				GPIOx->CRL |=(0b1000<<(getposition(pin)));
 8001a00:	897b      	ldrh	r3, [r7, #10]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ff66 	bl	80018d4 <getposition>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	fa03 f202 	lsl.w	r2, r3, r2
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	431a      	orrs	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	601a      	str	r2, [r3, #0]
				GPIOx->ODR |= (1<<pin);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	897a      	ldrh	r2, [r7, #10]
 8001a22:	2101      	movs	r1, #1
 8001a24:	fa01 f202 	lsl.w	r2, r1, r2
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	60da      	str	r2, [r3, #12]
			if(pinmode == Input_PU_Mode){
 8001a2e:	e081      	b.n	8001b34 <MCAL_GPIO_INIT+0x1a8>
			}
			else{
				GPIOx->CRL |=(0b1000<<(getposition(pin)));
 8001a30:	897b      	ldrh	r3, [r7, #10]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff ff4e 	bl	80018d4 <getposition>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	2308      	movs	r3, #8
 8001a3e:	fa03 f202 	lsl.w	r2, r3, r2
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	431a      	orrs	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	601a      	str	r2, [r3, #0]
				GPIOx->ODR &=~(1<<pin);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	897a      	ldrh	r2, [r7, #10]
 8001a52:	2101      	movs	r1, #1
 8001a54:	fa01 f202 	lsl.w	r2, r1, r2
 8001a58:	43d2      	mvns	r2, r2
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	60da      	str	r2, [r3, #12]
			if(pinmode == Input_PU_Mode){
 8001a60:	e068      	b.n	8001b34 <MCAL_GPIO_INIT+0x1a8>
			}

		}
		else GPIOx->CRL |=(pinmode<<(getposition(pin)));
 8001a62:	897b      	ldrh	r3, [r7, #10]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff35 	bl	80018d4 <getposition>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	fa03 f202 	lsl.w	r2, r3, r2
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	601a      	str	r2, [r3, #0]

	}



}
 8001a7e:	e059      	b.n	8001b34 <MCAL_GPIO_INIT+0x1a8>
	else if(pin>7){
 8001a80:	897b      	ldrh	r3, [r7, #10]
 8001a82:	2b07      	cmp	r3, #7
 8001a84:	d956      	bls.n	8001b34 <MCAL_GPIO_INIT+0x1a8>
		GPIOx->CRH &=~(0xf<<(getposition(pin)));
 8001a86:	897b      	ldrh	r3, [r7, #10]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff23 	bl	80018d4 <getposition>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	461a      	mov	r2, r3
 8001a92:	230f      	movs	r3, #15
 8001a94:	4093      	lsls	r3, r2
 8001a96:	43da      	mvns	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	401a      	ands	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	605a      	str	r2, [r3, #4]
		if((pinmode==Input_PD_Mode)||(pinmode==Input_PU_Mode)){
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d002      	beq.n	8001aae <MCAL_GPIO_INIT+0x122>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b18      	cmp	r3, #24
 8001aac:	d133      	bne.n	8001b16 <MCAL_GPIO_INIT+0x18a>
			if(pinmode == Input_PU_Mode){
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b18      	cmp	r3, #24
 8001ab2:	d117      	bne.n	8001ae4 <MCAL_GPIO_INIT+0x158>
				GPIOx->CRH |=(0b1000<<(getposition(pin)));
 8001ab4:	897b      	ldrh	r3, [r7, #10]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff ff0c 	bl	80018d4 <getposition>
 8001abc:	4603      	mov	r3, r0
 8001abe:	461a      	mov	r2, r3
 8001ac0:	2308      	movs	r3, #8
 8001ac2:	fa03 f202 	lsl.w	r2, r3, r2
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	431a      	orrs	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	605a      	str	r2, [r3, #4]
				GPIOx->ODR |= (1<<pin);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	897a      	ldrh	r2, [r7, #10]
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8001adc:	431a      	orrs	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	60da      	str	r2, [r3, #12]
			if(pinmode == Input_PU_Mode){
 8001ae2:	e027      	b.n	8001b34 <MCAL_GPIO_INIT+0x1a8>
				GPIOx->CRH |=(0b1000<<(getposition(pin)));
 8001ae4:	897b      	ldrh	r3, [r7, #10]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fef4 	bl	80018d4 <getposition>
 8001aec:	4603      	mov	r3, r0
 8001aee:	461a      	mov	r2, r3
 8001af0:	2308      	movs	r3, #8
 8001af2:	fa03 f202 	lsl.w	r2, r3, r2
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	431a      	orrs	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	605a      	str	r2, [r3, #4]
				GPIOx->ODR &=~(1<<pin);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	897a      	ldrh	r2, [r7, #10]
 8001b06:	2101      	movs	r1, #1
 8001b08:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0c:	43d2      	mvns	r2, r2
 8001b0e:	401a      	ands	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	60da      	str	r2, [r3, #12]
			if(pinmode == Input_PU_Mode){
 8001b14:	e00e      	b.n	8001b34 <MCAL_GPIO_INIT+0x1a8>
		else GPIOx->CRH |=(pinmode<<(getposition(pin)));
 8001b16:	897b      	ldrh	r3, [r7, #10]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fedb 	bl	80018d4 <getposition>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	461a      	mov	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	fa03 f202 	lsl.w	r2, r3, r2
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	605a      	str	r2, [r3, #4]
}
 8001b32:	e7ff      	b.n	8001b34 <MCAL_GPIO_INIT+0x1a8>
 8001b34:	bf00      	nop
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40010800 	.word	0x40010800
 8001b40:	40010c00 	.word	0x40010c00

08001b44 <MCAL_GPIO_WRITEPIN>:
 * @param [in] - pin: GPIOx PIN Number
 * @param [in] - status: The desired value to write
 * @retval - None
 * Note-
 */
void MCAL_GPIO_WRITEPIN(GPIO_TypeDef* GPIOx,uint16_t pin,uint8_t status){
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]
 8001b50:	4613      	mov	r3, r2
 8001b52:	707b      	strb	r3, [r7, #1]
	if(status!=0){
 8001b54:	787b      	ldrb	r3, [r7, #1]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d009      	beq.n	8001b6e <MCAL_GPIO_WRITEPIN+0x2a>
		GPIOx->ODR |=(1<<pin);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	887a      	ldrh	r2, [r7, #2]
 8001b60:	2101      	movs	r1, #1
 8001b62:	fa01 f202 	lsl.w	r2, r1, r2
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	60da      	str	r2, [r3, #12]
	}
	else GPIOx->ODR &=~(1<<pin);

}
 8001b6c:	e009      	b.n	8001b82 <MCAL_GPIO_WRITEPIN+0x3e>
	else GPIOx->ODR &=~(1<<pin);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	887a      	ldrh	r2, [r7, #2]
 8001b74:	2101      	movs	r1, #1
 8001b76:	fa01 f202 	lsl.w	r2, r1, r2
 8001b7a:	43d2      	mvns	r2, r2
 8001b7c:	401a      	ands	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	60da      	str	r2, [r3, #12]
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <Enable_NVIC>:
 * ------------------------------------------------
 * 				  Generic Functions
 *-------------------------------------------------
 */

void Enable_NVIC(uint16_t IRQ){
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	2b0f      	cmp	r3, #15
 8001b9a:	d854      	bhi.n	8001c46 <Enable_NVIC+0xba>
 8001b9c:	a201      	add	r2, pc, #4	; (adr r2, 8001ba4 <Enable_NVIC+0x18>)
 8001b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba2:	bf00      	nop
 8001ba4:	08001be5 	.word	0x08001be5
 8001ba8:	08001bf3 	.word	0x08001bf3
 8001bac:	08001c01 	.word	0x08001c01
 8001bb0:	08001c0f 	.word	0x08001c0f
 8001bb4:	08001c1d 	.word	0x08001c1d
 8001bb8:	08001c2b 	.word	0x08001c2b
 8001bbc:	08001c2b 	.word	0x08001c2b
 8001bc0:	08001c2b 	.word	0x08001c2b
 8001bc4:	08001c2b 	.word	0x08001c2b
 8001bc8:	08001c2b 	.word	0x08001c2b
 8001bcc:	08001c39 	.word	0x08001c39
 8001bd0:	08001c39 	.word	0x08001c39
 8001bd4:	08001c39 	.word	0x08001c39
 8001bd8:	08001c39 	.word	0x08001c39
 8001bdc:	08001c39 	.word	0x08001c39
 8001be0:	08001c39 	.word	0x08001c39
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 8001be4:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <Enable_NVIC+0xc4>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a19      	ldr	r2, [pc, #100]	; (8001c50 <Enable_NVIC+0xc4>)
 8001bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bee:	6013      	str	r3, [r2, #0]
		break;
 8001bf0:	e029      	b.n	8001c46 <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 8001bf2:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <Enable_NVIC+0xc4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a16      	ldr	r2, [pc, #88]	; (8001c50 <Enable_NVIC+0xc4>)
 8001bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bfc:	6013      	str	r3, [r2, #0]
		break;
 8001bfe:	e022      	b.n	8001c46 <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <Enable_NVIC+0xc4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a12      	ldr	r2, [pc, #72]	; (8001c50 <Enable_NVIC+0xc4>)
 8001c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0a:	6013      	str	r3, [r2, #0]
		break;
 8001c0c:	e01b      	b.n	8001c46 <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <Enable_NVIC+0xc4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a0f      	ldr	r2, [pc, #60]	; (8001c50 <Enable_NVIC+0xc4>)
 8001c14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c18:	6013      	str	r3, [r2, #0]
		break;
 8001c1a:	e014      	b.n	8001c46 <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <Enable_NVIC+0xc4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a0b      	ldr	r2, [pc, #44]	; (8001c50 <Enable_NVIC+0xc4>)
 8001c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c26:	6013      	str	r3, [r2, #0]
		break;
 8001c28:	e00d      	b.n	8001c46 <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <Enable_NVIC+0xc4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a08      	ldr	r2, [pc, #32]	; (8001c50 <Enable_NVIC+0xc4>)
 8001c30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c34:	6013      	str	r3, [r2, #0]
		break;
 8001c36:	e006      	b.n	8001c46 <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <Enable_NVIC+0xc8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a05      	ldr	r2, [pc, #20]	; (8001c54 <Enable_NVIC+0xc8>)
 8001c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c42:	6013      	str	r3, [r2, #0]
		break;
 8001c44:	bf00      	nop
	}


}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	e000e100 	.word	0xe000e100
 8001c54:	e000e104 	.word	0xe000e104

08001c58 <EXTI_Init>:
 * @retval          - none
 * Note             -
 *================================================================ */

void EXTI_Init(GPIO_TypeDef* PORTx ,uint16_t pin,uint16_t triggercase,void (*function_addres) (void))
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	460b      	mov	r3, r1
 8001c64:	817b      	strh	r3, [r7, #10]
 8001c66:	4613      	mov	r3, r2
 8001c68:	813b      	strh	r3, [r7, #8]

	MCAL_GPIO_INIT(PORTx,pin,Input_ALF_Mode);//set pin to _INTPUT_AF
 8001c6a:	897b      	ldrh	r3, [r7, #10]
 8001c6c:	2204      	movs	r2, #4
 8001c6e:	4619      	mov	r1, r3
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f7ff fe8b 	bl	800198c <MCAL_GPIO_INIT>
		//	0000: PA[x] pin
		//	0001: PB[x] pin
		//	0010: PC[x] pin
		//	0011: PD[x] pin

		switch(pin){
 8001c76:	897b      	ldrh	r3, [r7, #10]
 8001c78:	2b0f      	cmp	r3, #15
 8001c7a:	f200 8385 	bhi.w	8002388 <EXTI_Init+0x730>
 8001c7e:	a201      	add	r2, pc, #4	; (adr r2, 8001c84 <EXTI_Init+0x2c>)
 8001c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c84:	08001cc5 	.word	0x08001cc5
 8001c88:	08001d2b 	.word	0x08001d2b
 8001c8c:	08001d91 	.word	0x08001d91
 8001c90:	08001df7 	.word	0x08001df7
 8001c94:	08001e5d 	.word	0x08001e5d
 8001c98:	08001ec3 	.word	0x08001ec3
 8001c9c:	08001f3d 	.word	0x08001f3d
 8001ca0:	08001fa3 	.word	0x08001fa3
 8001ca4:	08002009 	.word	0x08002009
 8001ca8:	0800206f 	.word	0x0800206f
 8001cac:	080020d5 	.word	0x080020d5
 8001cb0:	0800213b 	.word	0x0800213b
 8001cb4:	080021b7 	.word	0x080021b7
 8001cb8:	0800221d 	.word	0x0800221d
 8001cbc:	08002283 	.word	0x08002283
 8001cc0:	080022e7 	.word	0x080022e7
		case PIN_0:
			AFIO->EXTICR1 &=~(0b1111<<0);
 8001cc4:	4b92      	ldr	r3, [pc, #584]	; (8001f10 <EXTI_Init+0x2b8>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	4a91      	ldr	r2, [pc, #580]	; (8001f10 <EXTI_Init+0x2b8>)
 8001cca:	f023 030f 	bic.w	r3, r3, #15
 8001cce:	6093      	str	r3, [r2, #8]
			if(PORTx==GPIOA)     {AFIO->EXTICR1 &=~(0b1111<<0);}
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4a90      	ldr	r2, [pc, #576]	; (8001f14 <EXTI_Init+0x2bc>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d106      	bne.n	8001ce6 <EXTI_Init+0x8e>
 8001cd8:	4b8d      	ldr	r3, [pc, #564]	; (8001f10 <EXTI_Init+0x2b8>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	4a8c      	ldr	r2, [pc, #560]	; (8001f10 <EXTI_Init+0x2b8>)
 8001cde:	f023 030f 	bic.w	r3, r3, #15
 8001ce2:	6093      	str	r3, [r2, #8]
			else if(PORTx==GPIOB){AFIO->EXTICR1 |= (0b0001<<0);}
			else if(PORTx==GPIOC){AFIO->EXTICR1 |= (0b0010<<0);}
			else if(PORTx==GPIOD){AFIO->EXTICR1 |= (0b0011<<0);}

			break;
 8001ce4:	e331      	b.n	800234a <EXTI_Init+0x6f2>
			else if(PORTx==GPIOB){AFIO->EXTICR1 |= (0b0001<<0);}
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4a8b      	ldr	r2, [pc, #556]	; (8001f18 <EXTI_Init+0x2c0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d106      	bne.n	8001cfc <EXTI_Init+0xa4>
 8001cee:	4b88      	ldr	r3, [pc, #544]	; (8001f10 <EXTI_Init+0x2b8>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	4a87      	ldr	r2, [pc, #540]	; (8001f10 <EXTI_Init+0x2b8>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6093      	str	r3, [r2, #8]
			break;
 8001cfa:	e326      	b.n	800234a <EXTI_Init+0x6f2>
			else if(PORTx==GPIOC){AFIO->EXTICR1 |= (0b0010<<0);}
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4a87      	ldr	r2, [pc, #540]	; (8001f1c <EXTI_Init+0x2c4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d106      	bne.n	8001d12 <EXTI_Init+0xba>
 8001d04:	4b82      	ldr	r3, [pc, #520]	; (8001f10 <EXTI_Init+0x2b8>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	4a81      	ldr	r2, [pc, #516]	; (8001f10 <EXTI_Init+0x2b8>)
 8001d0a:	f043 0302 	orr.w	r3, r3, #2
 8001d0e:	6093      	str	r3, [r2, #8]
			break;
 8001d10:	e31b      	b.n	800234a <EXTI_Init+0x6f2>
			else if(PORTx==GPIOD){AFIO->EXTICR1 |= (0b0011<<0);}
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4a82      	ldr	r2, [pc, #520]	; (8001f20 <EXTI_Init+0x2c8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	f040 8317 	bne.w	800234a <EXTI_Init+0x6f2>
 8001d1c:	4b7c      	ldr	r3, [pc, #496]	; (8001f10 <EXTI_Init+0x2b8>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	4a7b      	ldr	r2, [pc, #492]	; (8001f10 <EXTI_Init+0x2b8>)
 8001d22:	f043 0303 	orr.w	r3, r3, #3
 8001d26:	6093      	str	r3, [r2, #8]
			break;
 8001d28:	e30f      	b.n	800234a <EXTI_Init+0x6f2>
		case PIN_1:
			AFIO->EXTICR1 &=~(0b1111<<4);
 8001d2a:	4b79      	ldr	r3, [pc, #484]	; (8001f10 <EXTI_Init+0x2b8>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	4a78      	ldr	r2, [pc, #480]	; (8001f10 <EXTI_Init+0x2b8>)
 8001d30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d34:	6093      	str	r3, [r2, #8]
			if(PORTx==GPIOA)     {AFIO->EXTICR1 &=~(0b1111<<4);}
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4a76      	ldr	r2, [pc, #472]	; (8001f14 <EXTI_Init+0x2bc>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d106      	bne.n	8001d4c <EXTI_Init+0xf4>
 8001d3e:	4b74      	ldr	r3, [pc, #464]	; (8001f10 <EXTI_Init+0x2b8>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	4a73      	ldr	r2, [pc, #460]	; (8001f10 <EXTI_Init+0x2b8>)
 8001d44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d48:	6093      	str	r3, [r2, #8]
			else if(PORTx==GPIOB){AFIO->EXTICR1 |= (0b0001<<4);}
			else if(PORTx==GPIOC){AFIO->EXTICR1 |= (0b0010<<4);}
			else if(PORTx==GPIOD){AFIO->EXTICR1 |= (0b0011<<4);}

			break;
 8001d4a:	e300      	b.n	800234e <EXTI_Init+0x6f6>
			else if(PORTx==GPIOB){AFIO->EXTICR1 |= (0b0001<<4);}
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4a72      	ldr	r2, [pc, #456]	; (8001f18 <EXTI_Init+0x2c0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d106      	bne.n	8001d62 <EXTI_Init+0x10a>
 8001d54:	4b6e      	ldr	r3, [pc, #440]	; (8001f10 <EXTI_Init+0x2b8>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	4a6d      	ldr	r2, [pc, #436]	; (8001f10 <EXTI_Init+0x2b8>)
 8001d5a:	f043 0310 	orr.w	r3, r3, #16
 8001d5e:	6093      	str	r3, [r2, #8]
			break;
 8001d60:	e2f5      	b.n	800234e <EXTI_Init+0x6f6>
			else if(PORTx==GPIOC){AFIO->EXTICR1 |= (0b0010<<4);}
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4a6d      	ldr	r2, [pc, #436]	; (8001f1c <EXTI_Init+0x2c4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d106      	bne.n	8001d78 <EXTI_Init+0x120>
 8001d6a:	4b69      	ldr	r3, [pc, #420]	; (8001f10 <EXTI_Init+0x2b8>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	4a68      	ldr	r2, [pc, #416]	; (8001f10 <EXTI_Init+0x2b8>)
 8001d70:	f043 0320 	orr.w	r3, r3, #32
 8001d74:	6093      	str	r3, [r2, #8]
			break;
 8001d76:	e2ea      	b.n	800234e <EXTI_Init+0x6f6>
			else if(PORTx==GPIOD){AFIO->EXTICR1 |= (0b0011<<4);}
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4a69      	ldr	r2, [pc, #420]	; (8001f20 <EXTI_Init+0x2c8>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	f040 82e6 	bne.w	800234e <EXTI_Init+0x6f6>
 8001d82:	4b63      	ldr	r3, [pc, #396]	; (8001f10 <EXTI_Init+0x2b8>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	4a62      	ldr	r2, [pc, #392]	; (8001f10 <EXTI_Init+0x2b8>)
 8001d88:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001d8c:	6093      	str	r3, [r2, #8]
			break;
 8001d8e:	e2de      	b.n	800234e <EXTI_Init+0x6f6>
		case PIN_2:
			AFIO->EXTICR1 &=~(0b1111<<8);
 8001d90:	4b5f      	ldr	r3, [pc, #380]	; (8001f10 <EXTI_Init+0x2b8>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	4a5e      	ldr	r2, [pc, #376]	; (8001f10 <EXTI_Init+0x2b8>)
 8001d96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d9a:	6093      	str	r3, [r2, #8]
			if(PORTx==GPIOA)     {AFIO->EXTICR1 &=~(0b1111<<8);}
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4a5d      	ldr	r2, [pc, #372]	; (8001f14 <EXTI_Init+0x2bc>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d106      	bne.n	8001db2 <EXTI_Init+0x15a>
 8001da4:	4b5a      	ldr	r3, [pc, #360]	; (8001f10 <EXTI_Init+0x2b8>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	4a59      	ldr	r2, [pc, #356]	; (8001f10 <EXTI_Init+0x2b8>)
 8001daa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001dae:	6093      	str	r3, [r2, #8]
			else if(PORTx==GPIOB){AFIO->EXTICR1 |= (0b0001<<8);}
			else if(PORTx==GPIOC){AFIO->EXTICR1 |= (0b0010<<8);}
			else if(PORTx==GPIOD){AFIO->EXTICR1 |= (0b0011<<8);}

			break;
 8001db0:	e2cf      	b.n	8002352 <EXTI_Init+0x6fa>
			else if(PORTx==GPIOB){AFIO->EXTICR1 |= (0b0001<<8);}
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4a58      	ldr	r2, [pc, #352]	; (8001f18 <EXTI_Init+0x2c0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d106      	bne.n	8001dc8 <EXTI_Init+0x170>
 8001dba:	4b55      	ldr	r3, [pc, #340]	; (8001f10 <EXTI_Init+0x2b8>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	4a54      	ldr	r2, [pc, #336]	; (8001f10 <EXTI_Init+0x2b8>)
 8001dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc4:	6093      	str	r3, [r2, #8]
			break;
 8001dc6:	e2c4      	b.n	8002352 <EXTI_Init+0x6fa>
			else if(PORTx==GPIOC){AFIO->EXTICR1 |= (0b0010<<8);}
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4a54      	ldr	r2, [pc, #336]	; (8001f1c <EXTI_Init+0x2c4>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d106      	bne.n	8001dde <EXTI_Init+0x186>
 8001dd0:	4b4f      	ldr	r3, [pc, #316]	; (8001f10 <EXTI_Init+0x2b8>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	4a4e      	ldr	r2, [pc, #312]	; (8001f10 <EXTI_Init+0x2b8>)
 8001dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dda:	6093      	str	r3, [r2, #8]
			break;
 8001ddc:	e2b9      	b.n	8002352 <EXTI_Init+0x6fa>
			else if(PORTx==GPIOD){AFIO->EXTICR1 |= (0b0011<<8);}
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4a4f      	ldr	r2, [pc, #316]	; (8001f20 <EXTI_Init+0x2c8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	f040 82b5 	bne.w	8002352 <EXTI_Init+0x6fa>
 8001de8:	4b49      	ldr	r3, [pc, #292]	; (8001f10 <EXTI_Init+0x2b8>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	4a48      	ldr	r2, [pc, #288]	; (8001f10 <EXTI_Init+0x2b8>)
 8001dee:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001df2:	6093      	str	r3, [r2, #8]
			break;
 8001df4:	e2ad      	b.n	8002352 <EXTI_Init+0x6fa>
		case PIN_3:
			AFIO->EXTICR1 &=~(0b1111<<12);
 8001df6:	4b46      	ldr	r3, [pc, #280]	; (8001f10 <EXTI_Init+0x2b8>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	4a45      	ldr	r2, [pc, #276]	; (8001f10 <EXTI_Init+0x2b8>)
 8001dfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e00:	6093      	str	r3, [r2, #8]
			if(PORTx==GPIOA)     {AFIO->EXTICR1 &=~(0b1111<<12);}
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4a43      	ldr	r2, [pc, #268]	; (8001f14 <EXTI_Init+0x2bc>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d106      	bne.n	8001e18 <EXTI_Init+0x1c0>
 8001e0a:	4b41      	ldr	r3, [pc, #260]	; (8001f10 <EXTI_Init+0x2b8>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	4a40      	ldr	r2, [pc, #256]	; (8001f10 <EXTI_Init+0x2b8>)
 8001e10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e14:	6093      	str	r3, [r2, #8]
			else if(PORTx==GPIOB){AFIO->EXTICR1 |= (0b0001<<12);}
			else if(PORTx==GPIOC){AFIO->EXTICR1 |= (0b0010<<12);}
			else if(PORTx==GPIOD){AFIO->EXTICR1 |= (0b0011<<12);}

			break;
 8001e16:	e29e      	b.n	8002356 <EXTI_Init+0x6fe>
			else if(PORTx==GPIOB){AFIO->EXTICR1 |= (0b0001<<12);}
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4a3f      	ldr	r2, [pc, #252]	; (8001f18 <EXTI_Init+0x2c0>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d106      	bne.n	8001e2e <EXTI_Init+0x1d6>
 8001e20:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <EXTI_Init+0x2b8>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	4a3a      	ldr	r2, [pc, #232]	; (8001f10 <EXTI_Init+0x2b8>)
 8001e26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e2a:	6093      	str	r3, [r2, #8]
			break;
 8001e2c:	e293      	b.n	8002356 <EXTI_Init+0x6fe>
			else if(PORTx==GPIOC){AFIO->EXTICR1 |= (0b0010<<12);}
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4a3a      	ldr	r2, [pc, #232]	; (8001f1c <EXTI_Init+0x2c4>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d106      	bne.n	8001e44 <EXTI_Init+0x1ec>
 8001e36:	4b36      	ldr	r3, [pc, #216]	; (8001f10 <EXTI_Init+0x2b8>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	4a35      	ldr	r2, [pc, #212]	; (8001f10 <EXTI_Init+0x2b8>)
 8001e3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e40:	6093      	str	r3, [r2, #8]
			break;
 8001e42:	e288      	b.n	8002356 <EXTI_Init+0x6fe>
			else if(PORTx==GPIOD){AFIO->EXTICR1 |= (0b0011<<12);}
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4a36      	ldr	r2, [pc, #216]	; (8001f20 <EXTI_Init+0x2c8>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	f040 8284 	bne.w	8002356 <EXTI_Init+0x6fe>
 8001e4e:	4b30      	ldr	r3, [pc, #192]	; (8001f10 <EXTI_Init+0x2b8>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	4a2f      	ldr	r2, [pc, #188]	; (8001f10 <EXTI_Init+0x2b8>)
 8001e54:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001e58:	6093      	str	r3, [r2, #8]
			break;
 8001e5a:	e27c      	b.n	8002356 <EXTI_Init+0x6fe>
			//			0000: PA[x] pin
			//			0001: PB[x] pin
			//			0010: PC[x] pin
			//			0011: PD[x] pin
		case PIN_4:
			AFIO->EXTICR2 &=~(0b1111<<0);
 8001e5c:	4b2c      	ldr	r3, [pc, #176]	; (8001f10 <EXTI_Init+0x2b8>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4a2b      	ldr	r2, [pc, #172]	; (8001f10 <EXTI_Init+0x2b8>)
 8001e62:	f023 030f 	bic.w	r3, r3, #15
 8001e66:	60d3      	str	r3, [r2, #12]
			if(PORTx==GPIOA)     {AFIO->EXTICR2 &=~(0b1111<<0);}
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4a2a      	ldr	r2, [pc, #168]	; (8001f14 <EXTI_Init+0x2bc>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d106      	bne.n	8001e7e <EXTI_Init+0x226>
 8001e70:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <EXTI_Init+0x2b8>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	4a26      	ldr	r2, [pc, #152]	; (8001f10 <EXTI_Init+0x2b8>)
 8001e76:	f023 030f 	bic.w	r3, r3, #15
 8001e7a:	60d3      	str	r3, [r2, #12]
			else if(PORTx==GPIOB){AFIO->EXTICR2 |= (0b0001<<0);}
			else if(PORTx==GPIOC){AFIO->EXTICR2 |= (0b0010<<0);}
			else if(PORTx==GPIOD){AFIO->EXTICR2 |= (0b0011<<0);}

			break;
 8001e7c:	e26d      	b.n	800235a <EXTI_Init+0x702>
			else if(PORTx==GPIOB){AFIO->EXTICR2 |= (0b0001<<0);}
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4a25      	ldr	r2, [pc, #148]	; (8001f18 <EXTI_Init+0x2c0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d106      	bne.n	8001e94 <EXTI_Init+0x23c>
 8001e86:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <EXTI_Init+0x2b8>)
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	4a21      	ldr	r2, [pc, #132]	; (8001f10 <EXTI_Init+0x2b8>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	60d3      	str	r3, [r2, #12]
			break;
 8001e92:	e262      	b.n	800235a <EXTI_Init+0x702>
			else if(PORTx==GPIOC){AFIO->EXTICR2 |= (0b0010<<0);}
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4a21      	ldr	r2, [pc, #132]	; (8001f1c <EXTI_Init+0x2c4>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d106      	bne.n	8001eaa <EXTI_Init+0x252>
 8001e9c:	4b1c      	ldr	r3, [pc, #112]	; (8001f10 <EXTI_Init+0x2b8>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4a1b      	ldr	r2, [pc, #108]	; (8001f10 <EXTI_Init+0x2b8>)
 8001ea2:	f043 0302 	orr.w	r3, r3, #2
 8001ea6:	60d3      	str	r3, [r2, #12]
			break;
 8001ea8:	e257      	b.n	800235a <EXTI_Init+0x702>
			else if(PORTx==GPIOD){AFIO->EXTICR2 |= (0b0011<<0);}
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4a1c      	ldr	r2, [pc, #112]	; (8001f20 <EXTI_Init+0x2c8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	f040 8253 	bne.w	800235a <EXTI_Init+0x702>
 8001eb4:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <EXTI_Init+0x2b8>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4a15      	ldr	r2, [pc, #84]	; (8001f10 <EXTI_Init+0x2b8>)
 8001eba:	f043 0303 	orr.w	r3, r3, #3
 8001ebe:	60d3      	str	r3, [r2, #12]
			break;
 8001ec0:	e24b      	b.n	800235a <EXTI_Init+0x702>
		case PIN_5:
			AFIO->EXTICR2 &=~(0b1111<<4);
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <EXTI_Init+0x2b8>)
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <EXTI_Init+0x2b8>)
 8001ec8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ecc:	60d3      	str	r3, [r2, #12]
			if(PORTx==GPIOA)     {AFIO->EXTICR2 &=~(0b1111<<4);}
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4a10      	ldr	r2, [pc, #64]	; (8001f14 <EXTI_Init+0x2bc>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d106      	bne.n	8001ee4 <EXTI_Init+0x28c>
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <EXTI_Init+0x2b8>)
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	4a0d      	ldr	r2, [pc, #52]	; (8001f10 <EXTI_Init+0x2b8>)
 8001edc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ee0:	60d3      	str	r3, [r2, #12]
			else if(PORTx==GPIOB){AFIO->EXTICR2 |= (0b0001<<4);}
			else if(PORTx==GPIOC){AFIO->EXTICR2 |= (0b0010<<4);}
			else if(PORTx==GPIOD){AFIO->EXTICR2 |= (0b0011<<4);}

			break;
 8001ee2:	e23c      	b.n	800235e <EXTI_Init+0x706>
			else if(PORTx==GPIOB){AFIO->EXTICR2 |= (0b0001<<4);}
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4a0c      	ldr	r2, [pc, #48]	; (8001f18 <EXTI_Init+0x2c0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d106      	bne.n	8001efa <EXTI_Init+0x2a2>
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <EXTI_Init+0x2b8>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <EXTI_Init+0x2b8>)
 8001ef2:	f043 0310 	orr.w	r3, r3, #16
 8001ef6:	60d3      	str	r3, [r2, #12]
			break;
 8001ef8:	e231      	b.n	800235e <EXTI_Init+0x706>
			else if(PORTx==GPIOC){AFIO->EXTICR2 |= (0b0010<<4);}
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <EXTI_Init+0x2c4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d110      	bne.n	8001f24 <EXTI_Init+0x2cc>
 8001f02:	4b03      	ldr	r3, [pc, #12]	; (8001f10 <EXTI_Init+0x2b8>)
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	4a02      	ldr	r2, [pc, #8]	; (8001f10 <EXTI_Init+0x2b8>)
 8001f08:	f043 0320 	orr.w	r3, r3, #32
 8001f0c:	60d3      	str	r3, [r2, #12]
			break;
 8001f0e:	e226      	b.n	800235e <EXTI_Init+0x706>
 8001f10:	40010000 	.word	0x40010000
 8001f14:	40010800 	.word	0x40010800
 8001f18:	40010c00 	.word	0x40010c00
 8001f1c:	40011000 	.word	0x40011000
 8001f20:	40011400 	.word	0x40011400
			else if(PORTx==GPIOD){AFIO->EXTICR2 |= (0b0011<<4);}
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4a93      	ldr	r2, [pc, #588]	; (8002174 <EXTI_Init+0x51c>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	f040 8218 	bne.w	800235e <EXTI_Init+0x706>
 8001f2e:	4b92      	ldr	r3, [pc, #584]	; (8002178 <EXTI_Init+0x520>)
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	4a91      	ldr	r2, [pc, #580]	; (8002178 <EXTI_Init+0x520>)
 8001f34:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001f38:	60d3      	str	r3, [r2, #12]
			break;
 8001f3a:	e210      	b.n	800235e <EXTI_Init+0x706>
		case PIN_6:
			AFIO->EXTICR2 &=~(0b1111<<8);
 8001f3c:	4b8e      	ldr	r3, [pc, #568]	; (8002178 <EXTI_Init+0x520>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4a8d      	ldr	r2, [pc, #564]	; (8002178 <EXTI_Init+0x520>)
 8001f42:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f46:	60d3      	str	r3, [r2, #12]
			if(PORTx==GPIOA)     {AFIO->EXTICR2 &=~(0b1111<<8);}
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4a8c      	ldr	r2, [pc, #560]	; (800217c <EXTI_Init+0x524>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d106      	bne.n	8001f5e <EXTI_Init+0x306>
 8001f50:	4b89      	ldr	r3, [pc, #548]	; (8002178 <EXTI_Init+0x520>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	4a88      	ldr	r2, [pc, #544]	; (8002178 <EXTI_Init+0x520>)
 8001f56:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f5a:	60d3      	str	r3, [r2, #12]
			else if(PORTx==GPIOB){AFIO->EXTICR2 |= (0b0001<<8);}
			else if(PORTx==GPIOC){AFIO->EXTICR2 |= (0b0010<<8);}
			else if(PORTx==GPIOD){AFIO->EXTICR2 |= (0b0011<<8);}

			break;
 8001f5c:	e201      	b.n	8002362 <EXTI_Init+0x70a>
			else if(PORTx==GPIOB){AFIO->EXTICR2 |= (0b0001<<8);}
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4a87      	ldr	r2, [pc, #540]	; (8002180 <EXTI_Init+0x528>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d106      	bne.n	8001f74 <EXTI_Init+0x31c>
 8001f66:	4b84      	ldr	r3, [pc, #528]	; (8002178 <EXTI_Init+0x520>)
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	4a83      	ldr	r2, [pc, #524]	; (8002178 <EXTI_Init+0x520>)
 8001f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f70:	60d3      	str	r3, [r2, #12]
			break;
 8001f72:	e1f6      	b.n	8002362 <EXTI_Init+0x70a>
			else if(PORTx==GPIOC){AFIO->EXTICR2 |= (0b0010<<8);}
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4a83      	ldr	r2, [pc, #524]	; (8002184 <EXTI_Init+0x52c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d106      	bne.n	8001f8a <EXTI_Init+0x332>
 8001f7c:	4b7e      	ldr	r3, [pc, #504]	; (8002178 <EXTI_Init+0x520>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	4a7d      	ldr	r2, [pc, #500]	; (8002178 <EXTI_Init+0x520>)
 8001f82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f86:	60d3      	str	r3, [r2, #12]
			break;
 8001f88:	e1eb      	b.n	8002362 <EXTI_Init+0x70a>
			else if(PORTx==GPIOD){AFIO->EXTICR2 |= (0b0011<<8);}
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4a79      	ldr	r2, [pc, #484]	; (8002174 <EXTI_Init+0x51c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	f040 81e7 	bne.w	8002362 <EXTI_Init+0x70a>
 8001f94:	4b78      	ldr	r3, [pc, #480]	; (8002178 <EXTI_Init+0x520>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	4a77      	ldr	r2, [pc, #476]	; (8002178 <EXTI_Init+0x520>)
 8001f9a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001f9e:	60d3      	str	r3, [r2, #12]
			break;
 8001fa0:	e1df      	b.n	8002362 <EXTI_Init+0x70a>
		case PIN_7:
			AFIO->EXTICR2 &=~(0b1111<<12);
 8001fa2:	4b75      	ldr	r3, [pc, #468]	; (8002178 <EXTI_Init+0x520>)
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	4a74      	ldr	r2, [pc, #464]	; (8002178 <EXTI_Init+0x520>)
 8001fa8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001fac:	60d3      	str	r3, [r2, #12]
			if(PORTx==GPIOA)     {AFIO->EXTICR2 &=~(0b1111<<12);}
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4a72      	ldr	r2, [pc, #456]	; (800217c <EXTI_Init+0x524>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d106      	bne.n	8001fc4 <EXTI_Init+0x36c>
 8001fb6:	4b70      	ldr	r3, [pc, #448]	; (8002178 <EXTI_Init+0x520>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	4a6f      	ldr	r2, [pc, #444]	; (8002178 <EXTI_Init+0x520>)
 8001fbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001fc0:	60d3      	str	r3, [r2, #12]
			else if(PORTx==GPIOB){AFIO->EXTICR2 |= (0b0001<<12);}
			else if(PORTx==GPIOC){AFIO->EXTICR2 |= (0b0010<<12);}
			else if(PORTx==GPIOD){AFIO->EXTICR2 |= (0b0011<<12);}

			break;
 8001fc2:	e1d0      	b.n	8002366 <EXTI_Init+0x70e>
			else if(PORTx==GPIOB){AFIO->EXTICR2 |= (0b0001<<12);}
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4a6e      	ldr	r2, [pc, #440]	; (8002180 <EXTI_Init+0x528>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d106      	bne.n	8001fda <EXTI_Init+0x382>
 8001fcc:	4b6a      	ldr	r3, [pc, #424]	; (8002178 <EXTI_Init+0x520>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	4a69      	ldr	r2, [pc, #420]	; (8002178 <EXTI_Init+0x520>)
 8001fd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fd6:	60d3      	str	r3, [r2, #12]
			break;
 8001fd8:	e1c5      	b.n	8002366 <EXTI_Init+0x70e>
			else if(PORTx==GPIOC){AFIO->EXTICR2 |= (0b0010<<12);}
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4a69      	ldr	r2, [pc, #420]	; (8002184 <EXTI_Init+0x52c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d106      	bne.n	8001ff0 <EXTI_Init+0x398>
 8001fe2:	4b65      	ldr	r3, [pc, #404]	; (8002178 <EXTI_Init+0x520>)
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	4a64      	ldr	r2, [pc, #400]	; (8002178 <EXTI_Init+0x520>)
 8001fe8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fec:	60d3      	str	r3, [r2, #12]
			break;
 8001fee:	e1ba      	b.n	8002366 <EXTI_Init+0x70e>
			else if(PORTx==GPIOD){AFIO->EXTICR2 |= (0b0011<<12);}
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4a60      	ldr	r2, [pc, #384]	; (8002174 <EXTI_Init+0x51c>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	f040 81b6 	bne.w	8002366 <EXTI_Init+0x70e>
 8001ffa:	4b5f      	ldr	r3, [pc, #380]	; (8002178 <EXTI_Init+0x520>)
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	4a5e      	ldr	r2, [pc, #376]	; (8002178 <EXTI_Init+0x520>)
 8002000:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002004:	60d3      	str	r3, [r2, #12]
			break;
 8002006:	e1ae      	b.n	8002366 <EXTI_Init+0x70e>
			//			0000: PA[x] PIN_
			//			0001: PB[x] pin
			//			0010: PC[x] pin
			//			0011: PD[x] pin
		case PIN_8:
			AFIO->EXTICR3 &=~(0b1111<<0);
 8002008:	4b5b      	ldr	r3, [pc, #364]	; (8002178 <EXTI_Init+0x520>)
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	4a5a      	ldr	r2, [pc, #360]	; (8002178 <EXTI_Init+0x520>)
 800200e:	f023 030f 	bic.w	r3, r3, #15
 8002012:	6113      	str	r3, [r2, #16]
			if(PORTx==GPIOA)     {AFIO->EXTICR3 &=~(0b1111<<0);}
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4a59      	ldr	r2, [pc, #356]	; (800217c <EXTI_Init+0x524>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d106      	bne.n	800202a <EXTI_Init+0x3d2>
 800201c:	4b56      	ldr	r3, [pc, #344]	; (8002178 <EXTI_Init+0x520>)
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	4a55      	ldr	r2, [pc, #340]	; (8002178 <EXTI_Init+0x520>)
 8002022:	f023 030f 	bic.w	r3, r3, #15
 8002026:	6113      	str	r3, [r2, #16]
			else if(PORTx==GPIOB){AFIO->EXTICR3 |= (0b0001<<0);}
			else if(PORTx==GPIOC){AFIO->EXTICR3 |= (0b0010<<0);}
			else if(PORTx==GPIOD){AFIO->EXTICR3 |= (0b0011<<0);}

			break;
 8002028:	e19f      	b.n	800236a <EXTI_Init+0x712>
			else if(PORTx==GPIOB){AFIO->EXTICR3 |= (0b0001<<0);}
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4a54      	ldr	r2, [pc, #336]	; (8002180 <EXTI_Init+0x528>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d106      	bne.n	8002040 <EXTI_Init+0x3e8>
 8002032:	4b51      	ldr	r3, [pc, #324]	; (8002178 <EXTI_Init+0x520>)
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	4a50      	ldr	r2, [pc, #320]	; (8002178 <EXTI_Init+0x520>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6113      	str	r3, [r2, #16]
			break;
 800203e:	e194      	b.n	800236a <EXTI_Init+0x712>
			else if(PORTx==GPIOC){AFIO->EXTICR3 |= (0b0010<<0);}
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4a50      	ldr	r2, [pc, #320]	; (8002184 <EXTI_Init+0x52c>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d106      	bne.n	8002056 <EXTI_Init+0x3fe>
 8002048:	4b4b      	ldr	r3, [pc, #300]	; (8002178 <EXTI_Init+0x520>)
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	4a4a      	ldr	r2, [pc, #296]	; (8002178 <EXTI_Init+0x520>)
 800204e:	f043 0302 	orr.w	r3, r3, #2
 8002052:	6113      	str	r3, [r2, #16]
			break;
 8002054:	e189      	b.n	800236a <EXTI_Init+0x712>
			else if(PORTx==GPIOD){AFIO->EXTICR3 |= (0b0011<<0);}
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4a46      	ldr	r2, [pc, #280]	; (8002174 <EXTI_Init+0x51c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	f040 8185 	bne.w	800236a <EXTI_Init+0x712>
 8002060:	4b45      	ldr	r3, [pc, #276]	; (8002178 <EXTI_Init+0x520>)
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	4a44      	ldr	r2, [pc, #272]	; (8002178 <EXTI_Init+0x520>)
 8002066:	f043 0303 	orr.w	r3, r3, #3
 800206a:	6113      	str	r3, [r2, #16]
			break;
 800206c:	e17d      	b.n	800236a <EXTI_Init+0x712>
		case PIN_9:
			AFIO->EXTICR3 &=~(0b1111<<4);
 800206e:	4b42      	ldr	r3, [pc, #264]	; (8002178 <EXTI_Init+0x520>)
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	4a41      	ldr	r2, [pc, #260]	; (8002178 <EXTI_Init+0x520>)
 8002074:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002078:	6113      	str	r3, [r2, #16]
			if(PORTx==GPIOA)     {AFIO->EXTICR3 &=~(0b1111<<4);}
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4a3f      	ldr	r2, [pc, #252]	; (800217c <EXTI_Init+0x524>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d106      	bne.n	8002090 <EXTI_Init+0x438>
 8002082:	4b3d      	ldr	r3, [pc, #244]	; (8002178 <EXTI_Init+0x520>)
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	4a3c      	ldr	r2, [pc, #240]	; (8002178 <EXTI_Init+0x520>)
 8002088:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800208c:	6113      	str	r3, [r2, #16]
			else if(PORTx==GPIOB){AFIO->EXTICR3 |= (0b0001<<4);}
			else if(PORTx==GPIOC){AFIO->EXTICR3 |= (0b0010<<4);}
			else if(PORTx==GPIOD){AFIO->EXTICR3 |= (0b0011<<4);}

			break;
 800208e:	e16e      	b.n	800236e <EXTI_Init+0x716>
			else if(PORTx==GPIOB){AFIO->EXTICR3 |= (0b0001<<4);}
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4a3b      	ldr	r2, [pc, #236]	; (8002180 <EXTI_Init+0x528>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d106      	bne.n	80020a6 <EXTI_Init+0x44e>
 8002098:	4b37      	ldr	r3, [pc, #220]	; (8002178 <EXTI_Init+0x520>)
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	4a36      	ldr	r2, [pc, #216]	; (8002178 <EXTI_Init+0x520>)
 800209e:	f043 0310 	orr.w	r3, r3, #16
 80020a2:	6113      	str	r3, [r2, #16]
			break;
 80020a4:	e163      	b.n	800236e <EXTI_Init+0x716>
			else if(PORTx==GPIOC){AFIO->EXTICR3 |= (0b0010<<4);}
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4a36      	ldr	r2, [pc, #216]	; (8002184 <EXTI_Init+0x52c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d106      	bne.n	80020bc <EXTI_Init+0x464>
 80020ae:	4b32      	ldr	r3, [pc, #200]	; (8002178 <EXTI_Init+0x520>)
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	4a31      	ldr	r2, [pc, #196]	; (8002178 <EXTI_Init+0x520>)
 80020b4:	f043 0320 	orr.w	r3, r3, #32
 80020b8:	6113      	str	r3, [r2, #16]
			break;
 80020ba:	e158      	b.n	800236e <EXTI_Init+0x716>
			else if(PORTx==GPIOD){AFIO->EXTICR3 |= (0b0011<<4);}
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4a2d      	ldr	r2, [pc, #180]	; (8002174 <EXTI_Init+0x51c>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	f040 8154 	bne.w	800236e <EXTI_Init+0x716>
 80020c6:	4b2c      	ldr	r3, [pc, #176]	; (8002178 <EXTI_Init+0x520>)
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	4a2b      	ldr	r2, [pc, #172]	; (8002178 <EXTI_Init+0x520>)
 80020cc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80020d0:	6113      	str	r3, [r2, #16]
			break;
 80020d2:	e14c      	b.n	800236e <EXTI_Init+0x716>
		case PIN_10:
			AFIO->EXTICR3 &=~(0b1111<<8);
 80020d4:	4b28      	ldr	r3, [pc, #160]	; (8002178 <EXTI_Init+0x520>)
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	4a27      	ldr	r2, [pc, #156]	; (8002178 <EXTI_Init+0x520>)
 80020da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020de:	6113      	str	r3, [r2, #16]
			if(PORTx==GPIOA)     {AFIO->EXTICR3 &=~(0b1111<<8);}
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4a26      	ldr	r2, [pc, #152]	; (800217c <EXTI_Init+0x524>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d106      	bne.n	80020f6 <EXTI_Init+0x49e>
 80020e8:	4b23      	ldr	r3, [pc, #140]	; (8002178 <EXTI_Init+0x520>)
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	4a22      	ldr	r2, [pc, #136]	; (8002178 <EXTI_Init+0x520>)
 80020ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020f2:	6113      	str	r3, [r2, #16]
			else if(PORTx==GPIOB){AFIO->EXTICR3 |= (0b0001<<8);}
			else if(PORTx==GPIOC){AFIO->EXTICR3 |= (0b0010<<8);}
			else if(PORTx==GPIOD){AFIO->EXTICR3 |= (0b0011<<8);}

			break;
 80020f4:	e13d      	b.n	8002372 <EXTI_Init+0x71a>
			else if(PORTx==GPIOB){AFIO->EXTICR3 |= (0b0001<<8);}
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4a21      	ldr	r2, [pc, #132]	; (8002180 <EXTI_Init+0x528>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d106      	bne.n	800210c <EXTI_Init+0x4b4>
 80020fe:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <EXTI_Init+0x520>)
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	4a1d      	ldr	r2, [pc, #116]	; (8002178 <EXTI_Init+0x520>)
 8002104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002108:	6113      	str	r3, [r2, #16]
			break;
 800210a:	e132      	b.n	8002372 <EXTI_Init+0x71a>
			else if(PORTx==GPIOC){AFIO->EXTICR3 |= (0b0010<<8);}
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4a1d      	ldr	r2, [pc, #116]	; (8002184 <EXTI_Init+0x52c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d106      	bne.n	8002122 <EXTI_Init+0x4ca>
 8002114:	4b18      	ldr	r3, [pc, #96]	; (8002178 <EXTI_Init+0x520>)
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	4a17      	ldr	r2, [pc, #92]	; (8002178 <EXTI_Init+0x520>)
 800211a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800211e:	6113      	str	r3, [r2, #16]
			break;
 8002120:	e127      	b.n	8002372 <EXTI_Init+0x71a>
			else if(PORTx==GPIOD){AFIO->EXTICR3 |= (0b0011<<8);}
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4a13      	ldr	r2, [pc, #76]	; (8002174 <EXTI_Init+0x51c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	f040 8123 	bne.w	8002372 <EXTI_Init+0x71a>
 800212c:	4b12      	ldr	r3, [pc, #72]	; (8002178 <EXTI_Init+0x520>)
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	4a11      	ldr	r2, [pc, #68]	; (8002178 <EXTI_Init+0x520>)
 8002132:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002136:	6113      	str	r3, [r2, #16]
			break;
 8002138:	e11b      	b.n	8002372 <EXTI_Init+0x71a>
		case PIN_11:
			AFIO->EXTICR3 &=~(0b1111<<12);
 800213a:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <EXTI_Init+0x520>)
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	4a0e      	ldr	r2, [pc, #56]	; (8002178 <EXTI_Init+0x520>)
 8002140:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002144:	6113      	str	r3, [r2, #16]
			if(PORTx==GPIOA)     {AFIO->EXTICR3 &=~(0b1111<<12);}
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4a0c      	ldr	r2, [pc, #48]	; (800217c <EXTI_Init+0x524>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d106      	bne.n	800215c <EXTI_Init+0x504>
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <EXTI_Init+0x520>)
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	4a09      	ldr	r2, [pc, #36]	; (8002178 <EXTI_Init+0x520>)
 8002154:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002158:	6113      	str	r3, [r2, #16]
			else if(PORTx==GPIOB){AFIO->EXTICR3 |= (0b0001<<12);}
			else if(PORTx==GPIOC){AFIO->EXTICR3 |= (0b0010<<12);}
			else if(PORTx==GPIOD){AFIO->EXTICR3 |= (0b0011<<12);}

			break;
 800215a:	e10c      	b.n	8002376 <EXTI_Init+0x71e>
			else if(PORTx==GPIOB){AFIO->EXTICR3 |= (0b0001<<12);}
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4a08      	ldr	r2, [pc, #32]	; (8002180 <EXTI_Init+0x528>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d111      	bne.n	8002188 <EXTI_Init+0x530>
 8002164:	4b04      	ldr	r3, [pc, #16]	; (8002178 <EXTI_Init+0x520>)
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	4a03      	ldr	r2, [pc, #12]	; (8002178 <EXTI_Init+0x520>)
 800216a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800216e:	6113      	str	r3, [r2, #16]
			break;
 8002170:	e101      	b.n	8002376 <EXTI_Init+0x71e>
 8002172:	bf00      	nop
 8002174:	40011400 	.word	0x40011400
 8002178:	40010000 	.word	0x40010000
 800217c:	40010800 	.word	0x40010800
 8002180:	40010c00 	.word	0x40010c00
 8002184:	40011000 	.word	0x40011000
			else if(PORTx==GPIOC){AFIO->EXTICR3 |= (0b0010<<12);}
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4a98      	ldr	r2, [pc, #608]	; (80023ec <EXTI_Init+0x794>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d106      	bne.n	800219e <EXTI_Init+0x546>
 8002190:	4b97      	ldr	r3, [pc, #604]	; (80023f0 <EXTI_Init+0x798>)
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	4a96      	ldr	r2, [pc, #600]	; (80023f0 <EXTI_Init+0x798>)
 8002196:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800219a:	6113      	str	r3, [r2, #16]
			break;
 800219c:	e0eb      	b.n	8002376 <EXTI_Init+0x71e>
			else if(PORTx==GPIOD){AFIO->EXTICR3 |= (0b0011<<12);}
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4a94      	ldr	r2, [pc, #592]	; (80023f4 <EXTI_Init+0x79c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	f040 80e7 	bne.w	8002376 <EXTI_Init+0x71e>
 80021a8:	4b91      	ldr	r3, [pc, #580]	; (80023f0 <EXTI_Init+0x798>)
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	4a90      	ldr	r2, [pc, #576]	; (80023f0 <EXTI_Init+0x798>)
 80021ae:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80021b2:	6113      	str	r3, [r2, #16]
			break;
 80021b4:	e0df      	b.n	8002376 <EXTI_Init+0x71e>
			//			0000: PA[x] pin
			//			0001: PB[x] pin
			//			0010: PC[x] pin
			//			0011: PD[x] pin
		case PIN_12:
			AFIO->EXTICR4 &=~(0b1111<<0);
 80021b6:	4b8e      	ldr	r3, [pc, #568]	; (80023f0 <EXTI_Init+0x798>)
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	4a8d      	ldr	r2, [pc, #564]	; (80023f0 <EXTI_Init+0x798>)
 80021bc:	f023 030f 	bic.w	r3, r3, #15
 80021c0:	6153      	str	r3, [r2, #20]
			if(PORTx==GPIOA)     {AFIO->EXTICR4 &=~(0b1111<<0);}
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4a8c      	ldr	r2, [pc, #560]	; (80023f8 <EXTI_Init+0x7a0>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d106      	bne.n	80021d8 <EXTI_Init+0x580>
 80021ca:	4b89      	ldr	r3, [pc, #548]	; (80023f0 <EXTI_Init+0x798>)
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	4a88      	ldr	r2, [pc, #544]	; (80023f0 <EXTI_Init+0x798>)
 80021d0:	f023 030f 	bic.w	r3, r3, #15
 80021d4:	6153      	str	r3, [r2, #20]
			else if(PORTx==GPIOB){AFIO->EXTICR4 |= (0b0001<<0);}
			else if(PORTx==GPIOC){AFIO->EXTICR4 |= (0b0010<<0);}
			else if(PORTx==GPIOD){AFIO->EXTICR4 |= (0b0011<<0);}

			break;
 80021d6:	e0d0      	b.n	800237a <EXTI_Init+0x722>
			else if(PORTx==GPIOB){AFIO->EXTICR4 |= (0b0001<<0);}
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4a88      	ldr	r2, [pc, #544]	; (80023fc <EXTI_Init+0x7a4>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d106      	bne.n	80021ee <EXTI_Init+0x596>
 80021e0:	4b83      	ldr	r3, [pc, #524]	; (80023f0 <EXTI_Init+0x798>)
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	4a82      	ldr	r2, [pc, #520]	; (80023f0 <EXTI_Init+0x798>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	6153      	str	r3, [r2, #20]
			break;
 80021ec:	e0c5      	b.n	800237a <EXTI_Init+0x722>
			else if(PORTx==GPIOC){AFIO->EXTICR4 |= (0b0010<<0);}
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4a7e      	ldr	r2, [pc, #504]	; (80023ec <EXTI_Init+0x794>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d106      	bne.n	8002204 <EXTI_Init+0x5ac>
 80021f6:	4b7e      	ldr	r3, [pc, #504]	; (80023f0 <EXTI_Init+0x798>)
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	4a7d      	ldr	r2, [pc, #500]	; (80023f0 <EXTI_Init+0x798>)
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	6153      	str	r3, [r2, #20]
			break;
 8002202:	e0ba      	b.n	800237a <EXTI_Init+0x722>
			else if(PORTx==GPIOD){AFIO->EXTICR4 |= (0b0011<<0);}
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4a7b      	ldr	r2, [pc, #492]	; (80023f4 <EXTI_Init+0x79c>)
 8002208:	4293      	cmp	r3, r2
 800220a:	f040 80b6 	bne.w	800237a <EXTI_Init+0x722>
 800220e:	4b78      	ldr	r3, [pc, #480]	; (80023f0 <EXTI_Init+0x798>)
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	4a77      	ldr	r2, [pc, #476]	; (80023f0 <EXTI_Init+0x798>)
 8002214:	f043 0303 	orr.w	r3, r3, #3
 8002218:	6153      	str	r3, [r2, #20]
			break;
 800221a:	e0ae      	b.n	800237a <EXTI_Init+0x722>
		case PIN_13:
			AFIO->EXTICR4 &=~(0b1111<<4);
 800221c:	4b74      	ldr	r3, [pc, #464]	; (80023f0 <EXTI_Init+0x798>)
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	4a73      	ldr	r2, [pc, #460]	; (80023f0 <EXTI_Init+0x798>)
 8002222:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002226:	6153      	str	r3, [r2, #20]
			if(PORTx==GPIOA)     {AFIO->EXTICR4 &=~(0b1111<<4);}
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4a73      	ldr	r2, [pc, #460]	; (80023f8 <EXTI_Init+0x7a0>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d106      	bne.n	800223e <EXTI_Init+0x5e6>
 8002230:	4b6f      	ldr	r3, [pc, #444]	; (80023f0 <EXTI_Init+0x798>)
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	4a6e      	ldr	r2, [pc, #440]	; (80023f0 <EXTI_Init+0x798>)
 8002236:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800223a:	6153      	str	r3, [r2, #20]
			else if(PORTx==GPIOB){AFIO->EXTICR4 |= (0b0001<<4);}
			else if(PORTx==GPIOC){AFIO->EXTICR4 |= (0b0010<<4);}
			else if(PORTx==GPIOD){AFIO->EXTICR4 |= (0b0011<<4);}

			break;
 800223c:	e09f      	b.n	800237e <EXTI_Init+0x726>
			else if(PORTx==GPIOB){AFIO->EXTICR4 |= (0b0001<<4);}
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4a6e      	ldr	r2, [pc, #440]	; (80023fc <EXTI_Init+0x7a4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d106      	bne.n	8002254 <EXTI_Init+0x5fc>
 8002246:	4b6a      	ldr	r3, [pc, #424]	; (80023f0 <EXTI_Init+0x798>)
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	4a69      	ldr	r2, [pc, #420]	; (80023f0 <EXTI_Init+0x798>)
 800224c:	f043 0310 	orr.w	r3, r3, #16
 8002250:	6153      	str	r3, [r2, #20]
			break;
 8002252:	e094      	b.n	800237e <EXTI_Init+0x726>
			else if(PORTx==GPIOC){AFIO->EXTICR4 |= (0b0010<<4);}
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4a65      	ldr	r2, [pc, #404]	; (80023ec <EXTI_Init+0x794>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d106      	bne.n	800226a <EXTI_Init+0x612>
 800225c:	4b64      	ldr	r3, [pc, #400]	; (80023f0 <EXTI_Init+0x798>)
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	4a63      	ldr	r2, [pc, #396]	; (80023f0 <EXTI_Init+0x798>)
 8002262:	f043 0320 	orr.w	r3, r3, #32
 8002266:	6153      	str	r3, [r2, #20]
			break;
 8002268:	e089      	b.n	800237e <EXTI_Init+0x726>
			else if(PORTx==GPIOD){AFIO->EXTICR4 |= (0b0011<<4);}
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4a61      	ldr	r2, [pc, #388]	; (80023f4 <EXTI_Init+0x79c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	f040 8085 	bne.w	800237e <EXTI_Init+0x726>
 8002274:	4b5e      	ldr	r3, [pc, #376]	; (80023f0 <EXTI_Init+0x798>)
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	4a5d      	ldr	r2, [pc, #372]	; (80023f0 <EXTI_Init+0x798>)
 800227a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800227e:	6153      	str	r3, [r2, #20]
			break;
 8002280:	e07d      	b.n	800237e <EXTI_Init+0x726>
		case PIN_14:
			AFIO->EXTICR4 &=~(0b1111<<8);
 8002282:	4b5b      	ldr	r3, [pc, #364]	; (80023f0 <EXTI_Init+0x798>)
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	4a5a      	ldr	r2, [pc, #360]	; (80023f0 <EXTI_Init+0x798>)
 8002288:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800228c:	6153      	str	r3, [r2, #20]
			if(PORTx==GPIOA)     {AFIO->EXTICR4 &=~(0b1111<<8);}
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4a59      	ldr	r2, [pc, #356]	; (80023f8 <EXTI_Init+0x7a0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d106      	bne.n	80022a4 <EXTI_Init+0x64c>
 8002296:	4b56      	ldr	r3, [pc, #344]	; (80023f0 <EXTI_Init+0x798>)
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	4a55      	ldr	r2, [pc, #340]	; (80023f0 <EXTI_Init+0x798>)
 800229c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022a0:	6153      	str	r3, [r2, #20]
			else if(PORTx==GPIOB){AFIO->EXTICR4 |= (0b0001<<8);}
			else if(PORTx==GPIOC){AFIO->EXTICR4 |= (0b0010<<8);}
			else if(PORTx==GPIOD){AFIO->EXTICR4 |= (0b0011<<8);}

			break;
 80022a2:	e06e      	b.n	8002382 <EXTI_Init+0x72a>
			else if(PORTx==GPIOB){AFIO->EXTICR4 |= (0b0001<<8);}
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4a55      	ldr	r2, [pc, #340]	; (80023fc <EXTI_Init+0x7a4>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d106      	bne.n	80022ba <EXTI_Init+0x662>
 80022ac:	4b50      	ldr	r3, [pc, #320]	; (80023f0 <EXTI_Init+0x798>)
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	4a4f      	ldr	r2, [pc, #316]	; (80023f0 <EXTI_Init+0x798>)
 80022b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b6:	6153      	str	r3, [r2, #20]
			break;
 80022b8:	e063      	b.n	8002382 <EXTI_Init+0x72a>
			else if(PORTx==GPIOC){AFIO->EXTICR4 |= (0b0010<<8);}
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4a4b      	ldr	r2, [pc, #300]	; (80023ec <EXTI_Init+0x794>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d106      	bne.n	80022d0 <EXTI_Init+0x678>
 80022c2:	4b4b      	ldr	r3, [pc, #300]	; (80023f0 <EXTI_Init+0x798>)
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	4a4a      	ldr	r2, [pc, #296]	; (80023f0 <EXTI_Init+0x798>)
 80022c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022cc:	6153      	str	r3, [r2, #20]
			break;
 80022ce:	e058      	b.n	8002382 <EXTI_Init+0x72a>
			else if(PORTx==GPIOD){AFIO->EXTICR4 |= (0b0011<<8);}
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4a48      	ldr	r2, [pc, #288]	; (80023f4 <EXTI_Init+0x79c>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d154      	bne.n	8002382 <EXTI_Init+0x72a>
 80022d8:	4b45      	ldr	r3, [pc, #276]	; (80023f0 <EXTI_Init+0x798>)
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	4a44      	ldr	r2, [pc, #272]	; (80023f0 <EXTI_Init+0x798>)
 80022de:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80022e2:	6153      	str	r3, [r2, #20]
			break;
 80022e4:	e04d      	b.n	8002382 <EXTI_Init+0x72a>
		case PIN_15:
			AFIO->EXTICR4 &=~(0b1111<<12);
 80022e6:	4b42      	ldr	r3, [pc, #264]	; (80023f0 <EXTI_Init+0x798>)
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	4a41      	ldr	r2, [pc, #260]	; (80023f0 <EXTI_Init+0x798>)
 80022ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80022f0:	6153      	str	r3, [r2, #20]
			if(PORTx==GPIOA)     {AFIO->EXTICR4 &=~(0b1111<<12);}
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	4a40      	ldr	r2, [pc, #256]	; (80023f8 <EXTI_Init+0x7a0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d106      	bne.n	8002308 <EXTI_Init+0x6b0>
 80022fa:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <EXTI_Init+0x798>)
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	4a3c      	ldr	r2, [pc, #240]	; (80023f0 <EXTI_Init+0x798>)
 8002300:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002304:	6153      	str	r3, [r2, #20]
			else if(PORTx==GPIOB){AFIO->EXTICR4 |= (0b0001<<12);}
			else if(PORTx==GPIOC){AFIO->EXTICR4 |= (0b0010<<12);}
			else if(PORTx==GPIOD){AFIO->EXTICR4 |= (0b0011<<12);}

			break;
 8002306:	e03e      	b.n	8002386 <EXTI_Init+0x72e>
			else if(PORTx==GPIOB){AFIO->EXTICR4 |= (0b0001<<12);}
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4a3c      	ldr	r2, [pc, #240]	; (80023fc <EXTI_Init+0x7a4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d106      	bne.n	800231e <EXTI_Init+0x6c6>
 8002310:	4b37      	ldr	r3, [pc, #220]	; (80023f0 <EXTI_Init+0x798>)
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	4a36      	ldr	r2, [pc, #216]	; (80023f0 <EXTI_Init+0x798>)
 8002316:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800231a:	6153      	str	r3, [r2, #20]
			break;
 800231c:	e033      	b.n	8002386 <EXTI_Init+0x72e>
			else if(PORTx==GPIOC){AFIO->EXTICR4 |= (0b0010<<12);}
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	4a32      	ldr	r2, [pc, #200]	; (80023ec <EXTI_Init+0x794>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d106      	bne.n	8002334 <EXTI_Init+0x6dc>
 8002326:	4b32      	ldr	r3, [pc, #200]	; (80023f0 <EXTI_Init+0x798>)
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	4a31      	ldr	r2, [pc, #196]	; (80023f0 <EXTI_Init+0x798>)
 800232c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002330:	6153      	str	r3, [r2, #20]
			break;
 8002332:	e028      	b.n	8002386 <EXTI_Init+0x72e>
			else if(PORTx==GPIOD){AFIO->EXTICR4 |= (0b0011<<12);}
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4a2f      	ldr	r2, [pc, #188]	; (80023f4 <EXTI_Init+0x79c>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d124      	bne.n	8002386 <EXTI_Init+0x72e>
 800233c:	4b2c      	ldr	r3, [pc, #176]	; (80023f0 <EXTI_Init+0x798>)
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	4a2b      	ldr	r2, [pc, #172]	; (80023f0 <EXTI_Init+0x798>)
 8002342:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002346:	6153      	str	r3, [r2, #20]
			break;
 8002348:	e01d      	b.n	8002386 <EXTI_Init+0x72e>
			break;
 800234a:	bf00      	nop
 800234c:	e01c      	b.n	8002388 <EXTI_Init+0x730>
			break;
 800234e:	bf00      	nop
 8002350:	e01a      	b.n	8002388 <EXTI_Init+0x730>
			break;
 8002352:	bf00      	nop
 8002354:	e018      	b.n	8002388 <EXTI_Init+0x730>
			break;
 8002356:	bf00      	nop
 8002358:	e016      	b.n	8002388 <EXTI_Init+0x730>
			break;
 800235a:	bf00      	nop
 800235c:	e014      	b.n	8002388 <EXTI_Init+0x730>
			break;
 800235e:	bf00      	nop
 8002360:	e012      	b.n	8002388 <EXTI_Init+0x730>
			break;
 8002362:	bf00      	nop
 8002364:	e010      	b.n	8002388 <EXTI_Init+0x730>
			break;
 8002366:	bf00      	nop
 8002368:	e00e      	b.n	8002388 <EXTI_Init+0x730>
			break;
 800236a:	bf00      	nop
 800236c:	e00c      	b.n	8002388 <EXTI_Init+0x730>
			break;
 800236e:	bf00      	nop
 8002370:	e00a      	b.n	8002388 <EXTI_Init+0x730>
			break;
 8002372:	bf00      	nop
 8002374:	e008      	b.n	8002388 <EXTI_Init+0x730>
			break;
 8002376:	bf00      	nop
 8002378:	e006      	b.n	8002388 <EXTI_Init+0x730>
			break;
 800237a:	bf00      	nop
 800237c:	e004      	b.n	8002388 <EXTI_Init+0x730>
			break;
 800237e:	bf00      	nop
 8002380:	e002      	b.n	8002388 <EXTI_Init+0x730>
			break;
 8002382:	bf00      	nop
 8002384:	e000      	b.n	8002388 <EXTI_Init+0x730>
			break;
 8002386:	bf00      	nop
		}
	//================================================
	//3- Update Rising or Falling Register
	EXTI->RTSR &=~(1<<pin);
 8002388:	4b1d      	ldr	r3, [pc, #116]	; (8002400 <EXTI_Init+0x7a8>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	897a      	ldrh	r2, [r7, #10]
 800238e:	2101      	movs	r1, #1
 8002390:	fa01 f202 	lsl.w	r2, r1, r2
 8002394:	43d2      	mvns	r2, r2
 8002396:	4611      	mov	r1, r2
 8002398:	4a19      	ldr	r2, [pc, #100]	; (8002400 <EXTI_Init+0x7a8>)
 800239a:	400b      	ands	r3, r1
 800239c:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &=~(1<<pin);
 800239e:	4b18      	ldr	r3, [pc, #96]	; (8002400 <EXTI_Init+0x7a8>)
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	897a      	ldrh	r2, [r7, #10]
 80023a4:	2101      	movs	r1, #1
 80023a6:	fa01 f202 	lsl.w	r2, r1, r2
 80023aa:	43d2      	mvns	r2, r2
 80023ac:	4611      	mov	r1, r2
 80023ae:	4a14      	ldr	r2, [pc, #80]	; (8002400 <EXTI_Init+0x7a8>)
 80023b0:	400b      	ands	r3, r1
 80023b2:	60d3      	str	r3, [r2, #12]
	if(triggercase == EXTI_Trigger_Rising){
 80023b4:	893b      	ldrh	r3, [r7, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10a      	bne.n	80023d0 <EXTI_Init+0x778>
		EXTI->RTSR |= (1<<pin);
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <EXTI_Init+0x7a8>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	897a      	ldrh	r2, [r7, #10]
 80023c0:	2101      	movs	r1, #1
 80023c2:	fa01 f202 	lsl.w	r2, r1, r2
 80023c6:	4611      	mov	r1, r2
 80023c8:	4a0d      	ldr	r2, [pc, #52]	; (8002400 <EXTI_Init+0x7a8>)
 80023ca:	430b      	orrs	r3, r1
 80023cc:	6093      	str	r3, [r2, #8]
 80023ce:	e02d      	b.n	800242c <EXTI_Init+0x7d4>
	}
	else if(triggercase == EXTI_Trigger_Falling){
 80023d0:	893b      	ldrh	r3, [r7, #8]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d116      	bne.n	8002404 <EXTI_Init+0x7ac>
		EXTI->FTSR |= (1<<pin);
 80023d6:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <EXTI_Init+0x7a8>)
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	897a      	ldrh	r2, [r7, #10]
 80023dc:	2101      	movs	r1, #1
 80023de:	fa01 f202 	lsl.w	r2, r1, r2
 80023e2:	4611      	mov	r1, r2
 80023e4:	4a06      	ldr	r2, [pc, #24]	; (8002400 <EXTI_Init+0x7a8>)
 80023e6:	430b      	orrs	r3, r1
 80023e8:	60d3      	str	r3, [r2, #12]
 80023ea:	e01f      	b.n	800242c <EXTI_Init+0x7d4>
 80023ec:	40011000 	.word	0x40011000
 80023f0:	40010000 	.word	0x40010000
 80023f4:	40011400 	.word	0x40011400
 80023f8:	40010800 	.word	0x40010800
 80023fc:	40010c00 	.word	0x40010c00
 8002400:	40010400 	.word	0x40010400
	}
	else{
		EXTI->RTSR |= (1<<pin);
 8002404:	4b15      	ldr	r3, [pc, #84]	; (800245c <EXTI_Init+0x804>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	897a      	ldrh	r2, [r7, #10]
 800240a:	2101      	movs	r1, #1
 800240c:	fa01 f202 	lsl.w	r2, r1, r2
 8002410:	4611      	mov	r1, r2
 8002412:	4a12      	ldr	r2, [pc, #72]	; (800245c <EXTI_Init+0x804>)
 8002414:	430b      	orrs	r3, r1
 8002416:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<<pin);
 8002418:	4b10      	ldr	r3, [pc, #64]	; (800245c <EXTI_Init+0x804>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	897a      	ldrh	r2, [r7, #10]
 800241e:	2101      	movs	r1, #1
 8002420:	fa01 f202 	lsl.w	r2, r1, r2
 8002424:	4611      	mov	r1, r2
 8002426:	4a0d      	ldr	r2, [pc, #52]	; (800245c <EXTI_Init+0x804>)
 8002428:	430b      	orrs	r3, r1
 800242a:	60d3      	str	r3, [r2, #12]
	}
	//4- Update IRQ Handling callback
	GP_IRQ_Callback[pin] =function_addres;
 800242c:	897b      	ldrh	r3, [r7, #10]
 800242e:	490c      	ldr	r1, [pc, #48]	; (8002460 <EXTI_Init+0x808>)
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


	EXTI->IMR |=(1<<pin);
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <EXTI_Init+0x804>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	897a      	ldrh	r2, [r7, #10]
 800243c:	2101      	movs	r1, #1
 800243e:	fa01 f202 	lsl.w	r2, r1, r2
 8002442:	4611      	mov	r1, r2
 8002444:	4a05      	ldr	r2, [pc, #20]	; (800245c <EXTI_Init+0x804>)
 8002446:	430b      	orrs	r3, r1
 8002448:	6013      	str	r3, [r2, #0]

	Enable_NVIC(pin);
 800244a:	897b      	ldrh	r3, [r7, #10]
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff fb9d 	bl	8001b8c <Enable_NVIC>
}
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40010400 	.word	0x40010400
 8002460:	20000110 	.word	0x20000110

08002464 <EXTI0_IRQHandler>:



void EXTI0_IRQHandler(void){
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
	// clear bit in pending register (EXTI_PR)
	EXTI->PR |= (1<<0);
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <EXTI0_IRQHandler+0x1c>)
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	4a04      	ldr	r2, [pc, #16]	; (8002480 <EXTI0_IRQHandler+0x1c>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[0]();
 8002474:	4b03      	ldr	r3, [pc, #12]	; (8002484 <EXTI0_IRQHandler+0x20>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4798      	blx	r3
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40010400 	.word	0x40010400
 8002484:	20000110 	.word	0x20000110

08002488 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<1);
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <EXTI1_IRQHandler+0x1c>)
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	4a04      	ldr	r2, [pc, #16]	; (80024a4 <EXTI1_IRQHandler+0x1c>)
 8002492:	f043 0302 	orr.w	r3, r3, #2
 8002496:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[1]();
 8002498:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <EXTI1_IRQHandler+0x20>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	4798      	blx	r3

}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40010400 	.word	0x40010400
 80024a8:	20000110 	.word	0x20000110

080024ac <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<2);
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <EXTI2_IRQHandler+0x1c>)
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	4a04      	ldr	r2, [pc, #16]	; (80024c8 <EXTI2_IRQHandler+0x1c>)
 80024b6:	f043 0304 	orr.w	r3, r3, #4
 80024ba:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[2]();
 80024bc:	4b03      	ldr	r3, [pc, #12]	; (80024cc <EXTI2_IRQHandler+0x20>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	4798      	blx	r3
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40010400 	.word	0x40010400
 80024cc:	20000110 	.word	0x20000110

080024d0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<3);
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <EXTI3_IRQHandler+0x1c>)
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	4a04      	ldr	r2, [pc, #16]	; (80024ec <EXTI3_IRQHandler+0x1c>)
 80024da:	f043 0308 	orr.w	r3, r3, #8
 80024de:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[3]();
 80024e0:	4b03      	ldr	r3, [pc, #12]	; (80024f0 <EXTI3_IRQHandler+0x20>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	4798      	blx	r3
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40010400 	.word	0x40010400
 80024f0:	20000110 	.word	0x20000110

080024f4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<4);
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <EXTI4_IRQHandler+0x1c>)
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	4a04      	ldr	r2, [pc, #16]	; (8002510 <EXTI4_IRQHandler+0x1c>)
 80024fe:	f043 0310 	orr.w	r3, r3, #16
 8002502:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[4]();
 8002504:	4b03      	ldr	r3, [pc, #12]	; (8002514 <EXTI4_IRQHandler+0x20>)
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	4798      	blx	r3
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40010400 	.word	0x40010400
 8002514:	20000110 	.word	0x20000110

08002518 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<5)) {EXTI->PR |= (1<<5); GP_IRQ_Callback[5]();  }
 800251c:	4b26      	ldr	r3, [pc, #152]	; (80025b8 <EXTI9_5_IRQHandler+0xa0>)
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	f003 0320 	and.w	r3, r3, #32
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <EXTI9_5_IRQHandler+0x22>
 8002528:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <EXTI9_5_IRQHandler+0xa0>)
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	4a22      	ldr	r2, [pc, #136]	; (80025b8 <EXTI9_5_IRQHandler+0xa0>)
 800252e:	f043 0320 	orr.w	r3, r3, #32
 8002532:	6153      	str	r3, [r2, #20]
 8002534:	4b21      	ldr	r3, [pc, #132]	; (80025bc <EXTI9_5_IRQHandler+0xa4>)
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	4798      	blx	r3
	if(EXTI->PR & (1<<6)) {EXTI->PR |= (1<<6); GP_IRQ_Callback[6]();  }
 800253a:	4b1f      	ldr	r3, [pc, #124]	; (80025b8 <EXTI9_5_IRQHandler+0xa0>)
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002542:	2b00      	cmp	r3, #0
 8002544:	d008      	beq.n	8002558 <EXTI9_5_IRQHandler+0x40>
 8002546:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <EXTI9_5_IRQHandler+0xa0>)
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	4a1b      	ldr	r2, [pc, #108]	; (80025b8 <EXTI9_5_IRQHandler+0xa0>)
 800254c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002550:	6153      	str	r3, [r2, #20]
 8002552:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <EXTI9_5_IRQHandler+0xa4>)
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	4798      	blx	r3
	if(EXTI->PR & (1<<7)) {EXTI->PR |= (1<<7); GP_IRQ_Callback[7]();  }
 8002558:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <EXTI9_5_IRQHandler+0xa0>)
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <EXTI9_5_IRQHandler+0x5e>
 8002564:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <EXTI9_5_IRQHandler+0xa0>)
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	4a13      	ldr	r2, [pc, #76]	; (80025b8 <EXTI9_5_IRQHandler+0xa0>)
 800256a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800256e:	6153      	str	r3, [r2, #20]
 8002570:	4b12      	ldr	r3, [pc, #72]	; (80025bc <EXTI9_5_IRQHandler+0xa4>)
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	4798      	blx	r3
	if(EXTI->PR & (1<<8)) {EXTI->PR |= (1<<8); GP_IRQ_Callback[8]();  }
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <EXTI9_5_IRQHandler+0xa0>)
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <EXTI9_5_IRQHandler+0x7c>
 8002582:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <EXTI9_5_IRQHandler+0xa0>)
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	4a0c      	ldr	r2, [pc, #48]	; (80025b8 <EXTI9_5_IRQHandler+0xa0>)
 8002588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258c:	6153      	str	r3, [r2, #20]
 800258e:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <EXTI9_5_IRQHandler+0xa4>)
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	4798      	blx	r3
	if(EXTI->PR & (1<<9)) {EXTI->PR |= (1<<9); GP_IRQ_Callback[9]();  }
 8002594:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <EXTI9_5_IRQHandler+0xa0>)
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <EXTI9_5_IRQHandler+0x9a>
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <EXTI9_5_IRQHandler+0xa0>)
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <EXTI9_5_IRQHandler+0xa0>)
 80025a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025aa:	6153      	str	r3, [r2, #20]
 80025ac:	4b03      	ldr	r3, [pc, #12]	; (80025bc <EXTI9_5_IRQHandler+0xa4>)
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	4798      	blx	r3
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40010400 	.word	0x40010400
 80025bc:	20000110 	.word	0x20000110

080025c0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<10)) {EXTI->PR |= (1<<10); GP_IRQ_Callback[10]();  }
 80025c4:	4b2d      	ldr	r3, [pc, #180]	; (800267c <EXTI15_10_IRQHandler+0xbc>)
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d008      	beq.n	80025e2 <EXTI15_10_IRQHandler+0x22>
 80025d0:	4b2a      	ldr	r3, [pc, #168]	; (800267c <EXTI15_10_IRQHandler+0xbc>)
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	4a29      	ldr	r2, [pc, #164]	; (800267c <EXTI15_10_IRQHandler+0xbc>)
 80025d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025da:	6153      	str	r3, [r2, #20]
 80025dc:	4b28      	ldr	r3, [pc, #160]	; (8002680 <EXTI15_10_IRQHandler+0xc0>)
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	4798      	blx	r3
	if(EXTI->PR & (1<<11)) {EXTI->PR |= (1<<11); GP_IRQ_Callback[11]();  }
 80025e2:	4b26      	ldr	r3, [pc, #152]	; (800267c <EXTI15_10_IRQHandler+0xbc>)
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d008      	beq.n	8002600 <EXTI15_10_IRQHandler+0x40>
 80025ee:	4b23      	ldr	r3, [pc, #140]	; (800267c <EXTI15_10_IRQHandler+0xbc>)
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	4a22      	ldr	r2, [pc, #136]	; (800267c <EXTI15_10_IRQHandler+0xbc>)
 80025f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025f8:	6153      	str	r3, [r2, #20]
 80025fa:	4b21      	ldr	r3, [pc, #132]	; (8002680 <EXTI15_10_IRQHandler+0xc0>)
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	4798      	blx	r3
	if(EXTI->PR & (1<<12)) {EXTI->PR |= (1<<12); GP_IRQ_Callback[12]();  }
 8002600:	4b1e      	ldr	r3, [pc, #120]	; (800267c <EXTI15_10_IRQHandler+0xbc>)
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <EXTI15_10_IRQHandler+0x5e>
 800260c:	4b1b      	ldr	r3, [pc, #108]	; (800267c <EXTI15_10_IRQHandler+0xbc>)
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	4a1a      	ldr	r2, [pc, #104]	; (800267c <EXTI15_10_IRQHandler+0xbc>)
 8002612:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002616:	6153      	str	r3, [r2, #20]
 8002618:	4b19      	ldr	r3, [pc, #100]	; (8002680 <EXTI15_10_IRQHandler+0xc0>)
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	4798      	blx	r3
	if(EXTI->PR & (1<<13)) {EXTI->PR |= (1<<13); GP_IRQ_Callback[13]();  }
 800261e:	4b17      	ldr	r3, [pc, #92]	; (800267c <EXTI15_10_IRQHandler+0xbc>)
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d008      	beq.n	800263c <EXTI15_10_IRQHandler+0x7c>
 800262a:	4b14      	ldr	r3, [pc, #80]	; (800267c <EXTI15_10_IRQHandler+0xbc>)
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	4a13      	ldr	r2, [pc, #76]	; (800267c <EXTI15_10_IRQHandler+0xbc>)
 8002630:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002634:	6153      	str	r3, [r2, #20]
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <EXTI15_10_IRQHandler+0xc0>)
 8002638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263a:	4798      	blx	r3
	if(EXTI->PR & (1<<14)) {EXTI->PR |= (1<<14); GP_IRQ_Callback[14]();  }
 800263c:	4b0f      	ldr	r3, [pc, #60]	; (800267c <EXTI15_10_IRQHandler+0xbc>)
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d008      	beq.n	800265a <EXTI15_10_IRQHandler+0x9a>
 8002648:	4b0c      	ldr	r3, [pc, #48]	; (800267c <EXTI15_10_IRQHandler+0xbc>)
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	4a0b      	ldr	r2, [pc, #44]	; (800267c <EXTI15_10_IRQHandler+0xbc>)
 800264e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002652:	6153      	str	r3, [r2, #20]
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <EXTI15_10_IRQHandler+0xc0>)
 8002656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002658:	4798      	blx	r3
	if(EXTI->PR & (1<<15)) {EXTI->PR |= (1<<15); GP_IRQ_Callback[15]();  }
 800265a:	4b08      	ldr	r3, [pc, #32]	; (800267c <EXTI15_10_IRQHandler+0xbc>)
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d008      	beq.n	8002678 <EXTI15_10_IRQHandler+0xb8>
 8002666:	4b05      	ldr	r3, [pc, #20]	; (800267c <EXTI15_10_IRQHandler+0xbc>)
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	4a04      	ldr	r2, [pc, #16]	; (800267c <EXTI15_10_IRQHandler+0xbc>)
 800266c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002670:	6153      	str	r3, [r2, #20]
 8002672:	4b03      	ldr	r3, [pc, #12]	; (8002680 <EXTI15_10_IRQHandler+0xc0>)
 8002674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002676:	4798      	blx	r3

}
 8002678:	bf00      	nop
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40010400 	.word	0x40010400
 8002680:	20000110 	.word	0x20000110

08002684 <MCAL_RCC_Peripherals_enable>:
 * @param[out] 	-none
 * @retval		-none
 * Note			-none
 */
void MCAL_RCC_Peripherals_enable(RCC_Buses_t bus , uint16_t peripheral , uint8_t status)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	71fb      	strb	r3, [r7, #7]
 800268e:	460b      	mov	r3, r1
 8002690:	80bb      	strh	r3, [r7, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	71bb      	strb	r3, [r7, #6]
	switch(bus)
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d01a      	beq.n	80026d2 <MCAL_RCC_Peripherals_enable+0x4e>
 800269c:	2b02      	cmp	r3, #2
 800269e:	d02e      	beq.n	80026fe <MCAL_RCC_Peripherals_enable+0x7a>
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d000      	beq.n	80026a6 <MCAL_RCC_Peripherals_enable+0x22>
		RCC->APB2ENR |=  (status << peripheral);
	}
	break ;
	}

}
 80026a4:	e041      	b.n	800272a <MCAL_RCC_Peripherals_enable+0xa6>
		RCC->AHBENR &=~ (status << peripheral);
 80026a6:	4b23      	ldr	r3, [pc, #140]	; (8002734 <MCAL_RCC_Peripherals_enable+0xb0>)
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	79b9      	ldrb	r1, [r7, #6]
 80026ac:	88ba      	ldrh	r2, [r7, #4]
 80026ae:	fa01 f202 	lsl.w	r2, r1, r2
 80026b2:	43d2      	mvns	r2, r2
 80026b4:	4611      	mov	r1, r2
 80026b6:	4a1f      	ldr	r2, [pc, #124]	; (8002734 <MCAL_RCC_Peripherals_enable+0xb0>)
 80026b8:	400b      	ands	r3, r1
 80026ba:	6153      	str	r3, [r2, #20]
		RCC->AHBENR |=  (status << peripheral);
 80026bc:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <MCAL_RCC_Peripherals_enable+0xb0>)
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	79b9      	ldrb	r1, [r7, #6]
 80026c2:	88ba      	ldrh	r2, [r7, #4]
 80026c4:	fa01 f202 	lsl.w	r2, r1, r2
 80026c8:	4611      	mov	r1, r2
 80026ca:	4a1a      	ldr	r2, [pc, #104]	; (8002734 <MCAL_RCC_Peripherals_enable+0xb0>)
 80026cc:	430b      	orrs	r3, r1
 80026ce:	6153      	str	r3, [r2, #20]
	break ;
 80026d0:	e02b      	b.n	800272a <MCAL_RCC_Peripherals_enable+0xa6>
		RCC->APB1ENR &=~ (status << peripheral);
 80026d2:	4b18      	ldr	r3, [pc, #96]	; (8002734 <MCAL_RCC_Peripherals_enable+0xb0>)
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	79b9      	ldrb	r1, [r7, #6]
 80026d8:	88ba      	ldrh	r2, [r7, #4]
 80026da:	fa01 f202 	lsl.w	r2, r1, r2
 80026de:	43d2      	mvns	r2, r2
 80026e0:	4611      	mov	r1, r2
 80026e2:	4a14      	ldr	r2, [pc, #80]	; (8002734 <MCAL_RCC_Peripherals_enable+0xb0>)
 80026e4:	400b      	ands	r3, r1
 80026e6:	61d3      	str	r3, [r2, #28]
		RCC->APB1ENR |=  (status << peripheral);
 80026e8:	4b12      	ldr	r3, [pc, #72]	; (8002734 <MCAL_RCC_Peripherals_enable+0xb0>)
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	79b9      	ldrb	r1, [r7, #6]
 80026ee:	88ba      	ldrh	r2, [r7, #4]
 80026f0:	fa01 f202 	lsl.w	r2, r1, r2
 80026f4:	4611      	mov	r1, r2
 80026f6:	4a0f      	ldr	r2, [pc, #60]	; (8002734 <MCAL_RCC_Peripherals_enable+0xb0>)
 80026f8:	430b      	orrs	r3, r1
 80026fa:	61d3      	str	r3, [r2, #28]
	break ;
 80026fc:	e015      	b.n	800272a <MCAL_RCC_Peripherals_enable+0xa6>
		RCC->APB2ENR &=~ (status << peripheral);
 80026fe:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <MCAL_RCC_Peripherals_enable+0xb0>)
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	79b9      	ldrb	r1, [r7, #6]
 8002704:	88ba      	ldrh	r2, [r7, #4]
 8002706:	fa01 f202 	lsl.w	r2, r1, r2
 800270a:	43d2      	mvns	r2, r2
 800270c:	4611      	mov	r1, r2
 800270e:	4a09      	ldr	r2, [pc, #36]	; (8002734 <MCAL_RCC_Peripherals_enable+0xb0>)
 8002710:	400b      	ands	r3, r1
 8002712:	6193      	str	r3, [r2, #24]
		RCC->APB2ENR |=  (status << peripheral);
 8002714:	4b07      	ldr	r3, [pc, #28]	; (8002734 <MCAL_RCC_Peripherals_enable+0xb0>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	79b9      	ldrb	r1, [r7, #6]
 800271a:	88ba      	ldrh	r2, [r7, #4]
 800271c:	fa01 f202 	lsl.w	r2, r1, r2
 8002720:	4611      	mov	r1, r2
 8002722:	4a04      	ldr	r2, [pc, #16]	; (8002734 <MCAL_RCC_Peripherals_enable+0xb0>)
 8002724:	430b      	orrs	r3, r1
 8002726:	6193      	str	r3, [r2, #24]
	break ;
 8002728:	bf00      	nop
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	40021000 	.word	0x40021000

08002738 <MCAL_RCC_GetSYS_CLCKFreq>:
 * @param[out] 	-none
 * @retval		-none
 * Note			-none
 */
void MCAL_RCC_GetSYS_CLCKFreq(RCC_speed_t RCC_Speed)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	71fb      	strb	r3, [r7, #7]
	switch(RCC_Speed)
 8002742:	79fb      	ldrb	r3, [r7, #7]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d03c      	beq.n	80027c2 <MCAL_RCC_GetSYS_CLCKFreq+0x8a>
 8002748:	2b02      	cmp	r3, #2
 800274a:	d00f      	beq.n	800276c <MCAL_RCC_GetSYS_CLCKFreq+0x34>
 800274c:	2b00      	cmp	r3, #0
 800274e:	d000      	beq.n	8002752 <MCAL_RCC_GetSYS_CLCKFreq+0x1a>

	}
	break;
	}

}
 8002750:	e06e      	b.n	8002830 <MCAL_RCC_GetSYS_CLCKFreq+0xf8>
		RCC->CR |= (1 << 0);
 8002752:	4b3a      	ldr	r3, [pc, #232]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a39      	ldr	r2, [pc, #228]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	6013      	str	r3, [r2, #0]
		RCC->CFGR &=~ (0b11 << 0);
 800275e:	4b37      	ldr	r3, [pc, #220]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	4a36      	ldr	r2, [pc, #216]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 8002764:	f023 0303 	bic.w	r3, r3, #3
 8002768:	6053      	str	r3, [r2, #4]
	break;
 800276a:	e061      	b.n	8002830 <MCAL_RCC_GetSYS_CLCKFreq+0xf8>
		RCC->CR |= (1 << 0);
 800276c:	4b33      	ldr	r3, [pc, #204]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a32      	ldr	r2, [pc, #200]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	6013      	str	r3, [r2, #0]
		RCC->CFGR &=~ (1 << 16);
 8002778:	4b30      	ldr	r3, [pc, #192]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4a2f      	ldr	r2, [pc, #188]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 800277e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002782:	6053      	str	r3, [r2, #4]
		RCC->CFGR &=~ (0b1111 << 18);
 8002784:	4b2d      	ldr	r3, [pc, #180]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	4a2c      	ldr	r2, [pc, #176]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 800278a:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 800278e:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= (0b0111 << 18);
 8002790:	4b2a      	ldr	r3, [pc, #168]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	4a29      	ldr	r2, [pc, #164]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 8002796:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 800279a:	6053      	str	r3, [r2, #4]
		RCC->CR |= (1 << 24);
 800279c:	4b27      	ldr	r3, [pc, #156]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a26      	ldr	r2, [pc, #152]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 80027a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027a6:	6013      	str	r3, [r2, #0]
		RCC->CFGR &=~ (0b11 << 0);
 80027a8:	4b24      	ldr	r3, [pc, #144]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4a23      	ldr	r2, [pc, #140]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 80027ae:	f023 0303 	bic.w	r3, r3, #3
 80027b2:	6053      	str	r3, [r2, #4]
		RCC->CFGR |=  (0b10 << 0);
 80027b4:	4b21      	ldr	r3, [pc, #132]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	4a20      	ldr	r2, [pc, #128]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 80027ba:	f043 0302 	orr.w	r3, r3, #2
 80027be:	6053      	str	r3, [r2, #4]
	break;
 80027c0:	e036      	b.n	8002830 <MCAL_RCC_GetSYS_CLCKFreq+0xf8>
		RCC->CR |= (1 << 16);
 80027c2:	4b1e      	ldr	r3, [pc, #120]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a1d      	ldr	r2, [pc, #116]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	6013      	str	r3, [r2, #0]
		RCC->CFGR &=~ (1 << 17);
 80027ce:	4b1b      	ldr	r3, [pc, #108]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	4a1a      	ldr	r2, [pc, #104]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 80027d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80027d8:	6053      	str	r3, [r2, #4]
		RCC->CFGR &=~ (1 << 16);
 80027da:	4b18      	ldr	r3, [pc, #96]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4a17      	ldr	r2, [pc, #92]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 80027e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e4:	6053      	str	r3, [r2, #4]
		RCC->CFGR |=  (1 << 16);
 80027e6:	4b15      	ldr	r3, [pc, #84]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	4a14      	ldr	r2, [pc, #80]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 80027ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f0:	6053      	str	r3, [r2, #4]
		RCC->CFGR &=~ (0b1111 << 18);
 80027f2:	4b12      	ldr	r3, [pc, #72]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	4a11      	ldr	r2, [pc, #68]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 80027f8:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80027fc:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= (0010 << 18);
 80027fe:	4b0f      	ldr	r3, [pc, #60]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	4a0e      	ldr	r2, [pc, #56]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 8002804:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002808:	6053      	str	r3, [r2, #4]
		RCC->CR |= (1 << 24);
 800280a:	4b0c      	ldr	r3, [pc, #48]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a0b      	ldr	r2, [pc, #44]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 8002810:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002814:	6013      	str	r3, [r2, #0]
		RCC->CFGR &=~ (0b11 << 0);
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	4a08      	ldr	r2, [pc, #32]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 800281c:	f023 0303 	bic.w	r3, r3, #3
 8002820:	6053      	str	r3, [r2, #4]
		RCC->CFGR |=  (0b10 << 0);
 8002822:	4b06      	ldr	r3, [pc, #24]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4a05      	ldr	r2, [pc, #20]	; (800283c <MCAL_RCC_GetSYS_CLCKFreq+0x104>)
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	6053      	str	r3, [r2, #4]
	break;
 800282e:	bf00      	nop
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000

08002840 <MCAL_RCC_GetHCLKFreq>:
 * @param[out] 	-none
 * @retval		-none
 * Note			-none
 */
uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
	 *1100: SYSCLK divided by 64
	 *1101: SYSCLK divided by 128
	 *1110: SYSCLK divided by 256
	 *1111: SYSCLK divided by 512
	 */
	return RCC->CFGR &=~  (0b1111 << 4)   ;
 8002844:	4b04      	ldr	r3, [pc, #16]	; (8002858 <MCAL_RCC_GetHCLKFreq+0x18>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	4a03      	ldr	r2, [pc, #12]	; (8002858 <MCAL_RCC_GetHCLKFreq+0x18>)
 800284a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800284e:	6053      	str	r3, [r2, #4]
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	40021000 	.word	0x40021000

0800285c <MCAL_RCC_GetPCLK1Freq>:
 * @param[out] 	-none
 * @retval		-none
 * Note			-none
 */
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
	 *101: HCLK divided by 4
	 *110: HCLK divided by 8
	 *111: HCLK divided by 16
	 */

	return RCC->CFGR  &=~ (0b111 << 8)   ;
 8002860:	4b04      	ldr	r3, [pc, #16]	; (8002874 <MCAL_RCC_GetPCLK1Freq+0x18>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4a03      	ldr	r2, [pc, #12]	; (8002874 <MCAL_RCC_GetPCLK1Freq+0x18>)
 8002866:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800286a:	6053      	str	r3, [r2, #4]
}
 800286c:	4618      	mov	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr
 8002874:	40021000 	.word	0x40021000

08002878 <MCAL_RCC_GetPCLK2Freq>:
 * @param[out] 	-none
 * @retval		-none
 * Note			-none
 */
uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
	 *100: HCLK divided by 2
	 *101: HCLK divided by 4
	 *110: HCLK divided by 8
	 *111: HCLK divided by 16
	 */
	return RCC->CFGR &=~  (0b111 << 11)   ;
 800287c:	4b04      	ldr	r3, [pc, #16]	; (8002890 <MCAL_RCC_GetPCLK2Freq+0x18>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4a03      	ldr	r2, [pc, #12]	; (8002890 <MCAL_RCC_GetPCLK2Freq+0x18>)
 8002882:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002886:	6053      	str	r3, [r2, #4]
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr
 8002890:	40021000 	.word	0x40021000

08002894 <MCAL_PWM_Init>:


//===============================================================================================

void MCAL_PWM_Init(PWM_Modes_t mode ,TIMER_channels_t channel , double duty_cycle , uint32_t freq,uint32_t TIM_PSC)
{
 8002894:	b5b0      	push	{r4, r5, r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	e9c7 2300 	strd	r2, r3, [r7]
 800289e:	4603      	mov	r3, r0
 80028a0:	73fb      	strb	r3, [r7, #15]
 80028a2:	460b      	mov	r3, r1
 80028a4:	73bb      	strb	r3, [r7, #14]

	//counter disabled
	TIM3->CR1 &=~ (1 << 0);
 80028a6:	4ba4      	ldr	r3, [pc, #656]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4aa3      	ldr	r2, [pc, #652]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 80028ac:	f023 0301 	bic.w	r3, r3, #1
 80028b0:	6013      	str	r3, [r2, #0]
	TIM_Arr = (1000000 / freq );
 80028b2:	4aa2      	ldr	r2, [pc, #648]	; (8002b3c <MCAL_PWM_Init+0x2a8>)
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ba:	4aa1      	ldr	r2, [pc, #644]	; (8002b40 <MCAL_PWM_Init+0x2ac>)
 80028bc:	6013      	str	r3, [r2, #0]
	TIM_Crr = ((duty_cycle /100) * (float)TIM_Arr );
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	4ba0      	ldr	r3, [pc, #640]	; (8002b44 <MCAL_PWM_Init+0x2b0>)
 80028c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028c8:	f7fd ff38 	bl	800073c <__aeabi_ddiv>
 80028cc:	4603      	mov	r3, r0
 80028ce:	460c      	mov	r4, r1
 80028d0:	4625      	mov	r5, r4
 80028d2:	461c      	mov	r4, r3
 80028d4:	4b9a      	ldr	r3, [pc, #616]	; (8002b40 <MCAL_PWM_Init+0x2ac>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fe f9c5 	bl	8000c68 <__aeabi_ui2f>
 80028de:	4603      	mov	r3, r0
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fd fda9 	bl	8000438 <__aeabi_f2d>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4620      	mov	r0, r4
 80028ec:	4629      	mov	r1, r5
 80028ee:	f7fd fdfb 	bl	80004e8 <__aeabi_dmul>
 80028f2:	4603      	mov	r3, r0
 80028f4:	460c      	mov	r4, r1
 80028f6:	4618      	mov	r0, r3
 80028f8:	4621      	mov	r1, r4
 80028fa:	f7fe f8af 	bl	8000a5c <__aeabi_d2f>
 80028fe:	4602      	mov	r2, r0
 8002900:	4b91      	ldr	r3, [pc, #580]	; (8002b48 <MCAL_PWM_Init+0x2b4>)
 8002902:	601a      	str	r2, [r3, #0]

	//Timer clock enable
	MCAL_RCC_Peripherals_enable(APB1, RCC_TIM3, Enable);
 8002904:	2201      	movs	r2, #1
 8002906:	2101      	movs	r1, #1
 8002908:	2001      	movs	r0, #1
 800290a:	f7ff febb 	bl	8002684 <MCAL_RCC_Peripherals_enable>
	MCAL_RCC_Peripherals_enable(APB2, RCC_GPIOA, Enable);
 800290e:	2201      	movs	r2, #1
 8002910:	2102      	movs	r1, #2
 8002912:	2002      	movs	r0, #2
 8002914:	f7ff feb6 	bl	8002684 <MCAL_RCC_Peripherals_enable>
	MCAL_RCC_Peripherals_enable(APB2, RCC_GPIOB, Enable);
 8002918:	2201      	movs	r2, #1
 800291a:	2103      	movs	r1, #3
 800291c:	2002      	movs	r0, #2
 800291e:	f7ff feb1 	bl	8002684 <MCAL_RCC_Peripherals_enable>
	MCAL_RCC_Peripherals_enable(APB2, RCC_AFIO, Enable);
 8002922:	2201      	movs	r2, #1
 8002924:	2100      	movs	r1, #0
 8002926:	2002      	movs	r0, #2
 8002928:	f7ff feac 	bl	8002684 <MCAL_RCC_Peripherals_enable>

	switch (channel)
 800292c:	7bbb      	ldrb	r3, [r7, #14]
 800292e:	2b03      	cmp	r3, #3
 8002930:	f200 8132 	bhi.w	8002b98 <MCAL_PWM_Init+0x304>
 8002934:	a201      	add	r2, pc, #4	; (adr r2, 800293c <MCAL_PWM_Init+0xa8>)
 8002936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293a:	bf00      	nop
 800293c:	0800294d 	.word	0x0800294d
 8002940:	080029d9 	.word	0x080029d9
 8002944:	08002a65 	.word	0x08002a65
 8002948:	08002af1 	.word	0x08002af1
	{
	case CH1 :
	{
		//GPIO config
		MCAL_GPIO_INIT(GPIOA, PIN_6,Output_AF_PP_Mode_Speed50MHZ);
 800294c:	220b      	movs	r2, #11
 800294e:	2106      	movs	r1, #6
 8002950:	487e      	ldr	r0, [pc, #504]	; (8002b4c <MCAL_PWM_Init+0x2b8>)
 8002952:	f7ff f81b 	bl	800198c <MCAL_GPIO_INIT>

		//timer 3 CH1 setup
		TIM3->CCMR1 &=~ (0b11 << 0);
 8002956:	4b78      	ldr	r3, [pc, #480]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	4a77      	ldr	r2, [pc, #476]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 800295c:	f023 0303 	bic.w	r3, r3, #3
 8002960:	6193      	str	r3, [r2, #24]
		TIM3->CCMR1 |= (1 << 3);
 8002962:	4b75      	ldr	r3, [pc, #468]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	4a74      	ldr	r2, [pc, #464]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002968:	f043 0308 	orr.w	r3, r3, #8
 800296c:	6193      	str	r3, [r2, #24]
		TIM3->CCER |= (1 << 0);
 800296e:	4b72      	ldr	r3, [pc, #456]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	4a71      	ldr	r2, [pc, #452]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	6213      	str	r3, [r2, #32]
		switch (mode)
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <MCAL_PWM_Init+0xf2>
 8002980:	2b01      	cmp	r3, #1
 8002982:	d007      	beq.n	8002994 <MCAL_PWM_Init+0x100>
 8002984:	e00d      	b.n	80029a2 <MCAL_PWM_Init+0x10e>
		{
		case PWM_MODE1 :
		{
			TIM3->CCMR1 |= (0b110<<4);
 8002986:	4b6c      	ldr	r3, [pc, #432]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	4a6b      	ldr	r2, [pc, #428]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 800298c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002990:	6193      	str	r3, [r2, #24]
			break;
 8002992:	e006      	b.n	80029a2 <MCAL_PWM_Init+0x10e>
		}
		case PWM_MODE2 :
		{
			TIM3->CCMR1 |= (0b111<<4);
 8002994:	4b68      	ldr	r3, [pc, #416]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	4a67      	ldr	r2, [pc, #412]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 800299a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800299e:	6193      	str	r3, [r2, #24]
			break;
 80029a0:	bf00      	nop
		}
		}
		TIM3->CCR1 =  TIM_Crr ;
 80029a2:	4b69      	ldr	r3, [pc, #420]	; (8002b48 <MCAL_PWM_Init+0x2b4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4c64      	ldr	r4, [pc, #400]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fe fb05 	bl	8000fb8 <__aeabi_f2uiz>
 80029ae:	4603      	mov	r3, r0
 80029b0:	6363      	str	r3, [r4, #52]	; 0x34
		TIM3->DIER |= (0b11 << 0);
 80029b2:	4b61      	ldr	r3, [pc, #388]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	4a60      	ldr	r2, [pc, #384]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 80029b8:	f043 0303 	orr.w	r3, r3, #3
 80029bc:	60d3      	str	r3, [r2, #12]
		TIM3->EGR |= (1 << 1);
 80029be:	4b5e      	ldr	r3, [pc, #376]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	4a5d      	ldr	r2, [pc, #372]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 80029c4:	f043 0302 	orr.w	r3, r3, #2
 80029c8:	6153      	str	r3, [r2, #20]
		TIM3->CCER &=~ (1 << 1);
 80029ca:	4b5b      	ldr	r3, [pc, #364]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	4a5a      	ldr	r2, [pc, #360]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 80029d0:	f023 0302 	bic.w	r3, r3, #2
 80029d4:	6213      	str	r3, [r2, #32]
		break;
 80029d6:	e0df      	b.n	8002b98 <MCAL_PWM_Init+0x304>

	}
	case CH2 :
	{
		//GPIO config
		MCAL_GPIO_INIT(GPIOA, PIN_7,Output_AF_PP_Mode_Speed50MHZ);
 80029d8:	220b      	movs	r2, #11
 80029da:	2107      	movs	r1, #7
 80029dc:	485b      	ldr	r0, [pc, #364]	; (8002b4c <MCAL_PWM_Init+0x2b8>)
 80029de:	f7fe ffd5 	bl	800198c <MCAL_GPIO_INIT>

		//timer 3 CH2 setup
		TIM3->CCMR1 &=~ (0b11 << 8);
 80029e2:	4b55      	ldr	r3, [pc, #340]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	4a54      	ldr	r2, [pc, #336]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 80029e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ec:	6193      	str	r3, [r2, #24]
		TIM3->CCMR1 |= (1 << 11);
 80029ee:	4b52      	ldr	r3, [pc, #328]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	4a51      	ldr	r2, [pc, #324]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 80029f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029f8:	6193      	str	r3, [r2, #24]
		TIM3->CCER |= (1 << 4);
 80029fa:	4b4f      	ldr	r3, [pc, #316]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	4a4e      	ldr	r2, [pc, #312]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002a00:	f043 0310 	orr.w	r3, r3, #16
 8002a04:	6213      	str	r3, [r2, #32]
		switch (mode)
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d002      	beq.n	8002a12 <MCAL_PWM_Init+0x17e>
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d007      	beq.n	8002a20 <MCAL_PWM_Init+0x18c>
 8002a10:	e00d      	b.n	8002a2e <MCAL_PWM_Init+0x19a>
		{
		case PWM_MODE1 :
		{
			TIM3->CCMR1 |= (0b110<<12);
 8002a12:	4b49      	ldr	r3, [pc, #292]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	4a48      	ldr	r2, [pc, #288]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002a18:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8002a1c:	6193      	str	r3, [r2, #24]
			break;
 8002a1e:	e006      	b.n	8002a2e <MCAL_PWM_Init+0x19a>
		}
		case PWM_MODE2 :
		{
			TIM3->CCMR1 |= (0b111<<12);
 8002a20:	4b45      	ldr	r3, [pc, #276]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	4a44      	ldr	r2, [pc, #272]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002a26:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002a2a:	6193      	str	r3, [r2, #24]
			break;
 8002a2c:	bf00      	nop
		}
		}

		TIM3->CCR2 = TIM_Crr ;
 8002a2e:	4b46      	ldr	r3, [pc, #280]	; (8002b48 <MCAL_PWM_Init+0x2b4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4c41      	ldr	r4, [pc, #260]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fe fabf 	bl	8000fb8 <__aeabi_f2uiz>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	63a3      	str	r3, [r4, #56]	; 0x38
		TIM3->DIER |= (0b101 << 0);
 8002a3e:	4b3e      	ldr	r3, [pc, #248]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	4a3d      	ldr	r2, [pc, #244]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002a44:	f043 0305 	orr.w	r3, r3, #5
 8002a48:	60d3      	str	r3, [r2, #12]
		TIM3->EGR |= (1 << 2);
 8002a4a:	4b3b      	ldr	r3, [pc, #236]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	4a3a      	ldr	r2, [pc, #232]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002a50:	f043 0304 	orr.w	r3, r3, #4
 8002a54:	6153      	str	r3, [r2, #20]
		TIM3->CCER &=~ (1 << 5);
 8002a56:	4b38      	ldr	r3, [pc, #224]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	4a37      	ldr	r2, [pc, #220]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002a5c:	f023 0320 	bic.w	r3, r3, #32
 8002a60:	6213      	str	r3, [r2, #32]
		break;
 8002a62:	e099      	b.n	8002b98 <MCAL_PWM_Init+0x304>
	}
	case CH3 :
	{

		//GPIO config
		MCAL_GPIO_INIT(GPIOB, PIN_0,Output_AF_PP_Mode_Speed50MHZ);
 8002a64:	220b      	movs	r2, #11
 8002a66:	2100      	movs	r1, #0
 8002a68:	4839      	ldr	r0, [pc, #228]	; (8002b50 <MCAL_PWM_Init+0x2bc>)
 8002a6a:	f7fe ff8f 	bl	800198c <MCAL_GPIO_INIT>

		//timer 3 CH3 setup
		TIM3->CCMR2 &=~ (0b11 << 0);
 8002a6e:	4b32      	ldr	r3, [pc, #200]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	4a31      	ldr	r2, [pc, #196]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002a74:	f023 0303 	bic.w	r3, r3, #3
 8002a78:	61d3      	str	r3, [r2, #28]
		TIM3->CCMR2 |= (1 << 3);
 8002a7a:	4b2f      	ldr	r3, [pc, #188]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	4a2e      	ldr	r2, [pc, #184]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002a80:	f043 0308 	orr.w	r3, r3, #8
 8002a84:	61d3      	str	r3, [r2, #28]
		TIM3->CCER |= (1 << 8);
 8002a86:	4b2c      	ldr	r3, [pc, #176]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	4a2b      	ldr	r2, [pc, #172]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a90:	6213      	str	r3, [r2, #32]
		switch (mode)
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d002      	beq.n	8002a9e <MCAL_PWM_Init+0x20a>
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d007      	beq.n	8002aac <MCAL_PWM_Init+0x218>
 8002a9c:	e00d      	b.n	8002aba <MCAL_PWM_Init+0x226>
		{
		case PWM_MODE1 :
		{
			TIM3->CCMR2 |= (0b110<<4);
 8002a9e:	4b26      	ldr	r3, [pc, #152]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	4a25      	ldr	r2, [pc, #148]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002aa4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002aa8:	61d3      	str	r3, [r2, #28]
			break;
 8002aaa:	e006      	b.n	8002aba <MCAL_PWM_Init+0x226>
		}
		case PWM_MODE2 :
		{
			TIM3->CCMR2 |= (0b111<<4);
 8002aac:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	4a21      	ldr	r2, [pc, #132]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002ab2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002ab6:	61d3      	str	r3, [r2, #28]
			break;
 8002ab8:	bf00      	nop
		}
		}
		TIM3->CCR3 = TIM_Crr ;
 8002aba:	4b23      	ldr	r3, [pc, #140]	; (8002b48 <MCAL_PWM_Init+0x2b4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4c1e      	ldr	r4, [pc, #120]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fe fa79 	bl	8000fb8 <__aeabi_f2uiz>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	63e3      	str	r3, [r4, #60]	; 0x3c
		TIM3->DIER |= (0b1001 << 0);
 8002aca:	4b1b      	ldr	r3, [pc, #108]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	4a1a      	ldr	r2, [pc, #104]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002ad0:	f043 0309 	orr.w	r3, r3, #9
 8002ad4:	60d3      	str	r3, [r2, #12]
		TIM3->EGR |= (1 << 3);
 8002ad6:	4b18      	ldr	r3, [pc, #96]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002adc:	f043 0308 	orr.w	r3, r3, #8
 8002ae0:	6153      	str	r3, [r2, #20]
		TIM3->CCER &=~ (1 << 9);
 8002ae2:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	4a14      	ldr	r2, [pc, #80]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002ae8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002aec:	6213      	str	r3, [r2, #32]
		break;
 8002aee:	e053      	b.n	8002b98 <MCAL_PWM_Init+0x304>

	}
	case CH4 :
	{
		//GPIO config
		MCAL_GPIO_INIT(GPIOB, PIN_1,Output_AF_PP_Mode_Speed50MHZ);
 8002af0:	220b      	movs	r2, #11
 8002af2:	2101      	movs	r1, #1
 8002af4:	4816      	ldr	r0, [pc, #88]	; (8002b50 <MCAL_PWM_Init+0x2bc>)
 8002af6:	f7fe ff49 	bl	800198c <MCAL_GPIO_INIT>

		//timer 4 CH2 setup
		TIM3->CCMR2 &=~ (0b11 << 8);
 8002afa:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	4a0e      	ldr	r2, [pc, #56]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b04:	61d3      	str	r3, [r2, #28]
		TIM3->CCMR2 |= (1 << 11);
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	4a0b      	ldr	r2, [pc, #44]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002b0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b10:	61d3      	str	r3, [r2, #28]
		TIM3->CCER |= (1 << 12);
 8002b12:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	4a08      	ldr	r2, [pc, #32]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002b18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b1c:	6213      	str	r3, [r2, #32]
		switch (mode)
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <MCAL_PWM_Init+0x296>
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d015      	beq.n	8002b54 <MCAL_PWM_Init+0x2c0>
 8002b28:	e01b      	b.n	8002b62 <MCAL_PWM_Init+0x2ce>
		{
		case PWM_MODE1 :
		{
			TIM3->CCMR2 |= (0b110<<12);
 8002b2a:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	4a02      	ldr	r2, [pc, #8]	; (8002b38 <MCAL_PWM_Init+0x2a4>)
 8002b30:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8002b34:	61d3      	str	r3, [r2, #28]
			break;
 8002b36:	e014      	b.n	8002b62 <MCAL_PWM_Init+0x2ce>
 8002b38:	40000400 	.word	0x40000400
 8002b3c:	000f4240 	.word	0x000f4240
 8002b40:	20000150 	.word	0x20000150
 8002b44:	40590000 	.word	0x40590000
 8002b48:	2000014c 	.word	0x2000014c
 8002b4c:	40010800 	.word	0x40010800
 8002b50:	40010c00 	.word	0x40010c00
		}
		case PWM_MODE2 :
		{
			TIM3->CCMR2 |= (0b111<<12);
 8002b54:	4b1f      	ldr	r3, [pc, #124]	; (8002bd4 <MCAL_PWM_Init+0x340>)
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	4a1e      	ldr	r2, [pc, #120]	; (8002bd4 <MCAL_PWM_Init+0x340>)
 8002b5a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002b5e:	61d3      	str	r3, [r2, #28]
			break;
 8002b60:	bf00      	nop
		}
		}

		TIM3->CCR4 = TIM_Crr ;
 8002b62:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <MCAL_PWM_Init+0x344>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4c1b      	ldr	r4, [pc, #108]	; (8002bd4 <MCAL_PWM_Init+0x340>)
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe fa25 	bl	8000fb8 <__aeabi_f2uiz>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	6423      	str	r3, [r4, #64]	; 0x40
		TIM3->DIER |= (0b10001 << 0);
 8002b72:	4b18      	ldr	r3, [pc, #96]	; (8002bd4 <MCAL_PWM_Init+0x340>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	4a17      	ldr	r2, [pc, #92]	; (8002bd4 <MCAL_PWM_Init+0x340>)
 8002b78:	f043 0311 	orr.w	r3, r3, #17
 8002b7c:	60d3      	str	r3, [r2, #12]
		TIM3->EGR |= (1 << 4);
 8002b7e:	4b15      	ldr	r3, [pc, #84]	; (8002bd4 <MCAL_PWM_Init+0x340>)
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	4a14      	ldr	r2, [pc, #80]	; (8002bd4 <MCAL_PWM_Init+0x340>)
 8002b84:	f043 0310 	orr.w	r3, r3, #16
 8002b88:	6153      	str	r3, [r2, #20]
		TIM3->CCER &=~ (1 << 13);
 8002b8a:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <MCAL_PWM_Init+0x340>)
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	4a11      	ldr	r2, [pc, #68]	; (8002bd4 <MCAL_PWM_Init+0x340>)
 8002b90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b94:	6213      	str	r3, [r2, #32]
		break;
 8002b96:	bf00      	nop

	}
	}

	TIM3->CR1 |= (1 << 7);
 8002b98:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <MCAL_PWM_Init+0x340>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a0d      	ldr	r2, [pc, #52]	; (8002bd4 <MCAL_PWM_Init+0x340>)
 8002b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ba2:	6013      	str	r3, [r2, #0]
	TIM3->ARR = TIM_Arr ;
 8002ba4:	4a0b      	ldr	r2, [pc, #44]	; (8002bd4 <MCAL_PWM_Init+0x340>)
 8002ba6:	4b0d      	ldr	r3, [pc, #52]	; (8002bdc <MCAL_PWM_Init+0x348>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM3->PSC = TIM_PSC ;
 8002bac:	4a09      	ldr	r2, [pc, #36]	; (8002bd4 <MCAL_PWM_Init+0x340>)
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	6293      	str	r3, [r2, #40]	; 0x28
	TIM3->EGR |= (1 << 0);
 8002bb2:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <MCAL_PWM_Init+0x340>)
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	4a07      	ldr	r2, [pc, #28]	; (8002bd4 <MCAL_PWM_Init+0x340>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	6153      	str	r3, [r2, #20]
	TIM3->CR1 |=(1<<0);//enable the timer
 8002bbe:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <MCAL_PWM_Init+0x340>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a04      	ldr	r2, [pc, #16]	; (8002bd4 <MCAL_PWM_Init+0x340>)
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	6013      	str	r3, [r2, #0]
}
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40000400 	.word	0x40000400
 8002bd8:	2000014c 	.word	0x2000014c
 8002bdc:	20000150 	.word	0x20000150

08002be0 <delay>:
//=======================================================================================
void delay(uint16_t time,uint8_t U,uint32_t clk){
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	603a      	str	r2, [r7, #0]
 8002bea:	80fb      	strh	r3, [r7, #6]
 8002bec:	460b      	mov	r3, r1
 8002bee:	717b      	strb	r3, [r7, #5]

	MCAL_RCC_Peripherals_enable(APB1, RCC_TIM2, Enable);
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	2001      	movs	r0, #1
 8002bf6:	f7ff fd45 	bl	8002684 <MCAL_RCC_Peripherals_enable>

	delay_TIMER->CR1 &=~(1<<0);//timer off
 8002bfa:	4b4c      	ldr	r3, [pc, #304]	; (8002d2c <delay+0x14c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4b4a      	ldr	r3, [pc, #296]	; (8002d2c <delay+0x14c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0201 	bic.w	r2, r2, #1
 8002c08:	601a      	str	r2, [r3, #0]
	///TIMERS_typeDef* TIMERx=TIM2;
	char user_flage=1;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	77fb      	strb	r3, [r7, #31]
	uint32_t user_top=0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61bb      	str	r3, [r7, #24]
	uint32_t user_pre=1;
 8002c12:	2301      	movs	r3, #1
 8002c14:	617b      	str	r3, [r7, #20]
	uint32_t unit =1000;
 8002c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c1a:	613b      	str	r3, [r7, #16]
	uint8_t  increase=2;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	73fb      	strb	r3, [r7, #15]

	if (U == 0){
 8002c20:	797b      	ldrb	r3, [r7, #5]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10d      	bne.n	8002c42 <delay+0x62>
		unit = 1000;
 8002c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c2a:	613b      	str	r3, [r7, #16]
		if (time > 3000)increase = 100;
 8002c2c:	88fb      	ldrh	r3, [r7, #6]
 8002c2e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d902      	bls.n	8002c3c <delay+0x5c>
 8002c36:	2364      	movs	r3, #100	; 0x64
 8002c38:	73fb      	strb	r3, [r7, #15]
 8002c3a:	e030      	b.n	8002c9e <delay+0xbe>
		else increase = 10;
 8002c3c:	230a      	movs	r3, #10
 8002c3e:	73fb      	strb	r3, [r7, #15]
 8002c40:	e02d      	b.n	8002c9e <delay+0xbe>
	}
	else {
		unit = 1000000;
 8002c42:	4b3b      	ldr	r3, [pc, #236]	; (8002d30 <delay+0x150>)
 8002c44:	613b      	str	r3, [r7, #16]
		if (time > 3000)increase = 10;
 8002c46:	88fb      	ldrh	r3, [r7, #6]
 8002c48:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d902      	bls.n	8002c56 <delay+0x76>
 8002c50:	230a      	movs	r3, #10
 8002c52:	73fb      	strb	r3, [r7, #15]
 8002c54:	e023      	b.n	8002c9e <delay+0xbe>
		else increase = 5;
 8002c56:	2305      	movs	r3, #5
 8002c58:	73fb      	strb	r3, [r7, #15]
	}

	while(user_flage==1){
 8002c5a:	e020      	b.n	8002c9e <delay+0xbe>
		user_top = (clk/unit*time)/( user_pre );
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c64:	88fa      	ldrh	r2, [r7, #6]
 8002c66:	fb02 f203 	mul.w	r2, r2, r3
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c70:	61bb      	str	r3, [r7, #24]
		if(user_top>=32000){
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002c78:	d30f      	bcc.n	8002c9a <delay+0xba>

			if(user_pre>65530){
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d905      	bls.n	8002c90 <delay+0xb0>
				user_pre=65530;
 8002c84:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 8002c88:	617b      	str	r3, [r7, #20]
				user_flage=0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	77fb      	strb	r3, [r7, #31]
 8002c8e:	e006      	b.n	8002c9e <delay+0xbe>
			}
			else user_pre+=increase;
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4413      	add	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	e001      	b.n	8002c9e <delay+0xbe>

		}
		else{
			user_flage=0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	77fb      	strb	r3, [r7, #31]
	while(user_flage==1){
 8002c9e:	7ffb      	ldrb	r3, [r7, #31]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d0db      	beq.n	8002c5c <delay+0x7c>
		}
	}


	delay_TIMER->CR1 &=~(1<<0);//timer off
 8002ca4:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <delay+0x14c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	4b20      	ldr	r3, [pc, #128]	; (8002d2c <delay+0x14c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0201 	bic.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]

	delay_TIMER->CR1  |=(1<<2);//Only counter overflow/underflow generates an update
 8002cb4:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <delay+0x14c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	4b1c      	ldr	r3, [pc, #112]	; (8002d2c <delay+0x14c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0204 	orr.w	r2, r2, #4
 8002cc2:	601a      	str	r2, [r3, #0]

	delay_TIMER->DIER |=(1<<0);//Update interrupt enabled
 8002cc4:	4b19      	ldr	r3, [pc, #100]	; (8002d2c <delay+0x14c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	4b18      	ldr	r3, [pc, #96]	; (8002d2c <delay+0x14c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0201 	orr.w	r2, r2, #1
 8002cd2:	60da      	str	r2, [r3, #12]



	delay_TIMER->ARR=user_top;//frec peak value
 8002cd4:	4b15      	ldr	r3, [pc, #84]	; (8002d2c <delay+0x14c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	62da      	str	r2, [r3, #44]	; 0x2c

	delay_TIMER->PSC=(user_pre-1);//prescaller
 8002cdc:	4b13      	ldr	r3, [pc, #76]	; (8002d2c <delay+0x14c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	3a01      	subs	r2, #1
 8002ce4:	629a      	str	r2, [r3, #40]	; 0x28

	delay_TIMER->EGR |=(1<<0);//1: Re-initialize the counter and generates an update of the registers. Note that the prescaler
 8002ce6:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <delay+0x14c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695a      	ldr	r2, [r3, #20]
 8002cec:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <delay+0x14c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0201 	orr.w	r2, r2, #1
 8002cf4:	615a      	str	r2, [r3, #20]

	delay_TIMER->CR1 |=(1<<0);//enable the timer
 8002cf6:	4b0d      	ldr	r3, [pc, #52]	; (8002d2c <delay+0x14c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <delay+0x14c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0201 	orr.w	r2, r2, #1
 8002d04:	601a      	str	r2, [r3, #0]



	delay_flag=1;
 8002d06:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <delay+0x154>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	701a      	strb	r2, [r3, #0]
	NVIC_TIM2_global_interrupt_Enable;
 8002d0c:	4b0a      	ldr	r3, [pc, #40]	; (8002d38 <delay+0x158>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <delay+0x158>)
 8002d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d16:	6013      	str	r3, [r2, #0]
	while(delay_flag){
 8002d18:	bf00      	nop
 8002d1a:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <delay+0x154>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1fb      	bne.n	8002d1a <delay+0x13a>

	}
}
 8002d22:	bf00      	nop
 8002d24:	3720      	adds	r7, #32
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000004 	.word	0x20000004
 8002d30:	000f4240 	.word	0x000f4240
 8002d34:	20000000 	.word	0x20000000
 8002d38:	e000e100 	.word	0xe000e100

08002d3c <TIME_CALCULATION>:

//======================================================================================================

uint32_t TIME_CALCULATION(uint32_t clk,uint8_t TIMER_ST){
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	70fb      	strb	r3, [r7, #3]
	if(TIMER_ST==TIMER_START){
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d131      	bne.n	8002db2 <TIME_CALCULATION+0x76>
		MCAL_RCC_Peripherals_enable(APB1, RCC_TIM4, Enable);
 8002d4e:	2201      	movs	r2, #1
 8002d50:	2102      	movs	r1, #2
 8002d52:	2001      	movs	r0, #1
 8002d54:	f7ff fc96 	bl	8002684 <MCAL_RCC_Peripherals_enable>
		TIM4->CR1 &=~(1<<0);//stop
 8002d58:	4b2b      	ldr	r3, [pc, #172]	; (8002e08 <TIME_CALCULATION+0xcc>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a2a      	ldr	r2, [pc, #168]	; (8002e08 <TIME_CALCULATION+0xcc>)
 8002d5e:	f023 0301 	bic.w	r3, r3, #1
 8002d62:	6013      	str	r3, [r2, #0]

		TIM4->CR1  |=(1<<2);
 8002d64:	4b28      	ldr	r3, [pc, #160]	; (8002e08 <TIME_CALCULATION+0xcc>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a27      	ldr	r2, [pc, #156]	; (8002e08 <TIME_CALCULATION+0xcc>)
 8002d6a:	f043 0304 	orr.w	r3, r3, #4
 8002d6e:	6013      	str	r3, [r2, #0]

		TIM4->DIER |=(1<<0);//Update interrupt enable
 8002d70:	4b25      	ldr	r3, [pc, #148]	; (8002e08 <TIME_CALCULATION+0xcc>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4a24      	ldr	r2, [pc, #144]	; (8002e08 <TIME_CALCULATION+0xcc>)
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	60d3      	str	r3, [r2, #12]

		TIM4->ARR=64000;//peak value 8ms of freq=8000000hz
 8002d7c:	4b22      	ldr	r3, [pc, #136]	; (8002e08 <TIME_CALCULATION+0xcc>)
 8002d7e:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8002d82:	62da      	str	r2, [r3, #44]	; 0x2c

		TIM4->PSC=0;//prescaller
 8002d84:	4b20      	ldr	r3, [pc, #128]	; (8002e08 <TIME_CALCULATION+0xcc>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	629a      	str	r2, [r3, #40]	; 0x28

		TIM4->EGR |=(1<<0);//Bit 0 UG: Update generation
 8002d8a:	4b1f      	ldr	r3, [pc, #124]	; (8002e08 <TIME_CALCULATION+0xcc>)
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	4a1e      	ldr	r2, [pc, #120]	; (8002e08 <TIME_CALCULATION+0xcc>)
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	6153      	str	r3, [r2, #20]

		TIM4->CR1 |=(1<<0);//enable the timer
 8002d96:	4b1c      	ldr	r3, [pc, #112]	; (8002e08 <TIME_CALCULATION+0xcc>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a1b      	ldr	r2, [pc, #108]	; (8002e08 <TIME_CALCULATION+0xcc>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	6013      	str	r3, [r2, #0]
		NVIC_TIM4_global_interrupt_Enable;
 8002da2:	4b1a      	ldr	r3, [pc, #104]	; (8002e0c <TIME_CALCULATION+0xd0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a19      	ldr	r2, [pc, #100]	; (8002e0c <TIME_CALCULATION+0xd0>)
 8002da8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002dac:	6013      	str	r3, [r2, #0]
		return 1;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e025      	b.n	8002dfe <TIME_CALCULATION+0xc2>
	}
	else {
		TIM4->CR1 &=~(1<<0);//stop
 8002db2:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <TIME_CALCULATION+0xcc>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a14      	ldr	r2, [pc, #80]	; (8002e08 <TIME_CALCULATION+0xcc>)
 8002db8:	f023 0301 	bic.w	r3, r3, #1
 8002dbc:	6013      	str	r3, [r2, #0]
		timer_ticks=TIM4->CNT;
 8002dbe:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <TIME_CALCULATION+0xcc>)
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <TIME_CALCULATION+0xd4>)
 8002dc6:	801a      	strh	r2, [r3, #0]
		uint32_t X=((timer_ticks+(overflowtims*64000))/(clk/1000000));
 8002dc8:	4b11      	ldr	r3, [pc, #68]	; (8002e10 <TIME_CALCULATION+0xd4>)
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <TIME_CALCULATION+0xd8>)
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 8002dd8:	fb03 f301 	mul.w	r3, r3, r1
 8002ddc:	4413      	add	r3, r2
 8002dde:	4619      	mov	r1, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a0d      	ldr	r2, [pc, #52]	; (8002e18 <TIME_CALCULATION+0xdc>)
 8002de4:	fba2 2303 	umull	r2, r3, r2, r3
 8002de8:	0c9b      	lsrs	r3, r3, #18
 8002dea:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dee:	60fb      	str	r3, [r7, #12]
		overflowtims=0;
 8002df0:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <TIME_CALCULATION+0xd8>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	801a      	strh	r2, [r3, #0]
		timer_ticks=0;
 8002df6:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <TIME_CALCULATION+0xd4>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	801a      	strh	r2, [r3, #0]
		return X;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
	}
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40000800 	.word	0x40000800
 8002e0c:	e000e100 	.word	0xe000e100
 8002e10:	200000b8 	.word	0x200000b8
 8002e14:	200000b4 	.word	0x200000b4
 8002e18:	431bde83 	.word	0x431bde83

08002e1c <TIM2_IRQHandler>:

//===========================================================================================================

//========<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  ISR  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

void TIM2_IRQHandler(){
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
	delay_TIMER->SR &=~(1<<0);//Bit 0 UIF: Update interrupt flag
 8002e20:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <TIM2_IRQHandler+0x34>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691a      	ldr	r2, [r3, #16]
 8002e26:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <TIM2_IRQHandler+0x34>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0201 	bic.w	r2, r2, #1
 8002e2e:	611a      	str	r2, [r3, #16]
	delay_flag=0;
 8002e30:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <TIM2_IRQHandler+0x38>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]
	//NVIC_TIM2_global_interrupt_Disable;
	delay_TIMER->CR1 &=~(1<<0);//timer off
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <TIM2_IRQHandler+0x34>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <TIM2_IRQHandler+0x34>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0201 	bic.w	r2, r2, #1
 8002e44:	601a      	str	r2, [r3, #0]

}
 8002e46:	bf00      	nop
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	20000004 	.word	0x20000004
 8002e54:	20000000 	.word	0x20000000

08002e58 <TIM4_IRQHandler>:

void TIM4_IRQHandler(){
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
	TIM4->SR &=~(1<<0);
 8002e5c:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <TIM4_IRQHandler+0x24>)
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	4a06      	ldr	r2, [pc, #24]	; (8002e7c <TIM4_IRQHandler+0x24>)
 8002e62:	f023 0301 	bic.w	r3, r3, #1
 8002e66:	6113      	str	r3, [r2, #16]
	overflowtims++;
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <TIM4_IRQHandler+0x28>)
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	4b03      	ldr	r3, [pc, #12]	; (8002e80 <TIM4_IRQHandler+0x28>)
 8002e72:	801a      	strh	r2, [r3, #0]
}
 8002e74:	bf00      	nop
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr
 8002e7c:	40000800 	.word	0x40000800
 8002e80:	200000b4 	.word	0x200000b4

08002e84 <TIM3_IRQHandler>:


void TIM3_IRQHandler(){
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
	TIM3->SR &=~(1<<0);
 8002e88:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <TIM3_IRQHandler+0x24>)
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	4a06      	ldr	r2, [pc, #24]	; (8002ea8 <TIM3_IRQHandler+0x24>)
 8002e8e:	f023 0301 	bic.w	r3, r3, #1
 8002e92:	6113      	str	r3, [r2, #16]
	overflowtims1++;
 8002e94:	4b05      	ldr	r3, [pc, #20]	; (8002eac <TIM3_IRQHandler+0x28>)
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	4b03      	ldr	r3, [pc, #12]	; (8002eac <TIM3_IRQHandler+0x28>)
 8002e9e:	801a      	strh	r2, [r3, #0]
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr
 8002ea8:	40000400 	.word	0x40000400
 8002eac:	200000b6 	.word	0x200000b6

08002eb0 <USART1_IRQHandler>:
}


//ISR
void USART1_IRQHandler (void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
	USART_Config* config1;
	config1->P_IRQ_CALLBACK () ;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	4798      	blx	r3

}
 8002ebc:	bf00      	nop
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
	USART_Config* config;
	config->P_IRQ_CALLBACK () ;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	4798      	blx	r3

}
 8002ed0:	bf00      	nop
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
	USART_Config* config;
	config->P_IRQ_CALLBACK () ;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	4798      	blx	r3
}
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <RCC_INIT>:
/******************************
 * Generic Functions
 *****************************/

void RCC_INIT(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
	MCAL_RCC_GetSYS_CLCKFreq(RCC_36MHZ);
 8002ef0:	2002      	movs	r0, #2
 8002ef2:	f7ff fc21 	bl	8002738 <MCAL_RCC_GetSYS_CLCKFreq>
	MCAL_RCC_GetHCLKFreq();
 8002ef6:	f7ff fca3 	bl	8002840 <MCAL_RCC_GetHCLKFreq>
	MCAL_RCC_GetPCLK1Freq();
 8002efa:	f7ff fcaf 	bl	800285c <MCAL_RCC_GetPCLK1Freq>
	MCAL_RCC_GetPCLK2Freq();
 8002efe:	f7ff fcbb 	bl	8002878 <MCAL_RCC_GetPCLK2Freq>
	MCAL_RCC_Peripherals_enable(APB2, RCC_GPIOA, Enable);
 8002f02:	2201      	movs	r2, #1
 8002f04:	2102      	movs	r1, #2
 8002f06:	2002      	movs	r0, #2
 8002f08:	f7ff fbbc 	bl	8002684 <MCAL_RCC_Peripherals_enable>
	MCAL_RCC_Peripherals_enable(APB2, RCC_GPIOB, Enable);
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	2103      	movs	r1, #3
 8002f10:	2002      	movs	r0, #2
 8002f12:	f7ff fbb7 	bl	8002684 <MCAL_RCC_Peripherals_enable>
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HW_INIT>:


void HW_INIT()
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	af00      	add	r7, sp, #0
	//DC Motor Initialization
	HAL_MOTOR_Init();
 8002f1e:	f7fe fa33 	bl	8001388 <HAL_MOTOR_Init>

	//Ultrasonic Sensors Initialization
	HAL_ULTRASONIC_INIT(ULT1);
 8002f22:	2000      	movs	r0, #0
 8002f24:	f7fe fbe8 	bl	80016f8 <HAL_ULTRASONIC_INIT>
	HAL_ULTRASONIC_INIT(ULT2);
 8002f28:	2001      	movs	r0, #1
 8002f2a:	f7fe fbe5 	bl	80016f8 <HAL_ULTRASONIC_INIT>
	HAL_ULTRASONIC_INIT(ULT3);
 8002f2e:	2002      	movs	r0, #2
 8002f30:	f7fe fbe2 	bl	80016f8 <HAL_ULTRASONIC_INIT>
	HAL_ULTRASONIC_INIT(ULT4);
 8002f34:	2003      	movs	r0, #3
 8002f36:	f7fe fbdf 	bl	80016f8 <HAL_ULTRASONIC_INIT>

}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <CALCULATION_COUNTER>:
 * @param [in] 	- none
 * @retval 		- none
 * Note			- none
 */
uint32_t CALCULATION_COUNTER (uint32_t distance ,float speed )
{
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
	uint32_t counter;
	counter=((distance/speed)*1000)/40.01;
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7fd fe8c 	bl	8000c68 <__aeabi_ui2f>
 8002f50:	4603      	mov	r3, r0
 8002f52:	6839      	ldr	r1, [r7, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fd ff93 	bl	8000e80 <__aeabi_fdiv>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	490e      	ldr	r1, [pc, #56]	; (8002f98 <CALCULATION_COUNTER+0x58>)
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fd feda 	bl	8000d18 <__aeabi_fmul>
 8002f64:	4603      	mov	r3, r0
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fd fa66 	bl	8000438 <__aeabi_f2d>
 8002f6c:	a308      	add	r3, pc, #32	; (adr r3, 8002f90 <CALCULATION_COUNTER+0x50>)
 8002f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f72:	f7fd fbe3 	bl	800073c <__aeabi_ddiv>
 8002f76:	4603      	mov	r3, r0
 8002f78:	460c      	mov	r4, r1
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	4621      	mov	r1, r4
 8002f7e:	f7fd fd4d 	bl	8000a1c <__aeabi_d2uiz>
 8002f82:	4603      	mov	r3, r0
 8002f84:	60fb      	str	r3, [r7, #12]
	return counter;
 8002f86:	68fb      	ldr	r3, [r7, #12]

}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd90      	pop	{r4, r7, pc}
 8002f90:	ae147ae1 	.word	0xae147ae1
 8002f94:	40440147 	.word	0x40440147
 8002f98:	447a0000 	.word	0x447a0000

08002f9c <main>:
//=============================================================================================

//===================================================================================

int main(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
	/*MCU Peripherals and HW Components Initialization*/
	RCC_INIT();
 8002fa0:	f7ff ffa4 	bl	8002eec <RCC_INIT>
	HW_INIT();
 8002fa4:	f7ff ffb9 	bl	8002f1a <HW_INIT>

	PARALLEL_COUNTER=(CALCULATION_COUNTER(PARALLEL_PARKING_LENGTH, CAR_SPEED)/2);
 8002fa8:	490d      	ldr	r1, [pc, #52]	; (8002fe0 <main+0x44>)
 8002faa:	2028      	movs	r0, #40	; 0x28
 8002fac:	f7ff ffc8 	bl	8002f40 <CALCULATION_COUNTER>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	085b      	lsrs	r3, r3, #1
 8002fb4:	4a0b      	ldr	r2, [pc, #44]	; (8002fe4 <main+0x48>)
 8002fb6:	6013      	str	r3, [r2, #0]
	PERPENDICULAR_COUNTER=(CALCULATION_COUNTER(PERPINDECULAR_PARKING_LENGTH, CAR_SPEED)/2);
 8002fb8:	4909      	ldr	r1, [pc, #36]	; (8002fe0 <main+0x44>)
 8002fba:	2014      	movs	r0, #20
 8002fbc:	f7ff ffc0 	bl	8002f40 <CALCULATION_COUNTER>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	085b      	lsrs	r3, r3, #1
 8002fc4:	4a08      	ldr	r2, [pc, #32]	; (8002fe8 <main+0x4c>)
 8002fc6:	6013      	str	r3, [r2, #0]

	while(1)
	{
		STATE1();
 8002fc8:	f000 f812 	bl	8002ff0 <STATE1>
		STATE2();
 8002fcc:	f000 f83c 	bl	8003048 <STATE2>
		if(STATE == 3)
 8002fd0:	4b06      	ldr	r3, [pc, #24]	; (8002fec <main+0x50>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d1f7      	bne.n	8002fc8 <main+0x2c>
		{
			STATE3();
 8002fd8:	f000 f902 	bl	80031e0 <STATE3>
		STATE1();
 8002fdc:	e7f4      	b.n	8002fc8 <main+0x2c>
 8002fde:	bf00      	nop
 8002fe0:	40d66666 	.word	0x40d66666
 8002fe4:	200000c8 	.word	0x200000c8
 8002fe8:	200000c4 	.word	0x200000c4
 8002fec:	200000ba 	.word	0x200000ba

08002ff0 <STATE1>:
 * @param [in] 	- none
 * @retval 		- none
 * Note			- none
 */
void STATE1(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
	//Start Moving and Searching
	HAL_MOTOR_Motion(FORWARD);
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f7fe f9d7 	bl	80013a8 <HAL_MOTOR_Motion>
	HAL_Servo_Set_Angle(90, clk);
 8002ffa:	4a0e      	ldr	r2, [pc, #56]	; (8003034 <STATE1+0x44>)
 8002ffc:	f04f 0000 	mov.w	r0, #0
 8003000:	490d      	ldr	r1, [pc, #52]	; (8003038 <STATE1+0x48>)
 8003002:	f7fe fa05 	bl	8001410 <HAL_Servo_Set_Angle>
	MCAL_GPIO_WRITEPIN(GPIOA, PIN_10, 0);
 8003006:	2200      	movs	r2, #0
 8003008:	210a      	movs	r1, #10
 800300a:	480c      	ldr	r0, [pc, #48]	; (800303c <STATE1+0x4c>)
 800300c:	f7fe fd9a 	bl	8001b44 <MCAL_GPIO_WRITEPIN>

	//Check if any obstacle in front of the car
	dist3=HAL_ULTRASONIC_GET_DISTANCE(ULT1);
 8003010:	2000      	movs	r0, #0
 8003012:	f7fe fbc5 	bl	80017a0 <HAL_ULTRASONIC_GET_DISTANCE>
 8003016:	4602      	mov	r2, r0
 8003018:	4b09      	ldr	r3, [pc, #36]	; (8003040 <STATE1+0x50>)
 800301a:	601a      	str	r2, [r3, #0]
	if (dist3 <= ULTRA1_DISTANCE)
 800301c:	4b08      	ldr	r3, [pc, #32]	; (8003040 <STATE1+0x50>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b05      	cmp	r3, #5
 8003022:	d801      	bhi.n	8003028 <STATE1+0x38>
	{
		AVOID_FRONT_OBSTACLES();
 8003024:	f000 f93c 	bl	80032a0 <AVOID_FRONT_OBSTACLES>
	}

	//Start moving again
	HAL_MOTOR_Motion(FORWARD);
 8003028:	2000      	movs	r0, #0
 800302a:	f7fe f9bd 	bl	80013a8 <HAL_MOTOR_Motion>

}
 800302e:	bf00      	nop
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	02255100 	.word	0x02255100
 8003038:	40568000 	.word	0x40568000
 800303c:	40010800 	.word	0x40010800
 8003040:	20000154 	.word	0x20000154
 8003044:	00000000 	.word	0x00000000

08003048 <STATE2>:
 * @param [in] 	- none
 * @retval 		- none
 * Note			- none
 */
void STATE2(void)
{
 8003048:	b5b0      	push	{r4, r5, r7, lr}
 800304a:	af00      	add	r7, sp, #0
	//Update the distance of ULT2
	dist1=HAL_ULTRASONIC_GET_DISTANCE(ULT2);
 800304c:	2001      	movs	r0, #1
 800304e:	f7fe fba7 	bl	80017a0 <HAL_ULTRASONIC_GET_DISTANCE>
 8003052:	4602      	mov	r2, r0
 8003054:	4b58      	ldr	r3, [pc, #352]	; (80031b8 <STATE2+0x170>)
 8003056:	601a      	str	r2, [r3, #0]

	//Check for empty spot
	if(dist1>=PARALLEL_PARKING_WIDTH)
 8003058:	4b57      	ldr	r3, [pc, #348]	; (80031b8 <STATE2+0x170>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b13      	cmp	r3, #19
 800305e:	f240 80a3 	bls.w	80031a8 <STATE2+0x160>
	{
		while(dist1>=PARALLEL_PARKING_WIDTH ) // update the distance
 8003062:	e099      	b.n	8003198 <STATE2+0x150>
		{
			dist3=HAL_ULTRASONIC_GET_DISTANCE(ULT1);
 8003064:	2000      	movs	r0, #0
 8003066:	f7fe fb9b 	bl	80017a0 <HAL_ULTRASONIC_GET_DISTANCE>
 800306a:	4602      	mov	r2, r0
 800306c:	4b53      	ldr	r3, [pc, #332]	; (80031bc <STATE2+0x174>)
 800306e:	601a      	str	r2, [r3, #0]

			//Check if any obstacle in front of the car
			if (dist3<=ULTRA1_DISTANCE)
 8003070:	4b52      	ldr	r3, [pc, #328]	; (80031bc <STATE2+0x174>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b05      	cmp	r3, #5
 8003076:	d801      	bhi.n	800307c <STATE2+0x34>
			{
				AVOID_FRONT_OBSTACLES();
 8003078:	f000 f912 	bl	80032a0 <AVOID_FRONT_OBSTACLES>
			}

			HAL_MOTOR_Motion(FORWARD);
 800307c:	2000      	movs	r0, #0
 800307e:	f7fe f993 	bl	80013a8 <HAL_MOTOR_Motion>

			if((dist1>=PERPINDECULAR_PARKING_WIDTH))
 8003082:	4b4d      	ldr	r3, [pc, #308]	; (80031b8 <STATE2+0x170>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b27      	cmp	r3, #39	; 0x27
 8003088:	d904      	bls.n	8003094 <STATE2+0x4c>
			{
				total_steps_perpendicular++;
 800308a:	4b4d      	ldr	r3, [pc, #308]	; (80031c0 <STATE2+0x178>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	3301      	adds	r3, #1
 8003090:	4a4b      	ldr	r2, [pc, #300]	; (80031c0 <STATE2+0x178>)
 8003092:	6013      	str	r3, [r2, #0]
			}

			dist1=HAL_ULTRASONIC_GET_DISTANCE(ULT2);
 8003094:	2001      	movs	r0, #1
 8003096:	f7fe fb83 	bl	80017a0 <HAL_ULTRASONIC_GET_DISTANCE>
 800309a:	4602      	mov	r2, r0
 800309c:	4b46      	ldr	r3, [pc, #280]	; (80031b8 <STATE2+0x170>)
 800309e:	601a      	str	r2, [r3, #0]
			total_steps_parallel++;
 80030a0:	4b48      	ldr	r3, [pc, #288]	; (80031c4 <STATE2+0x17c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	3301      	adds	r3, #1
 80030a6:	4a47      	ldr	r2, [pc, #284]	; (80031c4 <STATE2+0x17c>)
 80030a8:	6013      	str	r3, [r2, #0]

			//if their is no more obstacles or the car is parking in a free space, it will parking without a feedback from ultrasonic sensor
			dist1=HAL_ULTRASONIC_GET_DISTANCE(ULT2);
 80030aa:	2001      	movs	r0, #1
 80030ac:	f7fe fb78 	bl	80017a0 <HAL_ULTRASONIC_GET_DISTANCE>
 80030b0:	4602      	mov	r2, r0
 80030b2:	4b41      	ldr	r3, [pc, #260]	; (80031b8 <STATE2+0x170>)
 80030b4:	601a      	str	r2, [r3, #0]
			dist2=HAL_ULTRASONIC_GET_DISTANCE(ULT3);
 80030b6:	2002      	movs	r0, #2
 80030b8:	f7fe fb72 	bl	80017a0 <HAL_ULTRASONIC_GET_DISTANCE>
 80030bc:	4602      	mov	r2, r0
 80030be:	4b42      	ldr	r3, [pc, #264]	; (80031c8 <STATE2+0x180>)
 80030c0:	601a      	str	r2, [r3, #0]
			if(total_steps_parallel >= (PARALLEL_COUNTER*1.2))
 80030c2:	4b40      	ldr	r3, [pc, #256]	; (80031c4 <STATE2+0x17c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fd f994 	bl	80003f4 <__aeabi_ui2d>
 80030cc:	4604      	mov	r4, r0
 80030ce:	460d      	mov	r5, r1
 80030d0:	4b3e      	ldr	r3, [pc, #248]	; (80031cc <STATE2+0x184>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fd f98d 	bl	80003f4 <__aeabi_ui2d>
 80030da:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80030de:	4b3c      	ldr	r3, [pc, #240]	; (80031d0 <STATE2+0x188>)
 80030e0:	f7fd fa02 	bl	80004e8 <__aeabi_dmul>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4620      	mov	r0, r4
 80030ea:	4629      	mov	r1, r5
 80030ec:	f7fd fc82 	bl	80009f4 <__aeabi_dcmpge>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d01a      	beq.n	800312c <STATE2+0xe4>
			{

				if((dist2>=PARALLEL_PARKING_WIDTH) && (dist1>=PARALLEL_PARKING_WIDTH))
 80030f6:	4b34      	ldr	r3, [pc, #208]	; (80031c8 <STATE2+0x180>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b13      	cmp	r3, #19
 80030fc:	d916      	bls.n	800312c <STATE2+0xe4>
 80030fe:	4b2e      	ldr	r3, [pc, #184]	; (80031b8 <STATE2+0x170>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b13      	cmp	r3, #19
 8003104:	d912      	bls.n	800312c <STATE2+0xe4>
				{
					HAL_MOTOR_Motion(STOP);
 8003106:	2002      	movs	r0, #2
 8003108:	f7fe f94e 	bl	80013a8 <HAL_MOTOR_Motion>
					delay(250, U_ms, clk);
 800310c:	4a31      	ldr	r2, [pc, #196]	; (80031d4 <STATE2+0x18c>)
 800310e:	2100      	movs	r1, #0
 8003110:	20fa      	movs	r0, #250	; 0xfa
 8003112:	f7ff fd65 	bl	8002be0 <delay>
					PARALLEL_PATH_PLANNING();
 8003116:	f000 f8f7 	bl	8003308 <PARALLEL_PATH_PLANNING>
					HAL_MOTOR_Motion(STOP);
 800311a:	2002      	movs	r0, #2
 800311c:	f7fe f944 	bl	80013a8 <HAL_MOTOR_Motion>
					delay(5000, U_ms, clk);
 8003120:	4a2c      	ldr	r2, [pc, #176]	; (80031d4 <STATE2+0x18c>)
 8003122:	2100      	movs	r1, #0
 8003124:	f241 3088 	movw	r0, #5000	; 0x1388
 8003128:	f7ff fd5a 	bl	8002be0 <delay>
				}
			}

			if(total_steps_perpendicular >=  (PERPENDICULAR_COUNTER*1.8))
 800312c:	4b24      	ldr	r3, [pc, #144]	; (80031c0 <STATE2+0x178>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f7fd f95f 	bl	80003f4 <__aeabi_ui2d>
 8003136:	4604      	mov	r4, r0
 8003138:	460d      	mov	r5, r1
 800313a:	4b27      	ldr	r3, [pc, #156]	; (80031d8 <STATE2+0x190>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f7fd f958 	bl	80003f4 <__aeabi_ui2d>
 8003144:	a31a      	add	r3, pc, #104	; (adr r3, 80031b0 <STATE2+0x168>)
 8003146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314a:	f7fd f9cd 	bl	80004e8 <__aeabi_dmul>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4620      	mov	r0, r4
 8003154:	4629      	mov	r1, r5
 8003156:	f7fd fc4d 	bl	80009f4 <__aeabi_dcmpge>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d100      	bne.n	8003162 <STATE2+0x11a>
 8003160:	e01a      	b.n	8003198 <STATE2+0x150>
			{

				if((dist2>=PERPINDECULAR_PARKING_WIDTH) && (dist1>=PARALLEL_PARKING_WIDTH))
 8003162:	4b19      	ldr	r3, [pc, #100]	; (80031c8 <STATE2+0x180>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b27      	cmp	r3, #39	; 0x27
 8003168:	d916      	bls.n	8003198 <STATE2+0x150>
 800316a:	4b13      	ldr	r3, [pc, #76]	; (80031b8 <STATE2+0x170>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2b13      	cmp	r3, #19
 8003170:	d912      	bls.n	8003198 <STATE2+0x150>
				{
					HAL_MOTOR_Motion(STOP);
 8003172:	2002      	movs	r0, #2
 8003174:	f7fe f918 	bl	80013a8 <HAL_MOTOR_Motion>
					delay(250, U_ms, clk);
 8003178:	4a16      	ldr	r2, [pc, #88]	; (80031d4 <STATE2+0x18c>)
 800317a:	2100      	movs	r1, #0
 800317c:	20fa      	movs	r0, #250	; 0xfa
 800317e:	f7ff fd2f 	bl	8002be0 <delay>
					PERPENDICULAR_PATH_PLANNING();
 8003182:	f000 f94b 	bl	800341c <PERPENDICULAR_PATH_PLANNING>
					HAL_MOTOR_Motion(STOP);
 8003186:	2002      	movs	r0, #2
 8003188:	f7fe f90e 	bl	80013a8 <HAL_MOTOR_Motion>
					delay(5000, U_ms, clk);
 800318c:	4a11      	ldr	r2, [pc, #68]	; (80031d4 <STATE2+0x18c>)
 800318e:	2100      	movs	r1, #0
 8003190:	f241 3088 	movw	r0, #5000	; 0x1388
 8003194:	f7ff fd24 	bl	8002be0 <delay>
		while(dist1>=PARALLEL_PARKING_WIDTH ) // update the distance
 8003198:	4b07      	ldr	r3, [pc, #28]	; (80031b8 <STATE2+0x170>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b13      	cmp	r3, #19
 800319e:	f63f af61 	bhi.w	8003064 <STATE2+0x1c>
				}
			}
			//
		}
		STATE = 3;
 80031a2:	4b0e      	ldr	r3, [pc, #56]	; (80031dc <STATE2+0x194>)
 80031a4:	2203      	movs	r2, #3
 80031a6:	701a      	strb	r2, [r3, #0]
	}

}
 80031a8:	bf00      	nop
 80031aa:	bdb0      	pop	{r4, r5, r7, pc}
 80031ac:	f3af 8000 	nop.w
 80031b0:	cccccccd 	.word	0xcccccccd
 80031b4:	3ffccccc 	.word	0x3ffccccc
 80031b8:	2000015c 	.word	0x2000015c
 80031bc:	20000154 	.word	0x20000154
 80031c0:	200000c0 	.word	0x200000c0
 80031c4:	200000bc 	.word	0x200000bc
 80031c8:	20000158 	.word	0x20000158
 80031cc:	200000c8 	.word	0x200000c8
 80031d0:	3ff33333 	.word	0x3ff33333
 80031d4:	02255100 	.word	0x02255100
 80031d8:	200000c4 	.word	0x200000c4
 80031dc:	200000ba 	.word	0x200000ba

080031e0 <STATE3>:
 * @param [in] 	- none
 * @retval 		- none
 * Note			- none
 */
void STATE3(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0

	if(STATE == 3)
 80031e4:	4b27      	ldr	r3, [pc, #156]	; (8003284 <STATE3+0xa4>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b03      	cmp	r3, #3
 80031ea:	d149      	bne.n	8003280 <STATE3+0xa0>
	{

		HAL_MOTOR_Motion(FORWARD);
 80031ec:	2000      	movs	r0, #0
 80031ee:	f7fe f8db 	bl	80013a8 <HAL_MOTOR_Motion>
		dist2=HAL_ULTRASONIC_GET_DISTANCE(ULT3);
 80031f2:	2002      	movs	r0, #2
 80031f4:	f7fe fad4 	bl	80017a0 <HAL_ULTRASONIC_GET_DISTANCE>
 80031f8:	4602      	mov	r2, r0
 80031fa:	4b23      	ldr	r3, [pc, #140]	; (8003288 <STATE3+0xa8>)
 80031fc:	601a      	str	r2, [r3, #0]

		while(dist2>=PARALLEL_PARKING_WIDTH) // update the distance
 80031fe:	e008      	b.n	8003212 <STATE3+0x32>
		{
			dist2=HAL_ULTRASONIC_GET_DISTANCE(ULT3);
 8003200:	2002      	movs	r0, #2
 8003202:	f7fe facd 	bl	80017a0 <HAL_ULTRASONIC_GET_DISTANCE>
 8003206:	4602      	mov	r2, r0
 8003208:	4b1f      	ldr	r3, [pc, #124]	; (8003288 <STATE3+0xa8>)
 800320a:	601a      	str	r2, [r3, #0]
			HAL_MOTOR_Motion(FORWARD);
 800320c:	2000      	movs	r0, #0
 800320e:	f7fe f8cb 	bl	80013a8 <HAL_MOTOR_Motion>
		while(dist2>=PARALLEL_PARKING_WIDTH) // update the distance
 8003212:	4b1d      	ldr	r3, [pc, #116]	; (8003288 <STATE3+0xa8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b13      	cmp	r3, #19
 8003218:	d8f2      	bhi.n	8003200 <STATE3+0x20>
			//

			//
		}

		if( total_steps_parallel >=PARALLEL_COUNTER )
 800321a:	4b1c      	ldr	r3, [pc, #112]	; (800328c <STATE3+0xac>)
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	4b1c      	ldr	r3, [pc, #112]	; (8003290 <STATE3+0xb0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d313      	bcc.n	800324e <STATE3+0x6e>
		{

			HAL_MOTOR_Motion(STOP);
 8003226:	2002      	movs	r0, #2
 8003228:	f7fe f8be 	bl	80013a8 <HAL_MOTOR_Motion>
			delay(250, U_ms, clk);
 800322c:	4a19      	ldr	r2, [pc, #100]	; (8003294 <STATE3+0xb4>)
 800322e:	2100      	movs	r1, #0
 8003230:	20fa      	movs	r0, #250	; 0xfa
 8003232:	f7ff fcd5 	bl	8002be0 <delay>
			PARALLEL_PATH_PLANNING();
 8003236:	f000 f867 	bl	8003308 <PARALLEL_PATH_PLANNING>
			HAL_MOTOR_Motion(STOP);
 800323a:	2002      	movs	r0, #2
 800323c:	f7fe f8b4 	bl	80013a8 <HAL_MOTOR_Motion>
			delay(5000, U_ms, clk);
 8003240:	4a14      	ldr	r2, [pc, #80]	; (8003294 <STATE3+0xb4>)
 8003242:	2100      	movs	r1, #0
 8003244:	f241 3088 	movw	r0, #5000	; 0x1388
 8003248:	f7ff fcca 	bl	8002be0 <delay>
			HAL_MOTOR_Motion(STOP);
			delay(5000, U_ms, clk);
		}
	}

}
 800324c:	e018      	b.n	8003280 <STATE3+0xa0>
		else if (total_steps_perpendicular >=  PERPENDICULAR_COUNTER)
 800324e:	4b12      	ldr	r3, [pc, #72]	; (8003298 <STATE3+0xb8>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	4b12      	ldr	r3, [pc, #72]	; (800329c <STATE3+0xbc>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d312      	bcc.n	8003280 <STATE3+0xa0>
			HAL_MOTOR_Motion(STOP);
 800325a:	2002      	movs	r0, #2
 800325c:	f7fe f8a4 	bl	80013a8 <HAL_MOTOR_Motion>
			delay(250, U_ms, clk);
 8003260:	4a0c      	ldr	r2, [pc, #48]	; (8003294 <STATE3+0xb4>)
 8003262:	2100      	movs	r1, #0
 8003264:	20fa      	movs	r0, #250	; 0xfa
 8003266:	f7ff fcbb 	bl	8002be0 <delay>
			PERPENDICULAR_PATH_PLANNING();
 800326a:	f000 f8d7 	bl	800341c <PERPENDICULAR_PATH_PLANNING>
			HAL_MOTOR_Motion(STOP);
 800326e:	2002      	movs	r0, #2
 8003270:	f7fe f89a 	bl	80013a8 <HAL_MOTOR_Motion>
			delay(5000, U_ms, clk);
 8003274:	4a07      	ldr	r2, [pc, #28]	; (8003294 <STATE3+0xb4>)
 8003276:	2100      	movs	r1, #0
 8003278:	f241 3088 	movw	r0, #5000	; 0x1388
 800327c:	f7ff fcb0 	bl	8002be0 <delay>
}
 8003280:	bf00      	nop
 8003282:	bd80      	pop	{r7, pc}
 8003284:	200000ba 	.word	0x200000ba
 8003288:	20000158 	.word	0x20000158
 800328c:	200000bc 	.word	0x200000bc
 8003290:	200000c8 	.word	0x200000c8
 8003294:	02255100 	.word	0x02255100
 8003298:	200000c0 	.word	0x200000c0
 800329c:	200000c4 	.word	0x200000c4

080032a0 <AVOID_FRONT_OBSTACLES>:
 * @param [in] 	- none
 * @retval 		- none
 * Note			- none
 */
void AVOID_FRONT_OBSTACLES(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
	while(dist3<=ULTRA1_DISTANCE)
 80032a4:	e023      	b.n	80032ee <AVOID_FRONT_OBSTACLES+0x4e>
	{

		MCAL_GPIO_INIT(BUZZER_PORT, BUZZER_PIN, Output_PP_Mode_Speed10MHZ);
 80032a6:	2201      	movs	r2, #1
 80032a8:	210c      	movs	r1, #12
 80032aa:	4814      	ldr	r0, [pc, #80]	; (80032fc <AVOID_FRONT_OBSTACLES+0x5c>)
 80032ac:	f7fe fb6e 	bl	800198c <MCAL_GPIO_INIT>
		HAL_MOTOR_Motion(STOP);
 80032b0:	2002      	movs	r0, #2
 80032b2:	f7fe f879 	bl	80013a8 <HAL_MOTOR_Motion>
		MCAL_GPIO_WRITEPIN(BUZZER_PORT, BUZZER_PIN, 1);
 80032b6:	2201      	movs	r2, #1
 80032b8:	210c      	movs	r1, #12
 80032ba:	4810      	ldr	r0, [pc, #64]	; (80032fc <AVOID_FRONT_OBSTACLES+0x5c>)
 80032bc:	f7fe fc42 	bl	8001b44 <MCAL_GPIO_WRITEPIN>
		delay(1000, U_ms, clk);
 80032c0:	4a0f      	ldr	r2, [pc, #60]	; (8003300 <AVOID_FRONT_OBSTACLES+0x60>)
 80032c2:	2100      	movs	r1, #0
 80032c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032c8:	f7ff fc8a 	bl	8002be0 <delay>
		MCAL_GPIO_WRITEPIN(BUZZER_PORT, BUZZER_PIN, 0);
 80032cc:	2200      	movs	r2, #0
 80032ce:	210c      	movs	r1, #12
 80032d0:	480a      	ldr	r0, [pc, #40]	; (80032fc <AVOID_FRONT_OBSTACLES+0x5c>)
 80032d2:	f7fe fc37 	bl	8001b44 <MCAL_GPIO_WRITEPIN>
		delay(500, U_ms, clk);
 80032d6:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <AVOID_FRONT_OBSTACLES+0x60>)
 80032d8:	2100      	movs	r1, #0
 80032da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80032de:	f7ff fc7f 	bl	8002be0 <delay>

		dist3=HAL_ULTRASONIC_GET_DISTANCE(ULT1);
 80032e2:	2000      	movs	r0, #0
 80032e4:	f7fe fa5c 	bl	80017a0 <HAL_ULTRASONIC_GET_DISTANCE>
 80032e8:	4602      	mov	r2, r0
 80032ea:	4b06      	ldr	r3, [pc, #24]	; (8003304 <AVOID_FRONT_OBSTACLES+0x64>)
 80032ec:	601a      	str	r2, [r3, #0]
	while(dist3<=ULTRA1_DISTANCE)
 80032ee:	4b05      	ldr	r3, [pc, #20]	; (8003304 <AVOID_FRONT_OBSTACLES+0x64>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b05      	cmp	r3, #5
 80032f4:	d9d7      	bls.n	80032a6 <AVOID_FRONT_OBSTACLES+0x6>

	}

}
 80032f6:	bf00      	nop
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40010800 	.word	0x40010800
 8003300:	02255100 	.word	0x02255100
 8003304:	20000154 	.word	0x20000154

08003308 <PARALLEL_PATH_PLANNING>:
 * @param [in] 	- none
 * @retval 		- none
 * Note			- none
 */
void PARALLEL_PATH_PLANNING(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
	/**********************
	 * Start point
	 *********************/
	// Stop the car with the end of the obstacle
	HAL_MOTOR_Motion(STOP);
 800330c:	2002      	movs	r0, #2
 800330e:	f7fe f84b 	bl	80013a8 <HAL_MOTOR_Motion>
	delay(200, U_ms, CLK);
 8003312:	4a3f      	ldr	r2, [pc, #252]	; (8003410 <PARALLEL_PATH_PLANNING+0x108>)
 8003314:	2100      	movs	r1, #0
 8003316:	20c8      	movs	r0, #200	; 0xc8
 8003318:	f7ff fc62 	bl	8002be0 <delay>
	HAL_MOTOR_Motion(FORWARD);
 800331c:	2000      	movs	r0, #0
 800331e:	f7fe f843 	bl	80013a8 <HAL_MOTOR_Motion>
	delay(PARALLEL_START_POS_TIME, U_ms, CLK);
 8003322:	4a3b      	ldr	r2, [pc, #236]	; (8003410 <PARALLEL_PATH_PLANNING+0x108>)
 8003324:	2100      	movs	r1, #0
 8003326:	f240 5046 	movw	r0, #1350	; 0x546
 800332a:	f7ff fc59 	bl	8002be0 <delay>
	HAL_MOTOR_Motion(STOP);
 800332e:	2002      	movs	r0, #2
 8003330:	f7fe f83a 	bl	80013a8 <HAL_MOTOR_Motion>
	delay(250, U_ms, CLK);
 8003334:	4a36      	ldr	r2, [pc, #216]	; (8003410 <PARALLEL_PATH_PLANNING+0x108>)
 8003336:	2100      	movs	r1, #0
 8003338:	20fa      	movs	r0, #250	; 0xfa
 800333a:	f7ff fc51 	bl	8002be0 <delay>

	/**********************
	 * First maneuver
	 *********************/
	// First arc mode
	HAL_Servo_Set_Angle(PARALLEL_ARC_STEERING_ANGLE1, CLK);
 800333e:	4a34      	ldr	r2, [pc, #208]	; (8003410 <PARALLEL_PATH_PLANNING+0x108>)
 8003340:	a131      	add	r1, pc, #196	; (adr r1, 8003408 <PARALLEL_PATH_PLANNING+0x100>)
 8003342:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003346:	f7fe f863 	bl	8001410 <HAL_Servo_Set_Angle>
	delay(250, U_ms, CLK);
 800334a:	4a31      	ldr	r2, [pc, #196]	; (8003410 <PARALLEL_PATH_PLANNING+0x108>)
 800334c:	2100      	movs	r1, #0
 800334e:	20fa      	movs	r0, #250	; 0xfa
 8003350:	f7ff fc46 	bl	8002be0 <delay>
	HAL_MOTOR_Motion(REVERSE);
 8003354:	2001      	movs	r0, #1
 8003356:	f7fe f827 	bl	80013a8 <HAL_MOTOR_Motion>
	delay(PARALLEL_ARC1_TIME, U_ms, CLK);
 800335a:	4a2d      	ldr	r2, [pc, #180]	; (8003410 <PARALLEL_PATH_PLANNING+0x108>)
 800335c:	2100      	movs	r1, #0
 800335e:	f640 2028 	movw	r0, #2600	; 0xa28
 8003362:	f7ff fc3d 	bl	8002be0 <delay>
	HAL_MOTOR_Motion(STOP);
 8003366:	2002      	movs	r0, #2
 8003368:	f7fe f81e 	bl	80013a8 <HAL_MOTOR_Motion>
	delay(250, U_ms, CLK);
 800336c:	4a28      	ldr	r2, [pc, #160]	; (8003410 <PARALLEL_PATH_PLANNING+0x108>)
 800336e:	2100      	movs	r1, #0
 8003370:	20fa      	movs	r0, #250	; 0xfa
 8003372:	f7ff fc35 	bl	8002be0 <delay>

	// Straight line mode
	HAL_Servo_Set_Angle(PARALLEL_LINE_STEERING_ANGLE, CLK);
 8003376:	4a26      	ldr	r2, [pc, #152]	; (8003410 <PARALLEL_PATH_PLANNING+0x108>)
 8003378:	f04f 0000 	mov.w	r0, #0
 800337c:	4925      	ldr	r1, [pc, #148]	; (8003414 <PARALLEL_PATH_PLANNING+0x10c>)
 800337e:	f7fe f847 	bl	8001410 <HAL_Servo_Set_Angle>
	delay(250, U_ms, CLK);
 8003382:	4a23      	ldr	r2, [pc, #140]	; (8003410 <PARALLEL_PATH_PLANNING+0x108>)
 8003384:	2100      	movs	r1, #0
 8003386:	20fa      	movs	r0, #250	; 0xfa
 8003388:	f7ff fc2a 	bl	8002be0 <delay>
	HAL_MOTOR_Motion(REVERSE);
 800338c:	2001      	movs	r0, #1
 800338e:	f7fe f80b 	bl	80013a8 <HAL_MOTOR_Motion>
	delay(PARALLEL_LINE_TIME, U_ms, CLK);
 8003392:	4a1f      	ldr	r2, [pc, #124]	; (8003410 <PARALLEL_PATH_PLANNING+0x108>)
 8003394:	2100      	movs	r1, #0
 8003396:	f640 2028 	movw	r0, #2600	; 0xa28
 800339a:	f7ff fc21 	bl	8002be0 <delay>
	HAL_MOTOR_Motion(STOP);
 800339e:	2002      	movs	r0, #2
 80033a0:	f7fe f802 	bl	80013a8 <HAL_MOTOR_Motion>
	delay(250, U_ms, CLK);
 80033a4:	4a1a      	ldr	r2, [pc, #104]	; (8003410 <PARALLEL_PATH_PLANNING+0x108>)
 80033a6:	2100      	movs	r1, #0
 80033a8:	20fa      	movs	r0, #250	; 0xfa
 80033aa:	f7ff fc19 	bl	8002be0 <delay>

	// Second arc mode
	HAL_Servo_Set_Angle(PARALLEL_ARC_STEERING_ANGLE3, CLK);
 80033ae:	4a18      	ldr	r2, [pc, #96]	; (8003410 <PARALLEL_PATH_PLANNING+0x108>)
 80033b0:	f04f 0000 	mov.w	r0, #0
 80033b4:	4918      	ldr	r1, [pc, #96]	; (8003418 <PARALLEL_PATH_PLANNING+0x110>)
 80033b6:	f7fe f82b 	bl	8001410 <HAL_Servo_Set_Angle>
	delay(250, U_ms, CLK);
 80033ba:	4a15      	ldr	r2, [pc, #84]	; (8003410 <PARALLEL_PATH_PLANNING+0x108>)
 80033bc:	2100      	movs	r1, #0
 80033be:	20fa      	movs	r0, #250	; 0xfa
 80033c0:	f7ff fc0e 	bl	8002be0 <delay>
	HAL_MOTOR_Motion(REVERSE);
 80033c4:	2001      	movs	r0, #1
 80033c6:	f7fd ffef 	bl	80013a8 <HAL_MOTOR_Motion>
	delay(PARALLEL_ARC2_TIME, U_ms, CLK);
 80033ca:	4a11      	ldr	r2, [pc, #68]	; (8003410 <PARALLEL_PATH_PLANNING+0x108>)
 80033cc:	2100      	movs	r1, #0
 80033ce:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 80033d2:	f7ff fc05 	bl	8002be0 <delay>
	HAL_MOTOR_Motion(STOP);
 80033d6:	2002      	movs	r0, #2
 80033d8:	f7fd ffe6 	bl	80013a8 <HAL_MOTOR_Motion>
	delay(250, U_ms, CLK);
 80033dc:	4a0c      	ldr	r2, [pc, #48]	; (8003410 <PARALLEL_PATH_PLANNING+0x108>)
 80033de:	2100      	movs	r1, #0
 80033e0:	20fa      	movs	r0, #250	; 0xfa
 80033e2:	f7ff fbfd 	bl	8002be0 <delay>
	HAL_Servo_Set_Angle(90, CLK);
 80033e6:	4a0a      	ldr	r2, [pc, #40]	; (8003410 <PARALLEL_PATH_PLANNING+0x108>)
 80033e8:	f04f 0000 	mov.w	r0, #0
 80033ec:	4909      	ldr	r1, [pc, #36]	; (8003414 <PARALLEL_PATH_PLANNING+0x10c>)
 80033ee:	f7fe f80f 	bl	8001410 <HAL_Servo_Set_Angle>
	delay(10000, U_ms, CLK);
 80033f2:	4a07      	ldr	r2, [pc, #28]	; (8003410 <PARALLEL_PATH_PLANNING+0x108>)
 80033f4:	2100      	movs	r1, #0
 80033f6:	f242 7010 	movw	r0, #10000	; 0x2710
 80033fa:	f7ff fbf1 	bl	8002be0 <delay>
	 * Second maneuver
	 *********************/
	// Made the car stop in the middle of its parking space
	// Front distance = 8cm, move 4cm

}
 80033fe:	bf00      	nop
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	f3af 8000 	nop.w
 8003408:	00000000 	.word	0x00000000
 800340c:	4060e000 	.word	0x4060e000
 8003410:	02255100 	.word	0x02255100
 8003414:	40568000 	.word	0x40568000
 8003418:	40468000 	.word	0x40468000

0800341c <PERPENDICULAR_PATH_PLANNING>:
 * @param [in] 	- none
 * @retval 		- none
 * Note			- none
 */
void PERPENDICULAR_PATH_PLANNING(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
	/**********************
	 * Start point
	 *********************/
	// Stop the car with the end of the obstacle
	HAL_MOTOR_Motion(STOP);
 8003420:	2002      	movs	r0, #2
 8003422:	f7fd ffc1 	bl	80013a8 <HAL_MOTOR_Motion>
	delay(200, U_ms, CLK);
 8003426:	4a23      	ldr	r2, [pc, #140]	; (80034b4 <PERPENDICULAR_PATH_PLANNING+0x98>)
 8003428:	2100      	movs	r1, #0
 800342a:	20c8      	movs	r0, #200	; 0xc8
 800342c:	f7ff fbd8 	bl	8002be0 <delay>
	HAL_MOTOR_Motion(FORWARD);
 8003430:	2000      	movs	r0, #0
 8003432:	f7fd ffb9 	bl	80013a8 <HAL_MOTOR_Motion>
	delay(PERPINDECULAR_START_POS_TIME, U_ms, CLK);
 8003436:	4a1f      	ldr	r2, [pc, #124]	; (80034b4 <PERPENDICULAR_PATH_PLANNING+0x98>)
 8003438:	2100      	movs	r1, #0
 800343a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800343e:	f7ff fbcf 	bl	8002be0 <delay>
	HAL_MOTOR_Motion(STOP);
 8003442:	2002      	movs	r0, #2
 8003444:	f7fd ffb0 	bl	80013a8 <HAL_MOTOR_Motion>
	delay(250, U_ms, CLK);
 8003448:	4a1a      	ldr	r2, [pc, #104]	; (80034b4 <PERPENDICULAR_PATH_PLANNING+0x98>)
 800344a:	2100      	movs	r1, #0
 800344c:	20fa      	movs	r0, #250	; 0xfa
 800344e:	f7ff fbc7 	bl	8002be0 <delay>

	//second arc mode
	HAL_Servo_Set_Angle(PERPINDECULAR_ARC_STEERING_ANGLE1, clk);
 8003452:	4a18      	ldr	r2, [pc, #96]	; (80034b4 <PERPENDICULAR_PATH_PLANNING+0x98>)
 8003454:	f04f 0000 	mov.w	r0, #0
 8003458:	4917      	ldr	r1, [pc, #92]	; (80034b8 <PERPENDICULAR_PATH_PLANNING+0x9c>)
 800345a:	f7fd ffd9 	bl	8001410 <HAL_Servo_Set_Angle>
	HAL_MOTOR_Motion(REVERSE);
 800345e:	2001      	movs	r0, #1
 8003460:	f7fd ffa2 	bl	80013a8 <HAL_MOTOR_Motion>
	delay(PERPINDECULAR_ARC_TIME, U_ms, clk);
 8003464:	4a13      	ldr	r2, [pc, #76]	; (80034b4 <PERPENDICULAR_PATH_PLANNING+0x98>)
 8003466:	2100      	movs	r1, #0
 8003468:	f641 2090 	movw	r0, #6800	; 0x1a90
 800346c:	f7ff fbb8 	bl	8002be0 <delay>
	HAL_MOTOR_Motion(STOP);
 8003470:	2002      	movs	r0, #2
 8003472:	f7fd ff99 	bl	80013a8 <HAL_MOTOR_Motion>
	delay(250, U_ms, clk);
 8003476:	4a0f      	ldr	r2, [pc, #60]	; (80034b4 <PERPENDICULAR_PATH_PLANNING+0x98>)
 8003478:	2100      	movs	r1, #0
 800347a:	20fa      	movs	r0, #250	; 0xfa
 800347c:	f7ff fbb0 	bl	8002be0 <delay>

	//straight line mode
	HAL_Servo_Set_Angle(PERPINDECULAR_LINE_STEERING_ANGLE, clk);
 8003480:	4a0c      	ldr	r2, [pc, #48]	; (80034b4 <PERPENDICULAR_PATH_PLANNING+0x98>)
 8003482:	f04f 0000 	mov.w	r0, #0
 8003486:	490d      	ldr	r1, [pc, #52]	; (80034bc <PERPENDICULAR_PATH_PLANNING+0xa0>)
 8003488:	f7fd ffc2 	bl	8001410 <HAL_Servo_Set_Angle>
	HAL_MOTOR_Motion(REVERSE);
 800348c:	2001      	movs	r0, #1
 800348e:	f7fd ff8b 	bl	80013a8 <HAL_MOTOR_Motion>
	delay(PERPINDECULAR_LINE__TIME, U_ms, clk);
 8003492:	4a08      	ldr	r2, [pc, #32]	; (80034b4 <PERPENDICULAR_PATH_PLANNING+0x98>)
 8003494:	2100      	movs	r1, #0
 8003496:	f240 5014 	movw	r0, #1300	; 0x514
 800349a:	f7ff fba1 	bl	8002be0 <delay>
	HAL_MOTOR_Motion(STOP);
 800349e:	2002      	movs	r0, #2
 80034a0:	f7fd ff82 	bl	80013a8 <HAL_MOTOR_Motion>
	delay(10000, U_ms, CLK);
 80034a4:	4a03      	ldr	r2, [pc, #12]	; (80034b4 <PERPENDICULAR_PATH_PLANNING+0x98>)
 80034a6:	2100      	movs	r1, #0
 80034a8:	f242 7010 	movw	r0, #10000	; 0x2710
 80034ac:	f7ff fb98 	bl	8002be0 <delay>
}
 80034b0:	bf00      	nop
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	02255100 	.word	0x02255100
 80034b8:	40604000 	.word	0x40604000
 80034bc:	40568000 	.word	0x40568000

080034c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80034c0:	480d      	ldr	r0, [pc, #52]	; (80034f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80034c2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80034c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034c8:	480c      	ldr	r0, [pc, #48]	; (80034fc <LoopForever+0x6>)
  ldr r1, =_edata
 80034ca:	490d      	ldr	r1, [pc, #52]	; (8003500 <LoopForever+0xa>)
  ldr r2, =_sidata
 80034cc:	4a0d      	ldr	r2, [pc, #52]	; (8003504 <LoopForever+0xe>)
  movs r3, #0
 80034ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034d0:	e002      	b.n	80034d8 <LoopCopyDataInit>

080034d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034d6:	3304      	adds	r3, #4

080034d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034dc:	d3f9      	bcc.n	80034d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034de:	4a0a      	ldr	r2, [pc, #40]	; (8003508 <LoopForever+0x12>)
  ldr r4, =_ebss
 80034e0:	4c0a      	ldr	r4, [pc, #40]	; (800350c <LoopForever+0x16>)
  movs r3, #0
 80034e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034e4:	e001      	b.n	80034ea <LoopFillZerobss>

080034e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034e8:	3204      	adds	r2, #4

080034ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034ec:	d3fb      	bcc.n	80034e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80034ee:	f000 f811 	bl	8003514 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80034f2:	f7ff fd53 	bl	8002f9c <main>

080034f6 <LoopForever>:

LoopForever:
    b LoopForever
 80034f6:	e7fe      	b.n	80034f6 <LoopForever>
  ldr   r0, =_estack
 80034f8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80034fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003500:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8003504:	0800357c 	.word	0x0800357c
  ldr r2, =_sbss
 8003508:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 800350c:	20000160 	.word	0x20000160

08003510 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003510:	e7fe      	b.n	8003510 <ADC1_2_IRQHandler>
	...

08003514 <__libc_init_array>:
 8003514:	b570      	push	{r4, r5, r6, lr}
 8003516:	2500      	movs	r5, #0
 8003518:	4e0c      	ldr	r6, [pc, #48]	; (800354c <__libc_init_array+0x38>)
 800351a:	4c0d      	ldr	r4, [pc, #52]	; (8003550 <__libc_init_array+0x3c>)
 800351c:	1ba4      	subs	r4, r4, r6
 800351e:	10a4      	asrs	r4, r4, #2
 8003520:	42a5      	cmp	r5, r4
 8003522:	d109      	bne.n	8003538 <__libc_init_array+0x24>
 8003524:	f000 f81a 	bl	800355c <_init>
 8003528:	2500      	movs	r5, #0
 800352a:	4e0a      	ldr	r6, [pc, #40]	; (8003554 <__libc_init_array+0x40>)
 800352c:	4c0a      	ldr	r4, [pc, #40]	; (8003558 <__libc_init_array+0x44>)
 800352e:	1ba4      	subs	r4, r4, r6
 8003530:	10a4      	asrs	r4, r4, #2
 8003532:	42a5      	cmp	r5, r4
 8003534:	d105      	bne.n	8003542 <__libc_init_array+0x2e>
 8003536:	bd70      	pop	{r4, r5, r6, pc}
 8003538:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800353c:	4798      	blx	r3
 800353e:	3501      	adds	r5, #1
 8003540:	e7ee      	b.n	8003520 <__libc_init_array+0xc>
 8003542:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003546:	4798      	blx	r3
 8003548:	3501      	adds	r5, #1
 800354a:	e7f2      	b.n	8003532 <__libc_init_array+0x1e>
 800354c:	08003574 	.word	0x08003574
 8003550:	08003574 	.word	0x08003574
 8003554:	08003574 	.word	0x08003574
 8003558:	08003578 	.word	0x08003578

0800355c <_init>:
 800355c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355e:	bf00      	nop
 8003560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003562:	bc08      	pop	{r3}
 8003564:	469e      	mov	lr, r3
 8003566:	4770      	bx	lr

08003568 <_fini>:
 8003568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356a:	bf00      	nop
 800356c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800356e:	bc08      	pop	{r3}
 8003570:	469e      	mov	lr, r3
 8003572:	4770      	bx	lr
